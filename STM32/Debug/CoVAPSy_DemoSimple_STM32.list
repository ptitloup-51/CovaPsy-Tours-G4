
CoVAPSy_DemoSimple_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d768  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001958  0800d948  0800d948  0001d948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2a0  0800f2a0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f2a0  0800f2a0  0001f2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2a8  0800f2a8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2a8  0800f2a8  0001f2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f2ac  0800f2ac  0001f2ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f2b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000894  200001e4  0800f494  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a78  0800f494  00020a78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fbcd  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040b0  00000000  00000000  0003fe24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bb8  00000000  00000000  00043ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001591  00000000  00000000  00045a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023859  00000000  00000000  00047021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002298c  00000000  00000000  0006a87a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2a35  00000000  00000000  0008d206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008b98  00000000  00000000  0016fc3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001787d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d930 	.word	0x0800d930

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800d930 	.word	0x0800d930

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08c      	sub	sp, #48	; 0x30
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2220      	movs	r2, #32
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f009 f82c 	bl	800a0b6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800105e:	4b32      	ldr	r3, [pc, #200]	; (8001128 <MX_ADC1_Init+0xe8>)
 8001060:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001064:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001066:	4b30      	ldr	r3, [pc, #192]	; (8001128 <MX_ADC1_Init+0xe8>)
 8001068:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800106c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800106e:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <MX_ADC1_Init+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001074:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <MX_ADC1_Init+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107a:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <MX_ADC1_Init+0xe8>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001080:	4b29      	ldr	r3, [pc, #164]	; (8001128 <MX_ADC1_Init+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <MX_ADC1_Init+0xe8>)
 8001088:	2204      	movs	r2, #4
 800108a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108c:	4b26      	ldr	r3, [pc, #152]	; (8001128 <MX_ADC1_Init+0xe8>)
 800108e:	2200      	movs	r2, #0
 8001090:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <MX_ADC1_Init+0xe8>)
 8001094:	2201      	movs	r2, #1
 8001096:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001098:	4b23      	ldr	r3, [pc, #140]	; (8001128 <MX_ADC1_Init+0xe8>)
 800109a:	2201      	movs	r2, #1
 800109c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109e:	4b22      	ldr	r3, [pc, #136]	; (8001128 <MX_ADC1_Init+0xe8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ac:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <MX_ADC1_Init+0xe8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b2:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <MX_ADC1_Init+0xe8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MX_ADC1_Init+0xe8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <MX_ADC1_Init+0xe8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c8:	4817      	ldr	r0, [pc, #92]	; (8001128 <MX_ADC1_Init+0xe8>)
 80010ca:	f001 fd6d 	bl	8002ba8 <HAL_ADC_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010d4:	f000 fae8 	bl	80016a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e0:	4619      	mov	r1, r3
 80010e2:	4811      	ldr	r0, [pc, #68]	; (8001128 <MX_ADC1_Init+0xe8>)
 80010e4:	f002 fd04 	bl	8003af0 <HAL_ADCEx_MultiModeConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010ee:	f000 fadb 	bl	80016a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_ADC1_Init+0xec>)
 80010f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f6:	2306      	movs	r3, #6
 80010f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010fe:	237f      	movs	r3, #127	; 0x7f
 8001100:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001102:	2304      	movs	r3, #4
 8001104:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4619      	mov	r1, r3
 800110e:	4806      	ldr	r0, [pc, #24]	; (8001128 <MX_ADC1_Init+0xe8>)
 8001110:	f002 f876 	bl	8003200 <HAL_ADC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800111a:	f000 fac5 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	3730      	adds	r7, #48	; 0x30
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000200 	.word	0x20000200
 800112c:	10c00010 	.word	0x10c00010

08001130 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b09a      	sub	sp, #104	; 0x68
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	2244      	movs	r2, #68	; 0x44
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f008 ffb0 	bl	800a0b6 <memset>
  if(adcHandle->Instance==ADC1)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800115e:	d134      	bne.n	80011ca <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001160:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001164:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001166:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800116a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	4618      	mov	r0, r3
 8001172:	f004 faa5 	bl	80056c0 <HAL_RCCEx_PeriphCLKConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800117c:	f000 fa94 	bl	80016a8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_ADC_MspInit+0xa4>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001184:	4a13      	ldr	r2, [pc, #76]	; (80011d4 <HAL_ADC_MspInit+0xa4>)
 8001186:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800118a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_ADC_MspInit+0xa4>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_ADC_MspInit+0xa4>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <HAL_ADC_MspInit+0xa4>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_ADC_MspInit+0xa4>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011b0:	2308      	movs	r3, #8
 80011b2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b4:	2303      	movs	r3, #3
 80011b6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011c0:	4619      	mov	r1, r3
 80011c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c6:	f002 ff07 	bl	8003fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011ca:	bf00      	nop
 80011cc:	3768      	adds	r7, #104	; 0x68
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000

080011d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_GPIO_Init+0x44>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	4a0e      	ldr	r2, [pc, #56]	; (800121c <MX_GPIO_Init+0x44>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_GPIO_Init+0x44>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_GPIO_Init+0x44>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	4a08      	ldr	r2, [pc, #32]	; (800121c <MX_GPIO_Init+0x44>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_GPIO_Init+0x44>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000

08001220 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001224:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <MX_I2C1_Init+0x80>)
 8001226:	4a1f      	ldr	r2, [pc, #124]	; (80012a4 <MX_I2C1_Init+0x84>)
 8001228:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00802172;
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <MX_I2C1_Init+0x80>)
 800122c:	4a1e      	ldr	r2, [pc, #120]	; (80012a8 <MX_I2C1_Init+0x88>)
 800122e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <MX_I2C1_Init+0x80>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_I2C1_Init+0x80>)
 8001238:	2201      	movs	r2, #1
 800123a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <MX_I2C1_Init+0x80>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <MX_I2C1_Init+0x80>)
 8001244:	2200      	movs	r2, #0
 8001246:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_I2C1_Init+0x80>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_I2C1_Init+0x80>)
 8001250:	2200      	movs	r2, #0
 8001252:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_I2C1_Init+0x80>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800125a:	4811      	ldr	r0, [pc, #68]	; (80012a0 <MX_I2C1_Init+0x80>)
 800125c:	f003 f83e 	bl	80042dc <HAL_I2C_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001266:	f000 fa1f 	bl	80016a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800126a:	2100      	movs	r1, #0
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <MX_I2C1_Init+0x80>)
 800126e:	f003 fbb7 	bl	80049e0 <HAL_I2CEx_ConfigAnalogFilter>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001278:	f000 fa16 	bl	80016a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800127c:	2100      	movs	r1, #0
 800127e:	4808      	ldr	r0, [pc, #32]	; (80012a0 <MX_I2C1_Init+0x80>)
 8001280:	f003 fbf9 	bl	8004a76 <HAL_I2CEx_ConfigDigitalFilter>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800128a:	f000 fa0d 	bl	80016a8 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <MX_I2C1_Init+0x8c>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	4a06      	ldr	r2, [pc, #24]	; (80012ac <MX_I2C1_Init+0x8c>)
 8001294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001298:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000026c 	.word	0x2000026c
 80012a4:	40005400 	.word	0x40005400
 80012a8:	00802172 	.word	0x00802172
 80012ac:	40010000 	.word	0x40010000

080012b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b09c      	sub	sp, #112	; 0x70
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c8:	f107 0318 	add.w	r3, r7, #24
 80012cc:	2244      	movs	r2, #68	; 0x44
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f008 fef0 	bl	800a0b6 <memset>
  if(i2cHandle->Instance==I2C1)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a2d      	ldr	r2, [pc, #180]	; (8001390 <HAL_I2C_MspInit+0xe0>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d153      	bne.n	8001388 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012e0:	2340      	movs	r3, #64	; 0x40
 80012e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e8:	f107 0318 	add.w	r3, r7, #24
 80012ec:	4618      	mov	r0, r3
 80012ee:	f004 f9e7 	bl	80056c0 <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012f8:	f000 f9d6 	bl	80016a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	4b25      	ldr	r3, [pc, #148]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 80012fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001300:	4a24      	ldr	r2, [pc, #144]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001308:	4b22      	ldr	r3, [pc, #136]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 800130a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001314:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001318:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001320:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800132c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001330:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001332:	2312      	movs	r3, #18
 8001334:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800133e:	2304      	movs	r3, #4
 8001340:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134c:	f002 fe44 	bl	8003fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001354:	2312      	movs	r3, #18
 8001356:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001360:	2304      	movs	r3, #4
 8001362:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001368:	4619      	mov	r1, r3
 800136a:	480b      	ldr	r0, [pc, #44]	; (8001398 <HAL_I2C_MspInit+0xe8>)
 800136c:	f002 fe34 	bl	8003fd8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 8001372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 8001376:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800137a:	6593      	str	r3, [r2, #88]	; 0x58
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 800137e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001388:	bf00      	nop
 800138a:	3770      	adds	r7, #112	; 0x70
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40005400 	.word	0x40005400
 8001394:	40021000 	.word	0x40021000
 8001398:	48000400 	.word	0x48000400
 800139c:	00000000 	.word	0x00000000

080013a0 <HAL_TIM_IC_CaptureCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	mesure_us = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1); // ou TIM2->CCR1
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_TIM_IC_CaptureCallback+0x60>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ae:	4a15      	ldr	r2, [pc, #84]	; (8001404 <HAL_TIM_IC_CaptureCallback+0x64>)
 80013b0:	6013      	str	r3, [r2, #0]

	vitesse_mesuree_m_s = DISTANCE_1_TOUR_AXE_TRANSMISSION_MM *1000 / 16.0 / (mesure_us - mesure_precedente_us);
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <HAL_TIM_IC_CaptureCallback+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_TIM_IC_CaptureCallback+0x68>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f8c9 	bl	8000554 <__aeabi_ui2d>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	a10c      	add	r1, pc, #48	; (adr r1, 80013f8 <HAL_TIM_IC_CaptureCallback+0x58>)
 80013c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013cc:	f7ff fa66 	bl	800089c <__aeabi_ddiv>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4610      	mov	r0, r2
 80013d6:	4619      	mov	r1, r3
 80013d8:	f7ff fc2e 	bl	8000c38 <__aeabi_d2f>
 80013dc:	4603      	mov	r3, r0
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <HAL_TIM_IC_CaptureCallback+0x6c>)
 80013e0:	6013      	str	r3, [r2, #0]

	mesure_precedente_us = mesure_us;
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_TIM_IC_CaptureCallback+0x64>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a08      	ldr	r2, [pc, #32]	; (8001408 <HAL_TIM_IC_CaptureCallback+0x68>)
 80013e8:	6013      	str	r3, [r2, #0]

    // On indique qu'une nouvelle vitesse est disponible
    vitesse_a_mettre_a_jour = 1;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_TIM_IC_CaptureCallback+0x70>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]

}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	00000000 	.word	0x00000000
 80013fc:	40b34980 	.word	0x40b34980
 8001400:	200007b4 	.word	0x200007b4
 8001404:	200002e4 	.word	0x200002e4
 8001408:	200002e8 	.word	0x200002e8
 800140c:	200002e0 	.word	0x200002e0
 8001410:	200002ec 	.word	0x200002ec

08001414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001418:	f001 f903 	bl	8002622 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800141c:	f000 f862 	bl	80014e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001420:	f7ff feda 	bl	80011d8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001424:	f000 fda0 	bl	8001f68 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001428:	f000 fe5c 	bl	80020e4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800142c:	f001 f824 	bl	8002478 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8001430:	f000 ff16 	bl	8002260 <MX_TIM6_Init>
  MX_TIM3_Init();
 8001434:	f000 fec6 	bl	80021c4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001438:	f7ff fef2 	bl	8001220 <MX_I2C1_Init>
  MX_SPI3_Init();
 800143c:	f000 f93a 	bl	80016b4 <MX_SPI3_Init>
  MX_ADC1_Init();
 8001440:	f7ff fdfe 	bl	8001040 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001444:	2100      	movs	r1, #0
 8001446:	481f      	ldr	r0, [pc, #124]	; (80014c4 <main+0xb0>)
 8001448:	f005 f866 	bl	8006518 <HAL_TIM_IC_Start_IT>
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2101      	movs	r1, #1
 8001450:	201c      	movs	r0, #28
 8001452:	f002 fccc 	bl	8003dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001456:	201c      	movs	r0, #28
 8001458:	f002 fce3 	bl	8003e22 <HAL_NVIC_EnableIRQ>

  HAL_ADC_Start(&hadc1);
 800145c:	481a      	ldr	r0, [pc, #104]	; (80014c8 <main+0xb4>)
 800145e:	f001 fd2d 	bl	8002ebc <HAL_ADC_Start>

  SSD1306_Init();
 8001462:	f000 f9a5 	bl	80017b0 <SSD1306_Init>
  SSD1306_Clear();
 8001466:	f000 fb96 	bl	8001b96 <SSD1306_Clear>
  SSD1306_GotoXY(10, 5);
 800146a:	2105      	movs	r1, #5
 800146c:	200a      	movs	r0, #10
 800146e:	f000 fad7 	bl	8001a20 <SSD1306_GotoXY>
  SSD1306_Puts("Init OK", &Font_11x18, SSD1306_COLOR_WHITE);
 8001472:	2201      	movs	r2, #1
 8001474:	4915      	ldr	r1, [pc, #84]	; (80014cc <main+0xb8>)
 8001476:	4816      	ldr	r0, [pc, #88]	; (80014d0 <main+0xbc>)
 8001478:	f000 fb68 	bl	8001b4c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 800147c:	f000 fa2a 	bl	80018d4 <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 8001480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001484:	f001 f93e 	bl	8002704 <HAL_Delay>
  SSD1306_Clear();
 8001488:	f000 fb85 	bl	8001b96 <SSD1306_Clear>
  SSD1306_GotoXY(5, 5);
 800148c:	2105      	movs	r1, #5
 800148e:	2005      	movs	r0, #5
 8001490:	f000 fac6 	bl	8001a20 <SSD1306_GotoXY>
  sprintf(buffer1, "Vit : %.2f m/s", (double)vitesse_mesuree_m_s);
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <main+0xc0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff f87d 	bl	8000598 <__aeabi_f2d>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	490d      	ldr	r1, [pc, #52]	; (80014d8 <main+0xc4>)
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <main+0xc8>)
 80014a6:	f008 fda3 	bl	8009ff0 <siprintf>
  SSD1306_Puts(buffer1, &Font_7x10, SSD1306_COLOR_WHITE);
 80014aa:	2201      	movs	r2, #1
 80014ac:	490c      	ldr	r1, [pc, #48]	; (80014e0 <main+0xcc>)
 80014ae:	480b      	ldr	r0, [pc, #44]	; (80014dc <main+0xc8>)
 80014b0:	f000 fb4c 	bl	8001b4c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80014b4:	f000 fa0e 	bl	80018d4 <SSD1306_UpdateScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      MettreAJourEcran(); // Mise à jour de l'affichage (batterie + vitesse)
 80014b8:	f000 f860 	bl	800157c <MettreAJourEcran>


      envoyerMessage();
 80014bc:	f000 f8d0 	bl	8001660 <envoyerMessage>
      MettreAJourEcran(); // Mise à jour de l'affichage (batterie + vitesse)
 80014c0:	e7fa      	b.n	80014b8 <main+0xa4>
 80014c2:	bf00      	nop
 80014c4:	200007b4 	.word	0x200007b4
 80014c8:	20000200 	.word	0x20000200
 80014cc:	20000008 	.word	0x20000008
 80014d0:	0800d948 	.word	0x0800d948
 80014d4:	200002e0 	.word	0x200002e0
 80014d8:	0800d950 	.word	0x0800d950
 80014dc:	200002b8 	.word	0x200002b8
 80014e0:	20000000 	.word	0x20000000

080014e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b094      	sub	sp, #80	; 0x50
 80014e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ea:	f107 0318 	add.w	r3, r7, #24
 80014ee:	2238      	movs	r2, #56	; 0x38
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f008 fddf 	bl	800a0b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001506:	2000      	movs	r0, #0
 8001508:	f003 fb02 	bl	8004b10 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800150c:	2302      	movs	r3, #2
 800150e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001510:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001516:	2340      	movs	r3, #64	; 0x40
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151a:	2302      	movs	r3, #2
 800151c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800151e:	2302      	movs	r3, #2
 8001520:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001522:	2304      	movs	r3, #4
 8001524:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001526:	2355      	movs	r3, #85	; 0x55
 8001528:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800152a:	2302      	movs	r3, #2
 800152c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800152e:	2302      	movs	r3, #2
 8001530:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001532:	2302      	movs	r3, #2
 8001534:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001536:	f107 0318 	add.w	r3, r7, #24
 800153a:	4618      	mov	r0, r3
 800153c:	f003 fb8c 	bl	8004c58 <HAL_RCC_OscConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001546:	f000 f8af 	bl	80016a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154a:	230f      	movs	r3, #15
 800154c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154e:	2303      	movs	r3, #3
 8001550:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2104      	movs	r1, #4
 8001562:	4618      	mov	r0, r3
 8001564:	f003 fe90 	bl	8005288 <HAL_RCC_ClockConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800156e:	f000 f89b 	bl	80016a8 <Error_Handler>
  }
}
 8001572:	bf00      	nop
 8001574:	3750      	adds	r7, #80	; 0x50
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <MettreAJourEcran>:

/* USER CODE BEGIN 4 */

void MettreAJourEcran(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
    /* Affichage de la vitesse */
    if (vitesse_a_mettre_a_jour)
 8001582:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <MettreAJourEcran+0xbc>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	d016      	beq.n	80015ba <MettreAJourEcran+0x3e>
    {
        SSD1306_GotoXY(5, 5);
 800158c:	2105      	movs	r1, #5
 800158e:	2005      	movs	r0, #5
 8001590:	f000 fa46 	bl	8001a20 <SSD1306_GotoXY>
        sprintf(buffer1, "Vit : %.2f m/s", (double)vitesse_mesuree_m_s);
 8001594:	4b29      	ldr	r3, [pc, #164]	; (800163c <MettreAJourEcran+0xc0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fffd 	bl	8000598 <__aeabi_f2d>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4927      	ldr	r1, [pc, #156]	; (8001640 <MettreAJourEcran+0xc4>)
 80015a4:	4827      	ldr	r0, [pc, #156]	; (8001644 <MettreAJourEcran+0xc8>)
 80015a6:	f008 fd23 	bl	8009ff0 <siprintf>
        SSD1306_Puts(buffer1, &Font_7x10, SSD1306_COLOR_WHITE);
 80015aa:	2201      	movs	r2, #1
 80015ac:	4926      	ldr	r1, [pc, #152]	; (8001648 <MettreAJourEcran+0xcc>)
 80015ae:	4825      	ldr	r0, [pc, #148]	; (8001644 <MettreAJourEcran+0xc8>)
 80015b0:	f000 facc 	bl	8001b4c <SSD1306_Puts>
        vitesse_a_mettre_a_jour = 0;
 80015b4:	4b20      	ldr	r3, [pc, #128]	; (8001638 <MettreAJourEcran+0xbc>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
    }

    /* Lecture et affichage de la batterie */
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 80015ba:	f04f 31ff 	mov.w	r1, #4294967295
 80015be:	4823      	ldr	r0, [pc, #140]	; (800164c <MettreAJourEcran+0xd0>)
 80015c0:	f001 fd38 	bl	8003034 <HAL_ADC_PollForConversion>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d12c      	bne.n	8001624 <MettreAJourEcran+0xa8>
    {
    	uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 80015ca:	4820      	ldr	r0, [pc, #128]	; (800164c <MettreAJourEcran+0xd0>)
 80015cc:	f001 fe0a 	bl	80031e4 <HAL_ADC_GetValue>
 80015d0:	60f8      	str	r0, [r7, #12]
    	float adcVoltage = adcValue * 3.3f / 4095.0f;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	ee07 3a90 	vmov	s15, r3
 80015d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015dc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001650 <MettreAJourEcran+0xd4>
 80015e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015e4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001654 <MettreAJourEcran+0xd8>
 80015e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ec:	edc7 7a02 	vstr	s15, [r7, #8]
    	float batteryVoltage = adcVoltage * 10;
 80015f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80015f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015fc:	edc7 7a01 	vstr	s15, [r7, #4]

        SSD1306_GotoXY(10, 40);
 8001600:	2128      	movs	r1, #40	; 0x28
 8001602:	200a      	movs	r0, #10
 8001604:	f000 fa0c 	bl	8001a20 <SSD1306_GotoXY>
        sprintf(buffer2, "Battery: %.2fV", (double)batteryVoltage);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7fe ffc5 	bl	8000598 <__aeabi_f2d>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4911      	ldr	r1, [pc, #68]	; (8001658 <MettreAJourEcran+0xdc>)
 8001614:	4811      	ldr	r0, [pc, #68]	; (800165c <MettreAJourEcran+0xe0>)
 8001616:	f008 fceb 	bl	8009ff0 <siprintf>
        SSD1306_Puts(buffer2, &Font_7x10, 1);
 800161a:	2201      	movs	r2, #1
 800161c:	490a      	ldr	r1, [pc, #40]	; (8001648 <MettreAJourEcran+0xcc>)
 800161e:	480f      	ldr	r0, [pc, #60]	; (800165c <MettreAJourEcran+0xe0>)
 8001620:	f000 fa94 	bl	8001b4c <SSD1306_Puts>
    }

    /* Mise à jour de l'affichage */
    SSD1306_UpdateScreen();
 8001624:	f000 f956 	bl	80018d4 <SSD1306_UpdateScreen>
    HAL_Delay(50);
 8001628:	2032      	movs	r0, #50	; 0x32
 800162a:	f001 f86b 	bl	8002704 <HAL_Delay>
}
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200002ec 	.word	0x200002ec
 800163c:	200002e0 	.word	0x200002e0
 8001640:	0800d950 	.word	0x0800d950
 8001644:	200002b8 	.word	0x200002b8
 8001648:	20000000 	.word	0x20000000
 800164c:	20000200 	.word	0x20000200
 8001650:	40533333 	.word	0x40533333
 8001654:	457ff000 	.word	0x457ff000
 8001658:	0800d960 	.word	0x0800d960
 800165c:	200002cc 	.word	0x200002cc

08001660 <envoyerMessage>:
void envoyerMessage()
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af02      	add	r7, sp, #8
    memset(txBuffer, 0, sizeof(txBuffer)); // Nettoyage du buffer avant l'envoi
 8001666:	2204      	movs	r2, #4
 8001668:	2100      	movs	r1, #0
 800166a:	480b      	ldr	r0, [pc, #44]	; (8001698 <envoyerMessage+0x38>)
 800166c:	f008 fd23 	bl	800a0b6 <memset>
    memset(rxBuffer, 0, sizeof(rxBuffer)); // Nettoyage du buffer de réception
 8001670:	2204      	movs	r2, #4
 8001672:	2100      	movs	r1, #0
 8001674:	4809      	ldr	r0, [pc, #36]	; (800169c <envoyerMessage+0x3c>)
 8001676:	f008 fd1e 	bl	800a0b6 <memset>
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <envoyerMessage+0x40>)
 800167c:	681b      	ldr	r3, [r3, #0]

    // Convertir la vitesse en 4 octets (float -> bytes)
    memcpy(txBuffer, &vitesse_mesuree_m_s, sizeof(float));
 800167e:	4a06      	ldr	r2, [pc, #24]	; (8001698 <envoyerMessage+0x38>)
 8001680:	6013      	str	r3, [r2, #0]

    // Envoyer la vitesse au maître
    HAL_SPI_TransmitReceive(&hspi3, txBuffer, rxBuffer, sizeof(txBuffer), 100);
 8001682:	2364      	movs	r3, #100	; 0x64
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2304      	movs	r3, #4
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <envoyerMessage+0x3c>)
 800168a:	4903      	ldr	r1, [pc, #12]	; (8001698 <envoyerMessage+0x38>)
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <envoyerMessage+0x44>)
 800168e:	f004 fab2 	bl	8005bf6 <HAL_SPI_TransmitReceive>
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200002f4 	.word	0x200002f4
 800169c:	200002f0 	.word	0x200002f0
 80016a0:	200002e0 	.word	0x200002e0
 80016a4:	200002f8 	.word	0x200002f8

080016a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ac:	b672      	cpsid	i
}
 80016ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <Error_Handler+0x8>
	...

080016b4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80016b8:	4b19      	ldr	r3, [pc, #100]	; (8001720 <MX_SPI3_Init+0x6c>)
 80016ba:	4a1a      	ldr	r2, [pc, #104]	; (8001724 <MX_SPI3_Init+0x70>)
 80016bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <MX_SPI3_Init+0x6c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <MX_SPI3_Init+0x6c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <MX_SPI3_Init+0x6c>)
 80016cc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016d0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016d2:	4b13      	ldr	r3, [pc, #76]	; (8001720 <MX_SPI3_Init+0x6c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_SPI3_Init+0x6c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <MX_SPI3_Init+0x6c>)
 80016e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e4:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <MX_SPI3_Init+0x6c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_SPI3_Init+0x6c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <MX_SPI3_Init+0x6c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_SPI3_Init+0x6c>)
 80016fa:	2207      	movs	r2, #7
 80016fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <MX_SPI3_Init+0x6c>)
 8001700:	2200      	movs	r2, #0
 8001702:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_SPI3_Init+0x6c>)
 8001706:	2200      	movs	r2, #0
 8001708:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_SPI3_Init+0x6c>)
 800170c:	f004 f9c8 	bl	8005aa0 <HAL_SPI_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8001716:	f7ff ffc7 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200002f8 	.word	0x200002f8
 8001724:	40003c00 	.word	0x40003c00

08001728 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a17      	ldr	r2, [pc, #92]	; (80017a4 <HAL_SPI_MspInit+0x7c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d127      	bne.n	800179a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <HAL_SPI_MspInit+0x80>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174e:	4a16      	ldr	r2, [pc, #88]	; (80017a8 <HAL_SPI_MspInit+0x80>)
 8001750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001754:	6593      	str	r3, [r2, #88]	; 0x58
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_SPI_MspInit+0x80>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_SPI_MspInit+0x80>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	4a10      	ldr	r2, [pc, #64]	; (80017a8 <HAL_SPI_MspInit+0x80>)
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HAL_SPI_MspInit+0x80>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800177a:	2338      	movs	r3, #56	; 0x38
 800177c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800178a:	2306      	movs	r3, #6
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4619      	mov	r1, r3
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <HAL_SPI_MspInit+0x84>)
 8001796:	f002 fc1f 	bl	8003fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800179a:	bf00      	nop
 800179c:	3728      	adds	r7, #40	; 0x28
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40003c00 	.word	0x40003c00
 80017a8:	40021000 	.word	0x40021000
 80017ac:	48000400 	.word	0x48000400

080017b0 <SSD1306_Init>:
    }
}



uint8_t SSD1306_Init(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80017b6:	f000 f9f7 	bl	8001ba8 <ssd1306_I2C_Init>
		/* Return false */
		//return 0;
	//}
	
	/* A little delay */
	uint32_t p = 50000;
 80017ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80017be:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017c0:	e002      	b.n	80017c8 <SSD1306_Init+0x18>
		p--;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f9      	bne.n	80017c2 <SSD1306_Init+0x12>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //Display off
 80017ce:	22ae      	movs	r2, #174	; 0xae
 80017d0:	2100      	movs	r1, #0
 80017d2:	2078      	movs	r0, #120	; 0x78
 80017d4:	f000 fa64 	bl	8001ca0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xD5); //Set display Clock
 80017d8:	22d5      	movs	r2, #213	; 0xd5
 80017da:	2100      	movs	r1, #0
 80017dc:	2078      	movs	r0, #120	; 0x78
 80017de:	f000 fa5f 	bl	8001ca0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x80); //105 Hz
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	2100      	movs	r1, #0
 80017e6:	2078      	movs	r0, #120	; 0x78
 80017e8:	f000 fa5a 	bl	8001ca0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xA8); //Select multiplex ratio
 80017ec:	22a8      	movs	r2, #168	; 0xa8
 80017ee:	2100      	movs	r1, #0
 80017f0:	2078      	movs	r0, #120	; 0x78
 80017f2:	f000 fa55 	bl	8001ca0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //1/64 Duty
 80017f6:	223f      	movs	r2, #63	; 0x3f
 80017f8:	2100      	movs	r1, #0
 80017fa:	2078      	movs	r0, #120	; 0x78
 80017fc:	f000 fa50 	bl	8001ca0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xD3); //Set display offset
 8001800:	22d3      	movs	r2, #211	; 0xd3
 8001802:	2100      	movs	r1, #0
 8001804:	2078      	movs	r0, #120	; 0x78
 8001806:	f000 fa4b 	bl	8001ca0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //REst set common start
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	2078      	movs	r0, #120	; 0x78
 8001810:	f000 fa46 	bl	8001ca0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0x40); //Set display start line
 8001814:	2240      	movs	r2, #64	; 0x40
 8001816:	2100      	movs	r1, #0
 8001818:	2078      	movs	r0, #120	; 0x78
 800181a:	f000 fa41 	bl	8001ca0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0x8D); //Set charge pump
 800181e:	228d      	movs	r2, #141	; 0x8d
 8001820:	2100      	movs	r1, #0
 8001822:	2078      	movs	r0, #120	; 0x78
 8001824:	f000 fa3c 	bl	8001ca0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); // Enable charge pump
 8001828:	2214      	movs	r2, #20
 800182a:	2100      	movs	r1, #0
 800182c:	2078      	movs	r0, #120	; 0x78
 800182e:	f000 fa37 	bl	8001ca0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xA1); //Set segment re-map 0 to 127
 8001832:	22a1      	movs	r2, #161	; 0xa1
 8001834:	2100      	movs	r1, #0
 8001836:	2078      	movs	r0, #120	; 0x78
 8001838:	f000 fa32 	bl	8001ca0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xC8); //Set COM output scan directory
 800183c:	22c8      	movs	r2, #200	; 0xc8
 800183e:	2100      	movs	r1, #0
 8001840:	2078      	movs	r0, #120	; 0x78
 8001842:	f000 fa2d 	bl	8001ca0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //Set COM hardware config.
 8001846:	22da      	movs	r2, #218	; 0xda
 8001848:	2100      	movs	r1, #0
 800184a:	2078      	movs	r0, #120	; 0x78
 800184c:	f000 fa28 	bl	8001ca0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12); //Alternate COM pin
 8001850:	2212      	movs	r2, #18
 8001852:	2100      	movs	r1, #0
 8001854:	2078      	movs	r0, #120	; 0x78
 8001856:	f000 fa23 	bl	8001ca0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0x81); //Set contrast control
 800185a:	2281      	movs	r2, #129	; 0x81
 800185c:	2100      	movs	r1, #0
 800185e:	2078      	movs	r0, #120	; 0x78
 8001860:	f000 fa1e 	bl	8001ca0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x7F); //127
 8001864:	227f      	movs	r2, #127	; 0x7f
 8001866:	2100      	movs	r1, #0
 8001868:	2078      	movs	r0, #120	; 0x78
 800186a:	f000 fa19 	bl	8001ca0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xD9); //Set deselect Vcomh level
 800186e:	22d9      	movs	r2, #217	; 0xd9
 8001870:	2100      	movs	r1, #0
 8001872:	2078      	movs	r0, #120	; 0x78
 8001874:	f000 fa14 	bl	8001ca0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x30); //
 8001878:	2230      	movs	r2, #48	; 0x30
 800187a:	2100      	movs	r1, #0
 800187c:	2078      	movs	r0, #120	; 0x78
 800187e:	f000 fa0f 	bl	8001ca0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xA4); //Display on
 8001882:	22a4      	movs	r2, #164	; 0xa4
 8001884:	2100      	movs	r1, #0
 8001886:	2078      	movs	r0, #120	; 0x78
 8001888:	f000 fa0a 	bl	8001ca0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xA6); //Set normal display
 800188c:	22a6      	movs	r2, #166	; 0xa6
 800188e:	2100      	movs	r1, #0
 8001890:	2078      	movs	r0, #120	; 0x78
 8001892:	f000 fa05 	bl	8001ca0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //Display on
 8001896:	22af      	movs	r2, #175	; 0xaf
 8001898:	2100      	movs	r1, #0
 800189a:	2078      	movs	r0, #120	; 0x78
 800189c:	f000 fa00 	bl	8001ca0 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80018a0:	222e      	movs	r2, #46	; 0x2e
 80018a2:	2100      	movs	r1, #0
 80018a4:	2078      	movs	r0, #120	; 0x78
 80018a6:	f000 f9fb 	bl	8001ca0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80018aa:	2000      	movs	r0, #0
 80018ac:	f000 f840 	bl	8001930 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80018b0:	f000 f810 	bl	80018d4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <SSD1306_Init+0x120>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <SSD1306_Init+0x120>)
 80018bc:	2200      	movs	r2, #0
 80018be:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <SSD1306_Init+0x120>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80018c6:	2301      	movs	r3, #1
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	2000075c 	.word	0x2000075c

080018d4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80018da:	2300      	movs	r3, #0
 80018dc:	71fb      	strb	r3, [r7, #7]
 80018de:	e01d      	b.n	800191c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	3b50      	subs	r3, #80	; 0x50
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	2100      	movs	r1, #0
 80018ea:	2078      	movs	r0, #120	; 0x78
 80018ec:	f000 f9d8 	bl	8001ca0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2100      	movs	r1, #0
 80018f4:	2078      	movs	r0, #120	; 0x78
 80018f6:	f000 f9d3 	bl	8001ca0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80018fa:	2210      	movs	r2, #16
 80018fc:	2100      	movs	r1, #0
 80018fe:	2078      	movs	r0, #120	; 0x78
 8001900:	f000 f9ce 	bl	8001ca0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	01db      	lsls	r3, r3, #7
 8001908:	4a08      	ldr	r2, [pc, #32]	; (800192c <SSD1306_UpdateScreen+0x58>)
 800190a:	441a      	add	r2, r3
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	2140      	movs	r1, #64	; 0x40
 8001910:	2078      	movs	r0, #120	; 0x78
 8001912:	f000 f95f 	bl	8001bd4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	3301      	adds	r3, #1
 800191a:	71fb      	strb	r3, [r7, #7]
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	2b07      	cmp	r3, #7
 8001920:	d9de      	bls.n	80018e0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	2000035c 	.word	0x2000035c

08001930 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <SSD1306_Fill+0x14>
 8001940:	2300      	movs	r3, #0
 8001942:	e000      	b.n	8001946 <SSD1306_Fill+0x16>
 8001944:	23ff      	movs	r3, #255	; 0xff
 8001946:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800194a:	4619      	mov	r1, r3
 800194c:	4803      	ldr	r0, [pc, #12]	; (800195c <SSD1306_Fill+0x2c>)
 800194e:	f008 fbb2 	bl	800a0b6 <memset>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	2000035c 	.word	0x2000035c

08001960 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
 800196a:	460b      	mov	r3, r1
 800196c:	80bb      	strh	r3, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	70fb      	strb	r3, [r7, #3]
	if (
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	2b7f      	cmp	r3, #127	; 0x7f
 8001976:	d848      	bhi.n	8001a0a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001978:	88bb      	ldrh	r3, [r7, #4]
 800197a:	2b3f      	cmp	r3, #63	; 0x3f
 800197c:	d845      	bhi.n	8001a0a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800197e:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <SSD1306_DrawPixel+0xb8>)
 8001980:	791b      	ldrb	r3, [r3, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	2b00      	cmp	r3, #0
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d11a      	bne.n	80019d0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800199a:	88fa      	ldrh	r2, [r7, #6]
 800199c:	88bb      	ldrh	r3, [r7, #4]
 800199e:	08db      	lsrs	r3, r3, #3
 80019a0:	b298      	uxth	r0, r3
 80019a2:	4603      	mov	r3, r0
 80019a4:	01db      	lsls	r3, r3, #7
 80019a6:	4413      	add	r3, r2
 80019a8:	4a1c      	ldr	r2, [pc, #112]	; (8001a1c <SSD1306_DrawPixel+0xbc>)
 80019aa:	5cd3      	ldrb	r3, [r2, r3]
 80019ac:	b25a      	sxtb	r2, r3
 80019ae:	88bb      	ldrh	r3, [r7, #4]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	2101      	movs	r1, #1
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	b25b      	sxtb	r3, r3
 80019bc:	4313      	orrs	r3, r2
 80019be:	b259      	sxtb	r1, r3
 80019c0:	88fa      	ldrh	r2, [r7, #6]
 80019c2:	4603      	mov	r3, r0
 80019c4:	01db      	lsls	r3, r3, #7
 80019c6:	4413      	add	r3, r2
 80019c8:	b2c9      	uxtb	r1, r1
 80019ca:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <SSD1306_DrawPixel+0xbc>)
 80019cc:	54d1      	strb	r1, [r2, r3]
 80019ce:	e01d      	b.n	8001a0c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019d0:	88fa      	ldrh	r2, [r7, #6]
 80019d2:	88bb      	ldrh	r3, [r7, #4]
 80019d4:	08db      	lsrs	r3, r3, #3
 80019d6:	b298      	uxth	r0, r3
 80019d8:	4603      	mov	r3, r0
 80019da:	01db      	lsls	r3, r3, #7
 80019dc:	4413      	add	r3, r2
 80019de:	4a0f      	ldr	r2, [pc, #60]	; (8001a1c <SSD1306_DrawPixel+0xbc>)
 80019e0:	5cd3      	ldrb	r3, [r2, r3]
 80019e2:	b25a      	sxtb	r2, r3
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	2101      	movs	r1, #1
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	b25b      	sxtb	r3, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	b25b      	sxtb	r3, r3
 80019f6:	4013      	ands	r3, r2
 80019f8:	b259      	sxtb	r1, r3
 80019fa:	88fa      	ldrh	r2, [r7, #6]
 80019fc:	4603      	mov	r3, r0
 80019fe:	01db      	lsls	r3, r3, #7
 8001a00:	4413      	add	r3, r2
 8001a02:	b2c9      	uxtb	r1, r1
 8001a04:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <SSD1306_DrawPixel+0xbc>)
 8001a06:	54d1      	strb	r1, [r2, r3]
 8001a08:	e000      	b.n	8001a0c <SSD1306_DrawPixel+0xac>
		return;
 8001a0a:	bf00      	nop
	}
}
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	2000075c 	.word	0x2000075c
 8001a1c:	2000035c 	.word	0x2000035c

08001a20 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	460a      	mov	r2, r1
 8001a2a:	80fb      	strh	r3, [r7, #6]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001a30:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <SSD1306_GotoXY+0x28>)
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001a36:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <SSD1306_GotoXY+0x28>)
 8001a38:	88bb      	ldrh	r3, [r7, #4]
 8001a3a:	8053      	strh	r3, [r2, #2]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	2000075c 	.word	0x2000075c

08001a4c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	71fb      	strb	r3, [r7, #7]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a5c:	4b3a      	ldr	r3, [pc, #232]	; (8001b48 <SSD1306_Putc+0xfc>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
	if (
 8001a68:	2b7f      	cmp	r3, #127	; 0x7f
 8001a6a:	dc07      	bgt.n	8001a7c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001a6c:	4b36      	ldr	r3, [pc, #216]	; (8001b48 <SSD1306_Putc+0xfc>)
 8001a6e:	885b      	ldrh	r3, [r3, #2]
 8001a70:	461a      	mov	r2, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	785b      	ldrb	r3, [r3, #1]
 8001a76:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a78:	2b3f      	cmp	r3, #63	; 0x3f
 8001a7a:	dd01      	ble.n	8001a80 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e05e      	b.n	8001b3e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	e04b      	b.n	8001b1e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	3b20      	subs	r3, #32
 8001a8e:	6839      	ldr	r1, [r7, #0]
 8001a90:	7849      	ldrb	r1, [r1, #1]
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	4619      	mov	r1, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	440b      	add	r3, r1
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	e030      	b.n	8001b0c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d010      	beq.n	8001adc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001aba:	4b23      	ldr	r3, [pc, #140]	; (8001b48 <SSD1306_Putc+0xfc>)
 8001abc:	881a      	ldrh	r2, [r3, #0]
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b298      	uxth	r0, r3
 8001ac6:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <SSD1306_Putc+0xfc>)
 8001ac8:	885a      	ldrh	r2, [r3, #2]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	79ba      	ldrb	r2, [r7, #6]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7ff ff43 	bl	8001960 <SSD1306_DrawPixel>
 8001ada:	e014      	b.n	8001b06 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001adc:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <SSD1306_Putc+0xfc>)
 8001ade:	881a      	ldrh	r2, [r3, #0]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b298      	uxth	r0, r3
 8001ae8:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <SSD1306_Putc+0xfc>)
 8001aea:	885a      	ldrh	r2, [r3, #2]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	b299      	uxth	r1, r3
 8001af4:	79bb      	ldrb	r3, [r7, #6]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	bf0c      	ite	eq
 8001afa:	2301      	moveq	r3, #1
 8001afc:	2300      	movne	r3, #0
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	f7ff ff2d 	bl	8001960 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d3c8      	bcc.n	8001aaa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	785b      	ldrb	r3, [r3, #1]
 8001b22:	461a      	mov	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d3ad      	bcc.n	8001a86 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <SSD1306_Putc+0xfc>)
 8001b2c:	881a      	ldrh	r2, [r3, #0]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <SSD1306_Putc+0xfc>)
 8001b3a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2000075c 	.word	0x2000075c

08001b4c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	4613      	mov	r3, r2
 8001b58:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001b5a:	e012      	b.n	8001b82 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	79fa      	ldrb	r2, [r7, #7]
 8001b62:	68b9      	ldr	r1, [r7, #8]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff71 	bl	8001a4c <SSD1306_Putc>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d002      	beq.n	8001b7c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	e008      	b.n	8001b8e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1e8      	bne.n	8001b5c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	781b      	ldrb	r3, [r3, #0]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f7ff fec8 	bl	8001930 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001ba0:	f7ff fe98 	bl	80018d4 <SSD1306_UpdateScreen>
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0

	uint32_t p = 250000;
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <ssd1306_I2C_Init+0x28>)
 8001bb0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bb2:	e002      	b.n	8001bba <ssd1306_I2C_Init+0x12>
		p--;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f9      	bne.n	8001bb4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	0003d090 	.word	0x0003d090

08001bd4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b0c7      	sub	sp, #284	; 0x11c
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	4604      	mov	r4, r0
 8001bdc:	4608      	mov	r0, r1
 8001bde:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001be2:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001be6:	600a      	str	r2, [r1, #0]
 8001be8:	4619      	mov	r1, r3
 8001bea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bee:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	701a      	strb	r2, [r3, #0]
 8001bf6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bfa:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001bfe:	4602      	mov	r2, r0
 8001c00:	701a      	strb	r2, [r3, #0]
 8001c02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c0a:	460a      	mov	r2, r1
 8001c0c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001c0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c16:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c1a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001c1e:	7812      	ldrb	r2, [r2, #0]
 8001c20:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001c28:	e015      	b.n	8001c56 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001c2a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c2e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c32:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	441a      	add	r2, r3
 8001c3a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c3e:	3301      	adds	r3, #1
 8001c40:	7811      	ldrb	r1, [r2, #0]
 8001c42:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c46:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001c4a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001c4c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c50:	3301      	adds	r3, #1
 8001c52:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001c56:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c60:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001c64:	8812      	ldrh	r2, [r2, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d8df      	bhi.n	8001c2a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001c6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c6e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	b299      	uxth	r1, r3
 8001c76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	3301      	adds	r3, #1
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	f107 020c 	add.w	r2, r7, #12
 8001c88:	200a      	movs	r0, #10
 8001c8a:	9000      	str	r0, [sp, #0]
 8001c8c:	4803      	ldr	r0, [pc, #12]	; (8001c9c <ssd1306_I2C_WriteMulti+0xc8>)
 8001c8e:	f002 fbb5 	bl	80043fc <HAL_I2C_Master_Transmit>
}
 8001c92:	bf00      	nop
 8001c94:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd90      	pop	{r4, r7, pc}
 8001c9c:	2000026c 	.word	0x2000026c

08001ca0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
 8001caa:	460b      	mov	r3, r1
 8001cac:	71bb      	strb	r3, [r7, #6]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001cb2:	79bb      	ldrb	r3, [r7, #6]
 8001cb4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001cb6:	797b      	ldrb	r3, [r7, #5]
 8001cb8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	b299      	uxth	r1, r3
 8001cbe:	f107 020c 	add.w	r2, r7, #12
 8001cc2:	230a      	movs	r3, #10
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	4804      	ldr	r0, [pc, #16]	; (8001cdc <ssd1306_I2C_Write+0x3c>)
 8001cca:	f002 fb97 	bl	80043fc <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001cce:	200a      	movs	r0, #10
 8001cd0:	f000 fd18 	bl	8002704 <HAL_Delay>
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	2000026c 	.word	0x2000026c

08001ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <HAL_MspInit+0x44>)
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cea:	4a0e      	ldr	r2, [pc, #56]	; (8001d24 <HAL_MspInit+0x44>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6613      	str	r3, [r2, #96]	; 0x60
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <HAL_MspInit+0x44>)
 8001cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_MspInit+0x44>)
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <HAL_MspInit+0x44>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d08:	6593      	str	r3, [r2, #88]	; 0x58
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_MspInit+0x44>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000

08001d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <NMI_Handler+0x4>

08001d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d32:	e7fe      	b.n	8001d32 <HardFault_Handler+0x4>

08001d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <MemManage_Handler+0x4>

08001d3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d3e:	e7fe      	b.n	8001d3e <BusFault_Handler+0x4>

08001d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <UsageFault_Handler+0x4>

08001d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d74:	f000 fca8 	bl	80026c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <TIM2_IRQHandler+0x10>)
 8001d82:	f004 fd0b 	bl	800679c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200007b4 	.word	0x200007b4

08001d90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <USART1_IRQHandler+0x10>)
 8001d96:	f006 f871 	bl	8007e7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000898 	.word	0x20000898

08001da4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <TIM6_DAC_IRQHandler+0x10>)
 8001daa:	f004 fcf7 	bl	800679c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	2000084c 	.word	0x2000084c

08001db8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return 1;
 8001dbc:	2301      	movs	r3, #1
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <_kill>:

int _kill(int pid, int sig)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dd2:	f008 f9c3 	bl	800a15c <__errno>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2216      	movs	r2, #22
 8001dda:	601a      	str	r2, [r3, #0]
  return -1;
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <_exit>:

void _exit (int status)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001df0:	f04f 31ff 	mov.w	r1, #4294967295
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ffe7 	bl	8001dc8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dfa:	e7fe      	b.n	8001dfa <_exit+0x12>

08001dfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	e00a      	b.n	8001e24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e0e:	f3af 8000 	nop.w
 8001e12:	4601      	mov	r1, r0
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	60ba      	str	r2, [r7, #8]
 8001e1a:	b2ca      	uxtb	r2, r1
 8001e1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dbf0      	blt.n	8001e0e <_read+0x12>
  }

  return len;
 8001e2c:	687b      	ldr	r3, [r7, #4]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	e009      	b.n	8001e5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	60ba      	str	r2, [r7, #8]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	dbf1      	blt.n	8001e48 <_write+0x12>
  }
  return len;
 8001e64:	687b      	ldr	r3, [r7, #4]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <_close>:

int _close(int file)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e96:	605a      	str	r2, [r3, #4]
  return 0;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <_isatty>:

int _isatty(int file)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eae:	2301      	movs	r3, #1
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee0:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <_sbrk+0x5c>)
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <_sbrk+0x60>)
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <_sbrk+0x64>)
 8001ef6:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <_sbrk+0x68>)
 8001ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <_sbrk+0x64>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d207      	bcs.n	8001f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f08:	f008 f928 	bl	800a15c <__errno>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	220c      	movs	r2, #12
 8001f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
 8001f16:	e009      	b.n	8001f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <_sbrk+0x64>)
 8001f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20008000 	.word	0x20008000
 8001f38:	00000400 	.word	0x00000400
 8001f3c:	20000764 	.word	0x20000764
 8001f40:	20000a78 	.word	0x20000a78

08001f44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <SystemInit+0x20>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <SystemInit+0x20>)
 8001f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b09c      	sub	sp, #112	; 0x70
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f6e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
 8001f98:	615a      	str	r2, [r3, #20]
 8001f9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f9c:	1d3b      	adds	r3, r7, #4
 8001f9e:	2234      	movs	r2, #52	; 0x34
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f008 f887 	bl	800a0b6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fa8:	4b4c      	ldr	r3, [pc, #304]	; (80020dc <MX_TIM1_Init+0x174>)
 8001faa:	4a4d      	ldr	r2, [pc, #308]	; (80020e0 <MX_TIM1_Init+0x178>)
 8001fac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8001fae:	4b4b      	ldr	r3, [pc, #300]	; (80020dc <MX_TIM1_Init+0x174>)
 8001fb0:	22a9      	movs	r2, #169	; 0xa9
 8001fb2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb4:	4b49      	ldr	r3, [pc, #292]	; (80020dc <MX_TIM1_Init+0x174>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001fba:	4b48      	ldr	r3, [pc, #288]	; (80020dc <MX_TIM1_Init+0x174>)
 8001fbc:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001fc0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc2:	4b46      	ldr	r3, [pc, #280]	; (80020dc <MX_TIM1_Init+0x174>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fc8:	4b44      	ldr	r3, [pc, #272]	; (80020dc <MX_TIM1_Init+0x174>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fce:	4b43      	ldr	r3, [pc, #268]	; (80020dc <MX_TIM1_Init+0x174>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fd4:	4841      	ldr	r0, [pc, #260]	; (80020dc <MX_TIM1_Init+0x174>)
 8001fd6:	f004 f985 	bl	80062e4 <HAL_TIM_Base_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001fe0:	f7ff fb62 	bl	80016a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001fee:	4619      	mov	r1, r3
 8001ff0:	483a      	ldr	r0, [pc, #232]	; (80020dc <MX_TIM1_Init+0x174>)
 8001ff2:	f004 ff03 	bl	8006dfc <HAL_TIM_ConfigClockSource>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001ffc:	f7ff fb54 	bl	80016a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002000:	4836      	ldr	r0, [pc, #216]	; (80020dc <MX_TIM1_Init+0x174>)
 8002002:	f004 f9c6 	bl	8006392 <HAL_TIM_PWM_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800200c:	f7ff fb4c 	bl	80016a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002010:	2300      	movs	r3, #0
 8002012:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002014:	2300      	movs	r3, #0
 8002016:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800201c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002020:	4619      	mov	r1, r3
 8002022:	482e      	ldr	r0, [pc, #184]	; (80020dc <MX_TIM1_Init+0x174>)
 8002024:	f005 fd72 	bl	8007b0c <HAL_TIMEx_MasterConfigSynchronization>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800202e:	f7ff fb3b 	bl	80016a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002032:	2360      	movs	r3, #96	; 0x60
 8002034:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 1500;
 8002036:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800203a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800203c:	2300      	movs	r3, #0
 800203e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002040:	2300      	movs	r3, #0
 8002042:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002048:	2300      	movs	r3, #0
 800204a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800204c:	2300      	movs	r3, #0
 800204e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002050:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002054:	2200      	movs	r2, #0
 8002056:	4619      	mov	r1, r3
 8002058:	4820      	ldr	r0, [pc, #128]	; (80020dc <MX_TIM1_Init+0x174>)
 800205a:	f004 fdbb 	bl	8006bd4 <HAL_TIM_PWM_ConfigChannel>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002064:	f7ff fb20 	bl	80016a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002068:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800206c:	220c      	movs	r2, #12
 800206e:	4619      	mov	r1, r3
 8002070:	481a      	ldr	r0, [pc, #104]	; (80020dc <MX_TIM1_Init+0x174>)
 8002072:	f004 fdaf 	bl	8006bd4 <HAL_TIM_PWM_ConfigChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800207c:	f7ff fb14 	bl	80016a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002094:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002098:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80020b0:	2300      	movs	r3, #0
 80020b2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020b8:	1d3b      	adds	r3, r7, #4
 80020ba:	4619      	mov	r1, r3
 80020bc:	4807      	ldr	r0, [pc, #28]	; (80020dc <MX_TIM1_Init+0x174>)
 80020be:	f005 fda7 	bl	8007c10 <HAL_TIMEx_ConfigBreakDeadTime>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 80020c8:	f7ff faee 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020cc:	4803      	ldr	r0, [pc, #12]	; (80020dc <MX_TIM1_Init+0x174>)
 80020ce:	f000 f989 	bl	80023e4 <HAL_TIM_MspPostInit>

}
 80020d2:	bf00      	nop
 80020d4:	3770      	adds	r7, #112	; 0x70
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000768 	.word	0x20000768
 80020e0:	40012c00 	.word	0x40012c00

080020e4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08c      	sub	sp, #48	; 0x30
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ea:	f107 0320 	add.w	r3, r7, #32
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002110:	4b2b      	ldr	r3, [pc, #172]	; (80021c0 <MX_TIM2_Init+0xdc>)
 8002112:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002116:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8002118:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <MX_TIM2_Init+0xdc>)
 800211a:	22a9      	movs	r2, #169	; 0xa9
 800211c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211e:	4b28      	ldr	r3, [pc, #160]	; (80021c0 <MX_TIM2_Init+0xdc>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8002124:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <MX_TIM2_Init+0xdc>)
 8002126:	f04f 32ff 	mov.w	r2, #4294967295
 800212a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212c:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <MX_TIM2_Init+0xdc>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002132:	4b23      	ldr	r3, [pc, #140]	; (80021c0 <MX_TIM2_Init+0xdc>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002138:	4821      	ldr	r0, [pc, #132]	; (80021c0 <MX_TIM2_Init+0xdc>)
 800213a:	f004 f8d3 	bl	80062e4 <HAL_TIM_Base_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8002144:	f7ff fab0 	bl	80016a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800214c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800214e:	f107 0320 	add.w	r3, r7, #32
 8002152:	4619      	mov	r1, r3
 8002154:	481a      	ldr	r0, [pc, #104]	; (80021c0 <MX_TIM2_Init+0xdc>)
 8002156:	f004 fe51 	bl	8006dfc <HAL_TIM_ConfigClockSource>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002160:	f7ff faa2 	bl	80016a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002164:	4816      	ldr	r0, [pc, #88]	; (80021c0 <MX_TIM2_Init+0xdc>)
 8002166:	f004 f975 	bl	8006454 <HAL_TIM_IC_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002170:	f7ff fa9a 	bl	80016a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4619      	mov	r1, r3
 8002182:	480f      	ldr	r0, [pc, #60]	; (80021c0 <MX_TIM2_Init+0xdc>)
 8002184:	f005 fcc2 	bl	8007b0c <HAL_TIMEx_MasterConfigSynchronization>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800218e:	f7ff fa8b 	bl	80016a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002192:	2302      	movs	r3, #2
 8002194:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002196:	2301      	movs	r3, #1
 8002198:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	2200      	movs	r2, #0
 80021a6:	4619      	mov	r1, r3
 80021a8:	4805      	ldr	r0, [pc, #20]	; (80021c0 <MX_TIM2_Init+0xdc>)
 80021aa:	f004 fc76 	bl	8006a9a <HAL_TIM_IC_ConfigChannel>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80021b4:	f7ff fa78 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021b8:	bf00      	nop
 80021ba:	3730      	adds	r7, #48	; 0x30
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	200007b4 	.word	0x200007b4

080021c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ca:	f107 0310 	add.w	r3, r7, #16
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d8:	1d3b      	adds	r3, r7, #4
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021e2:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <MX_TIM3_Init+0x94>)
 80021e4:	4a1d      	ldr	r2, [pc, #116]	; (800225c <MX_TIM3_Init+0x98>)
 80021e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16;
 80021e8:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <MX_TIM3_Init+0x94>)
 80021ea:	2210      	movs	r2, #16
 80021ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ee:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <MX_TIM3_Init+0x94>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400;
 80021f4:	4b18      	ldr	r3, [pc, #96]	; (8002258 <MX_TIM3_Init+0x94>)
 80021f6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80021fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021fc:	4b16      	ldr	r3, [pc, #88]	; (8002258 <MX_TIM3_Init+0x94>)
 80021fe:	2200      	movs	r2, #0
 8002200:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <MX_TIM3_Init+0x94>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002208:	4813      	ldr	r0, [pc, #76]	; (8002258 <MX_TIM3_Init+0x94>)
 800220a:	f004 f86b 	bl	80062e4 <HAL_TIM_Base_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002214:	f7ff fa48 	bl	80016a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800221c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800221e:	f107 0310 	add.w	r3, r7, #16
 8002222:	4619      	mov	r1, r3
 8002224:	480c      	ldr	r0, [pc, #48]	; (8002258 <MX_TIM3_Init+0x94>)
 8002226:	f004 fde9 	bl	8006dfc <HAL_TIM_ConfigClockSource>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002230:	f7ff fa3a 	bl	80016a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002234:	2300      	movs	r3, #0
 8002236:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	4619      	mov	r1, r3
 8002240:	4805      	ldr	r0, [pc, #20]	; (8002258 <MX_TIM3_Init+0x94>)
 8002242:	f005 fc63 	bl	8007b0c <HAL_TIMEx_MasterConfigSynchronization>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800224c:	f7ff fa2c 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002250:	bf00      	nop
 8002252:	3720      	adds	r7, #32
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000800 	.word	0x20000800
 800225c:	40000400 	.word	0x40000400

08002260 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <MX_TIM6_Init+0x64>)
 8002272:	4a15      	ldr	r2, [pc, #84]	; (80022c8 <MX_TIM6_Init+0x68>)
 8002274:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <MX_TIM6_Init+0x64>)
 8002278:	22a9      	movs	r2, #169	; 0xa9
 800227a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <MX_TIM6_Init+0x64>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <MX_TIM6_Init+0x64>)
 8002284:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002288:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <MX_TIM6_Init+0x64>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002290:	480c      	ldr	r0, [pc, #48]	; (80022c4 <MX_TIM6_Init+0x64>)
 8002292:	f004 f827 	bl	80062e4 <HAL_TIM_Base_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800229c:	f7ff fa04 	bl	80016a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a0:	2300      	movs	r3, #0
 80022a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	4619      	mov	r1, r3
 80022ac:	4805      	ldr	r0, [pc, #20]	; (80022c4 <MX_TIM6_Init+0x64>)
 80022ae:	f005 fc2d 	bl	8007b0c <HAL_TIMEx_MasterConfigSynchronization>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80022b8:	f7ff f9f6 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80022bc:	bf00      	nop
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	2000084c 	.word	0x2000084c
 80022c8:	40001000 	.word	0x40001000

080022cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08c      	sub	sp, #48	; 0x30
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 031c 	add.w	r3, r7, #28
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a3a      	ldr	r2, [pc, #232]	; (80023d4 <HAL_TIM_Base_MspInit+0x108>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d10c      	bne.n	8002308 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ee:	4b3a      	ldr	r3, [pc, #232]	; (80023d8 <HAL_TIM_Base_MspInit+0x10c>)
 80022f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f2:	4a39      	ldr	r2, [pc, #228]	; (80023d8 <HAL_TIM_Base_MspInit+0x10c>)
 80022f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022f8:	6613      	str	r3, [r2, #96]	; 0x60
 80022fa:	4b37      	ldr	r3, [pc, #220]	; (80023d8 <HAL_TIM_Base_MspInit+0x10c>)
 80022fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002306:	e061      	b.n	80023cc <HAL_TIM_Base_MspInit+0x100>
  else if(tim_baseHandle->Instance==TIM2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002310:	d131      	bne.n	8002376 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002312:	4b31      	ldr	r3, [pc, #196]	; (80023d8 <HAL_TIM_Base_MspInit+0x10c>)
 8002314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002316:	4a30      	ldr	r2, [pc, #192]	; (80023d8 <HAL_TIM_Base_MspInit+0x10c>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6593      	str	r3, [r2, #88]	; 0x58
 800231e:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <HAL_TIM_Base_MspInit+0x10c>)
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <HAL_TIM_Base_MspInit+0x10c>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232e:	4a2a      	ldr	r2, [pc, #168]	; (80023d8 <HAL_TIM_Base_MspInit+0x10c>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002336:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <HAL_TIM_Base_MspInit+0x10c>)
 8002338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = FOURCHE_Pin;
 8002342:	2301      	movs	r3, #1
 8002344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234e:	2303      	movs	r3, #3
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002352:	2301      	movs	r3, #1
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(FOURCHE_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 031c 	add.w	r3, r7, #28
 800235a:	4619      	mov	r1, r3
 800235c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002360:	f001 fe3a 	bl	8003fd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002364:	2200      	movs	r2, #0
 8002366:	2101      	movs	r1, #1
 8002368:	201c      	movs	r0, #28
 800236a:	f001 fd40 	bl	8003dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800236e:	201c      	movs	r0, #28
 8002370:	f001 fd57 	bl	8003e22 <HAL_NVIC_EnableIRQ>
}
 8002374:	e02a      	b.n	80023cc <HAL_TIM_Base_MspInit+0x100>
  else if(tim_baseHandle->Instance==TIM3)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a18      	ldr	r2, [pc, #96]	; (80023dc <HAL_TIM_Base_MspInit+0x110>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d10c      	bne.n	800239a <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002380:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <HAL_TIM_Base_MspInit+0x10c>)
 8002382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002384:	4a14      	ldr	r2, [pc, #80]	; (80023d8 <HAL_TIM_Base_MspInit+0x10c>)
 8002386:	f043 0302 	orr.w	r3, r3, #2
 800238a:	6593      	str	r3, [r2, #88]	; 0x58
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_TIM_Base_MspInit+0x10c>)
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
}
 8002398:	e018      	b.n	80023cc <HAL_TIM_Base_MspInit+0x100>
  else if(tim_baseHandle->Instance==TIM6)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a10      	ldr	r2, [pc, #64]	; (80023e0 <HAL_TIM_Base_MspInit+0x114>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d113      	bne.n	80023cc <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_TIM_Base_MspInit+0x10c>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	4a0b      	ldr	r2, [pc, #44]	; (80023d8 <HAL_TIM_Base_MspInit+0x10c>)
 80023aa:	f043 0310 	orr.w	r3, r3, #16
 80023ae:	6593      	str	r3, [r2, #88]	; 0x58
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_TIM_Base_MspInit+0x10c>)
 80023b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 80023bc:	2200      	movs	r2, #0
 80023be:	2102      	movs	r1, #2
 80023c0:	2036      	movs	r0, #54	; 0x36
 80023c2:	f001 fd14 	bl	8003dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023c6:	2036      	movs	r0, #54	; 0x36
 80023c8:	f001 fd2b 	bl	8003e22 <HAL_NVIC_EnableIRQ>
}
 80023cc:	bf00      	nop
 80023ce:	3730      	adds	r7, #48	; 0x30
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40012c00 	.word	0x40012c00
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40000400 	.word	0x40000400
 80023e0:	40001000 	.word	0x40001000

080023e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ec:	f107 030c 	add.w	r3, r7, #12
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a1b      	ldr	r2, [pc, #108]	; (8002470 <HAL_TIM_MspPostInit+0x8c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d12f      	bne.n	8002466 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002406:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <HAL_TIM_MspPostInit+0x90>)
 8002408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240a:	4a1a      	ldr	r2, [pc, #104]	; (8002474 <HAL_TIM_MspPostInit+0x90>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <HAL_TIM_MspPostInit+0x90>)
 8002414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_PROPULSION_Pin;
 800241e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002422:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	2300      	movs	r3, #0
 800242e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002430:	2306      	movs	r3, #6
 8002432:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_PROPULSION_GPIO_Port, &GPIO_InitStruct);
 8002434:	f107 030c 	add.w	r3, r7, #12
 8002438:	4619      	mov	r1, r3
 800243a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800243e:	f001 fdcb 	bl	8003fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_DIRECTION_Pin;
 8002442:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002446:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002448:	2302      	movs	r3, #2
 800244a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002450:	2300      	movs	r3, #0
 8002452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8002454:	230b      	movs	r3, #11
 8002456:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_DIRECTION_GPIO_Port, &GPIO_InitStruct);
 8002458:	f107 030c 	add.w	r3, r7, #12
 800245c:	4619      	mov	r1, r3
 800245e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002462:	f001 fdb9 	bl	8003fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002466:	bf00      	nop
 8002468:	3720      	adds	r7, #32
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40012c00 	.word	0x40012c00
 8002474:	40021000 	.word	0x40021000

08002478 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800247c:	4b22      	ldr	r3, [pc, #136]	; (8002508 <MX_USART1_UART_Init+0x90>)
 800247e:	4a23      	ldr	r2, [pc, #140]	; (800250c <MX_USART1_UART_Init+0x94>)
 8002480:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 256000;
 8002482:	4b21      	ldr	r3, [pc, #132]	; (8002508 <MX_USART1_UART_Init+0x90>)
 8002484:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8002488:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800248a:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <MX_USART1_UART_Init+0x90>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <MX_USART1_UART_Init+0x90>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <MX_USART1_UART_Init+0x90>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800249c:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <MX_USART1_UART_Init+0x90>)
 800249e:	220c      	movs	r2, #12
 80024a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a2:	4b19      	ldr	r3, [pc, #100]	; (8002508 <MX_USART1_UART_Init+0x90>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a8:	4b17      	ldr	r3, [pc, #92]	; (8002508 <MX_USART1_UART_Init+0x90>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ae:	4b16      	ldr	r3, [pc, #88]	; (8002508 <MX_USART1_UART_Init+0x90>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <MX_USART1_UART_Init+0x90>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ba:	4b13      	ldr	r3, [pc, #76]	; (8002508 <MX_USART1_UART_Init+0x90>)
 80024bc:	2200      	movs	r2, #0
 80024be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024c0:	4811      	ldr	r0, [pc, #68]	; (8002508 <MX_USART1_UART_Init+0x90>)
 80024c2:	f005 fc8b 	bl	8007ddc <HAL_UART_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80024cc:	f7ff f8ec 	bl	80016a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024d0:	2100      	movs	r1, #0
 80024d2:	480d      	ldr	r0, [pc, #52]	; (8002508 <MX_USART1_UART_Init+0x90>)
 80024d4:	f006 fd89 	bl	8008fea <HAL_UARTEx_SetTxFifoThreshold>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80024de:	f7ff f8e3 	bl	80016a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024e2:	2100      	movs	r1, #0
 80024e4:	4808      	ldr	r0, [pc, #32]	; (8002508 <MX_USART1_UART_Init+0x90>)
 80024e6:	f006 fdbe 	bl	8009066 <HAL_UARTEx_SetRxFifoThreshold>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80024f0:	f7ff f8da 	bl	80016a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80024f4:	4804      	ldr	r0, [pc, #16]	; (8002508 <MX_USART1_UART_Init+0x90>)
 80024f6:	f006 fd3f 	bl	8008f78 <HAL_UARTEx_DisableFifoMode>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002500:	f7ff f8d2 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000898 	.word	0x20000898
 800250c:	40013800 	.word	0x40013800

08002510 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b09a      	sub	sp, #104	; 0x68
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002528:	f107 0310 	add.w	r3, r7, #16
 800252c:	2244      	movs	r2, #68	; 0x44
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f007 fdc0 	bl	800a0b6 <memset>
  if(uartHandle->Instance==USART1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a23      	ldr	r2, [pc, #140]	; (80025c8 <HAL_UART_MspInit+0xb8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d13f      	bne.n	80025c0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002540:	2301      	movs	r3, #1
 8002542:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002548:	f107 0310 	add.w	r3, r7, #16
 800254c:	4618      	mov	r0, r3
 800254e:	f003 f8b7 	bl	80056c0 <HAL_RCCEx_PeriphCLKConfig>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002558:	f7ff f8a6 	bl	80016a8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <HAL_UART_MspInit+0xbc>)
 800255e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002560:	4a1a      	ldr	r2, [pc, #104]	; (80025cc <HAL_UART_MspInit+0xbc>)
 8002562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002566:	6613      	str	r3, [r2, #96]	; 0x60
 8002568:	4b18      	ldr	r3, [pc, #96]	; (80025cc <HAL_UART_MspInit+0xbc>)
 800256a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800256c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002574:	4b15      	ldr	r3, [pc, #84]	; (80025cc <HAL_UART_MspInit+0xbc>)
 8002576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002578:	4a14      	ldr	r2, [pc, #80]	; (80025cc <HAL_UART_MspInit+0xbc>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002580:	4b12      	ldr	r3, [pc, #72]	; (80025cc <HAL_UART_MspInit+0xbc>)
 8002582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800258c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002590:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800259e:	2307      	movs	r3, #7
 80025a0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025a6:	4619      	mov	r1, r3
 80025a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ac:	f001 fd14 	bl	8003fd8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025b0:	2200      	movs	r2, #0
 80025b2:	2100      	movs	r1, #0
 80025b4:	2025      	movs	r0, #37	; 0x25
 80025b6:	f001 fc1a 	bl	8003dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025ba:	2025      	movs	r0, #37	; 0x25
 80025bc:	f001 fc31 	bl	8003e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80025c0:	bf00      	nop
 80025c2:	3768      	adds	r7, #104	; 0x68
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40013800 	.word	0x40013800
 80025cc:	40021000 	.word	0x40021000

080025d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025d0:	480d      	ldr	r0, [pc, #52]	; (8002608 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025d4:	480d      	ldr	r0, [pc, #52]	; (800260c <LoopForever+0x6>)
  ldr r1, =_edata
 80025d6:	490e      	ldr	r1, [pc, #56]	; (8002610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025d8:	4a0e      	ldr	r2, [pc, #56]	; (8002614 <LoopForever+0xe>)
  movs r3, #0
 80025da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80025dc:	e002      	b.n	80025e4 <LoopCopyDataInit>

080025de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025e2:	3304      	adds	r3, #4

080025e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e8:	d3f9      	bcc.n	80025de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ea:	4a0b      	ldr	r2, [pc, #44]	; (8002618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025ec:	4c0b      	ldr	r4, [pc, #44]	; (800261c <LoopForever+0x16>)
  movs r3, #0
 80025ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f0:	e001      	b.n	80025f6 <LoopFillZerobss>

080025f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f4:	3204      	adds	r2, #4

080025f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f8:	d3fb      	bcc.n	80025f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025fa:	f7ff fca3 	bl	8001f44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025fe:	f007 fdb3 	bl	800a168 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002602:	f7fe ff07 	bl	8001414 <main>

08002606 <LoopForever>:

LoopForever:
    b LoopForever
 8002606:	e7fe      	b.n	8002606 <LoopForever>
  ldr   r0, =_estack
 8002608:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800260c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002610:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002614:	0800f2b0 	.word	0x0800f2b0
  ldr r2, =_sbss
 8002618:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800261c:	20000a78 	.word	0x20000a78

08002620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002620:	e7fe      	b.n	8002620 <ADC1_2_IRQHandler>

08002622 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800262c:	2003      	movs	r0, #3
 800262e:	f001 fbd3 	bl	8003dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002632:	2000      	movs	r0, #0
 8002634:	f000 f80e 	bl	8002654 <HAL_InitTick>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	71fb      	strb	r3, [r7, #7]
 8002642:	e001      	b.n	8002648 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002644:	f7ff fb4c 	bl	8001ce0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002648:	79fb      	ldrb	r3, [r7, #7]

}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002660:	4b16      	ldr	r3, [pc, #88]	; (80026bc <HAL_InitTick+0x68>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d022      	beq.n	80026ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002668:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <HAL_InitTick+0x6c>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4b13      	ldr	r3, [pc, #76]	; (80026bc <HAL_InitTick+0x68>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002674:	fbb1 f3f3 	udiv	r3, r1, r3
 8002678:	fbb2 f3f3 	udiv	r3, r2, r3
 800267c:	4618      	mov	r0, r3
 800267e:	f001 fbde 	bl	8003e3e <HAL_SYSTICK_Config>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10f      	bne.n	80026a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b0f      	cmp	r3, #15
 800268c:	d809      	bhi.n	80026a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800268e:	2200      	movs	r2, #0
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	f04f 30ff 	mov.w	r0, #4294967295
 8002696:	f001 fbaa 	bl	8003dee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800269a:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <HAL_InitTick+0x70>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	e007      	b.n	80026b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	73fb      	strb	r3, [r7, #15]
 80026a6:	e004      	b.n	80026b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	e001      	b.n	80026b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000018 	.word	0x20000018
 80026c0:	20000010 	.word	0x20000010
 80026c4:	20000014 	.word	0x20000014

080026c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <HAL_IncTick+0x1c>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_IncTick+0x20>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4413      	add	r3, r2
 80026d6:	4a03      	ldr	r2, [pc, #12]	; (80026e4 <HAL_IncTick+0x1c>)
 80026d8:	6013      	str	r3, [r2, #0]
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	20000928 	.word	0x20000928
 80026e8:	20000018 	.word	0x20000018

080026ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return uwTick;
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <HAL_GetTick+0x14>)
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20000928 	.word	0x20000928

08002704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800270c:	f7ff ffee 	bl	80026ec <HAL_GetTick>
 8002710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271c:	d004      	beq.n	8002728 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_Delay+0x40>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4413      	add	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002728:	bf00      	nop
 800272a:	f7ff ffdf 	bl	80026ec <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	429a      	cmp	r2, r3
 8002738:	d8f7      	bhi.n	800272a <HAL_Delay+0x26>
  {
  }
}
 800273a:	bf00      	nop
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000018 	.word	0x20000018

08002748 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	431a      	orrs	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	609a      	str	r2, [r3, #8]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	609a      	str	r2, [r3, #8]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3360      	adds	r3, #96	; 0x60
 80027c2:	461a      	mov	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <LL_ADC_SetOffset+0x44>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	4313      	orrs	r3, r2
 80027e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80027e8:	bf00      	nop
 80027ea:	371c      	adds	r7, #28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	03fff000 	.word	0x03fff000

080027f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3360      	adds	r3, #96	; 0x60
 8002806:	461a      	mov	r2, r3
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002818:	4618      	mov	r0, r3
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	3360      	adds	r3, #96	; 0x60
 8002834:	461a      	mov	r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	431a      	orrs	r2, r3
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800284e:	bf00      	nop
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800285a:	b480      	push	{r7}
 800285c:	b087      	sub	sp, #28
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3360      	adds	r3, #96	; 0x60
 800286a:	461a      	mov	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	431a      	orrs	r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002884:	bf00      	nop
 8002886:	371c      	adds	r7, #28
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3360      	adds	r3, #96	; 0x60
 80028a0:	461a      	mov	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	431a      	orrs	r2, r3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80028ba:	bf00      	nop
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	615a      	str	r2, [r3, #20]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002912:	b480      	push	{r7}
 8002914:	b087      	sub	sp, #28
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	3330      	adds	r3, #48	; 0x30
 8002922:	461a      	mov	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	4413      	add	r3, r2
 8002930:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	211f      	movs	r1, #31
 800293e:	fa01 f303 	lsl.w	r3, r1, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	401a      	ands	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	0e9b      	lsrs	r3, r3, #26
 800294a:	f003 011f 	and.w	r1, r3, #31
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	fa01 f303 	lsl.w	r3, r1, r3
 8002958:	431a      	orrs	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800295e:	bf00      	nop
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800296a:	b480      	push	{r7}
 800296c:	b087      	sub	sp, #28
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3314      	adds	r3, #20
 800297a:	461a      	mov	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	0e5b      	lsrs	r3, r3, #25
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	4413      	add	r3, r2
 8002988:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	0d1b      	lsrs	r3, r3, #20
 8002992:	f003 031f 	and.w	r3, r3, #31
 8002996:	2107      	movs	r1, #7
 8002998:	fa01 f303 	lsl.w	r3, r1, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	401a      	ands	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	0d1b      	lsrs	r3, r3, #20
 80029a4:	f003 031f 	and.w	r3, r3, #31
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	fa01 f303 	lsl.w	r3, r1, r3
 80029ae:	431a      	orrs	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029b4:	bf00      	nop
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a0f      	ldr	r2, [pc, #60]	; (8002a0c <LL_ADC_SetChannelSingleDiff+0x4c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d10a      	bne.n	80029ea <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e0:	431a      	orrs	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80029e8:	e00a      	b.n	8002a00 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f6:	43db      	mvns	r3, r3
 80029f8:	401a      	ands	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	407f0000 	.word	0x407f0000

08002a10 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 031f 	and.w	r3, r3, #31
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002a58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6093      	str	r3, [r2, #8]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a80:	d101      	bne.n	8002a86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002aa4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002aa8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002acc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ad0:	d101      	bne.n	8002ad6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002af4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002af8:	f043 0201 	orr.w	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <LL_ADC_IsEnabled+0x18>
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <LL_ADC_IsEnabled+0x1a>
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b46:	f043 0204 	orr.w	r2, r3, #4
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d101      	bne.n	8002b72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d101      	bne.n	8002b98 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e177      	b.n	8002eb2 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d109      	bne.n	8002be4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7fe faad 	bl	8001130 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff ff3f 	bl	8002a6c <LL_ADC_IsDeepPowerDownEnabled>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d004      	beq.n	8002bfe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ff25 	bl	8002a48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff ff5a 	bl	8002abc <LL_ADC_IsInternalRegulatorEnabled>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d115      	bne.n	8002c3a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff ff3e 	bl	8002a94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c18:	4b9c      	ldr	r3, [pc, #624]	; (8002e8c <HAL_ADC_Init+0x2e4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	099b      	lsrs	r3, r3, #6
 8002c1e:	4a9c      	ldr	r2, [pc, #624]	; (8002e90 <HAL_ADC_Init+0x2e8>)
 8002c20:	fba2 2303 	umull	r2, r3, r2, r3
 8002c24:	099b      	lsrs	r3, r3, #6
 8002c26:	3301      	adds	r3, #1
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c2c:	e002      	b.n	8002c34 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f9      	bne.n	8002c2e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff ff3c 	bl	8002abc <LL_ADC_IsInternalRegulatorEnabled>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10d      	bne.n	8002c66 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4e:	f043 0210 	orr.w	r2, r3, #16
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c5a:	f043 0201 	orr.w	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff ff75 	bl	8002b5a <LL_ADC_REG_IsConversionOngoing>
 8002c70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f040 8110 	bne.w	8002ea0 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f040 810c 	bne.w	8002ea0 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c90:	f043 0202 	orr.w	r2, r3, #2
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ff35 	bl	8002b0c <LL_ADC_IsEnabled>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d111      	bne.n	8002ccc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ca8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002cac:	f7ff ff2e 	bl	8002b0c <LL_ADC_IsEnabled>
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	4878      	ldr	r0, [pc, #480]	; (8002e94 <HAL_ADC_Init+0x2ec>)
 8002cb4:	f7ff ff2a 	bl	8002b0c <LL_ADC_IsEnabled>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4323      	orrs	r3, r4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d105      	bne.n	8002ccc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4874      	ldr	r0, [pc, #464]	; (8002e98 <HAL_ADC_Init+0x2f0>)
 8002cc8:	f7ff fd3e 	bl	8002748 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7f5b      	ldrb	r3, [r3, #29]
 8002cd0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cd6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002cdc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002ce2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d106      	bne.n	8002d08 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	045b      	lsls	r3, r3, #17
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d009      	beq.n	8002d24 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	4b5c      	ldr	r3, [pc, #368]	; (8002e9c <HAL_ADC_Init+0x2f4>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	69b9      	ldr	r1, [r7, #24]
 8002d34:	430b      	orrs	r3, r1
 8002d36:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff ff01 	bl	8002b5a <LL_ADC_REG_IsConversionOngoing>
 8002d58:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff ff0e 	bl	8002b80 <LL_ADC_INJ_IsConversionOngoing>
 8002d64:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d16d      	bne.n	8002e48 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d16a      	bne.n	8002e48 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d76:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d7e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d8e:	f023 0302 	bic.w	r3, r3, #2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	69b9      	ldr	r1, [r7, #24]
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d017      	beq.n	8002dd4 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002db2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002dbc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002dc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6911      	ldr	r1, [r2, #16]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002dd2:	e013      	b.n	8002dfc <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002de2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002df4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002df8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d118      	bne.n	8002e38 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e10:	f023 0304 	bic.w	r3, r3, #4
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e1c:	4311      	orrs	r1, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e22:	4311      	orrs	r1, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 0201 	orr.w	r2, r2, #1
 8002e34:	611a      	str	r2, [r3, #16]
 8002e36:	e007      	b.n	8002e48 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d10c      	bne.n	8002e6a <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f023 010f 	bic.w	r1, r3, #15
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	1e5a      	subs	r2, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
 8002e68:	e007      	b.n	8002e7a <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 020f 	bic.w	r2, r2, #15
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7e:	f023 0303 	bic.w	r3, r3, #3
 8002e82:	f043 0201 	orr.w	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e8a:	e011      	b.n	8002eb0 <HAL_ADC_Init+0x308>
 8002e8c:	20000010 	.word	0x20000010
 8002e90:	053e2d63 	.word	0x053e2d63
 8002e94:	50000100 	.word	0x50000100
 8002e98:	50000300 	.word	0x50000300
 8002e9c:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea4:	f043 0210 	orr.w	r2, r3, #16
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002eb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3724      	adds	r7, #36	; 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd90      	pop	{r4, r7, pc}
 8002eba:	bf00      	nop

08002ebc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ec4:	4859      	ldr	r0, [pc, #356]	; (800302c <HAL_ADC_Start+0x170>)
 8002ec6:	f7ff fda3 	bl	8002a10 <LL_ADC_GetMultimode>
 8002eca:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fe42 	bl	8002b5a <LL_ADC_REG_IsConversionOngoing>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f040 809f 	bne.w	800301c <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_ADC_Start+0x30>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e09a      	b.n	8003022 <HAL_ADC_Start+0x166>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fd73 	bl	80039e0 <ADC_Enable>
 8002efa:	4603      	mov	r3, r0
 8002efc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f040 8086 	bne.w	8003012 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a44      	ldr	r2, [pc, #272]	; (8003030 <HAL_ADC_Start+0x174>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d002      	beq.n	8002f2a <HAL_ADC_Start+0x6e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	e001      	b.n	8002f2e <HAL_ADC_Start+0x72>
 8002f2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d002      	beq.n	8002f3c <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d105      	bne.n	8002f48 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f40:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f54:	d106      	bne.n	8002f64 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5a:	f023 0206 	bic.w	r2, r3, #6
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	661a      	str	r2, [r3, #96]	; 0x60
 8002f62:	e002      	b.n	8002f6a <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	221c      	movs	r2, #28
 8002f70:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a2c      	ldr	r2, [pc, #176]	; (8003030 <HAL_ADC_Start+0x174>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d002      	beq.n	8002f8a <HAL_ADC_Start+0xce>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	e001      	b.n	8002f8e <HAL_ADC_Start+0xd2>
 8002f8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d008      	beq.n	8002fa8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2b05      	cmp	r3, #5
 8002fa0:	d002      	beq.n	8002fa8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b09      	cmp	r3, #9
 8002fa6:	d114      	bne.n	8002fd2 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d007      	beq.n	8002fc6 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fbe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff fdb1 	bl	8002b32 <LL_ADC_REG_StartConversion>
 8002fd0:	e026      	b.n	8003020 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a13      	ldr	r2, [pc, #76]	; (8003030 <HAL_ADC_Start+0x174>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d002      	beq.n	8002fee <HAL_ADC_Start+0x132>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	e001      	b.n	8002ff2 <HAL_ADC_Start+0x136>
 8002fee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ff2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00f      	beq.n	8003020 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003004:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003008:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003010:	e006      	b.n	8003020 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800301a:	e001      	b.n	8003020 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800301c:	2302      	movs	r3, #2
 800301e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003020:	7dfb      	ldrb	r3, [r7, #23]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	50000300 	.word	0x50000300
 8003030:	50000100 	.word	0x50000100

08003034 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800303e:	4867      	ldr	r0, [pc, #412]	; (80031dc <HAL_ADC_PollForConversion+0x1a8>)
 8003040:	f7ff fce6 	bl	8002a10 <LL_ADC_GetMultimode>
 8003044:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b08      	cmp	r3, #8
 800304c:	d102      	bne.n	8003054 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800304e:	2308      	movs	r3, #8
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	e02a      	b.n	80030aa <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b05      	cmp	r3, #5
 800305e:	d002      	beq.n	8003066 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2b09      	cmp	r3, #9
 8003064:	d111      	bne.n	800308a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003078:	f043 0220 	orr.w	r2, r3, #32
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0a6      	b.n	80031d2 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003084:	2304      	movs	r3, #4
 8003086:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003088:	e00f      	b.n	80030aa <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800308a:	4854      	ldr	r0, [pc, #336]	; (80031dc <HAL_ADC_PollForConversion+0x1a8>)
 800308c:	f7ff fcce 	bl	8002a2c <LL_ADC_GetMultiDMATransfer>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309a:	f043 0220 	orr.w	r2, r3, #32
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e095      	b.n	80031d2 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80030a6:	2304      	movs	r3, #4
 80030a8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80030aa:	f7ff fb1f 	bl	80026ec <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80030b0:	e021      	b.n	80030f6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d01d      	beq.n	80030f6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80030ba:	f7ff fb17 	bl	80026ec <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d302      	bcc.n	80030d0 <HAL_ADC_PollForConversion+0x9c>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d112      	bne.n	80030f6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	4013      	ands	r3, r2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10b      	bne.n	80030f6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	f043 0204 	orr.w	r2, r3, #4
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e06d      	b.n	80031d2 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	4013      	ands	r3, r2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0d6      	beq.n	80030b2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003108:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fbe9 	bl	80028ec <LL_ADC_REG_IsTriggerSourceSWStart>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01c      	beq.n	800315a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	7f5b      	ldrb	r3, [r3, #29]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d118      	bne.n	800315a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b08      	cmp	r3, #8
 8003134:	d111      	bne.n	800315a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d105      	bne.n	800315a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003152:	f043 0201 	orr.w	r2, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a20      	ldr	r2, [pc, #128]	; (80031e0 <HAL_ADC_PollForConversion+0x1ac>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d002      	beq.n	800316a <HAL_ADC_PollForConversion+0x136>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	e001      	b.n	800316e <HAL_ADC_PollForConversion+0x13a>
 800316a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6812      	ldr	r2, [r2, #0]
 8003172:	4293      	cmp	r3, r2
 8003174:	d008      	beq.n	8003188 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2b05      	cmp	r3, #5
 8003180:	d002      	beq.n	8003188 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b09      	cmp	r3, #9
 8003186:	d104      	bne.n	8003192 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	e00d      	b.n	80031ae <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a12      	ldr	r2, [pc, #72]	; (80031e0 <HAL_ADC_PollForConversion+0x1ac>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d002      	beq.n	80031a2 <HAL_ADC_PollForConversion+0x16e>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	e001      	b.n	80031a6 <HAL_ADC_PollForConversion+0x172>
 80031a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031a6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d104      	bne.n	80031be <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2208      	movs	r2, #8
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	e008      	b.n	80031d0 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d103      	bne.n	80031d0 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	220c      	movs	r2, #12
 80031ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3720      	adds	r7, #32
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	50000300 	.word	0x50000300
 80031e0:	50000100 	.word	0x50000100

080031e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
	...

08003200 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b0b6      	sub	sp, #216	; 0xd8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x22>
 800321e:	2302      	movs	r3, #2
 8003220:	e3c8      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x7b4>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fc93 	bl	8002b5a <LL_ADC_REG_IsConversionOngoing>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	f040 83ad 	bne.w	8003996 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	6859      	ldr	r1, [r3, #4]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	f7ff fb62 	bl	8002912 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fc81 	bl	8002b5a <LL_ADC_REG_IsConversionOngoing>
 8003258:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff fc8d 	bl	8002b80 <LL_ADC_INJ_IsConversionOngoing>
 8003266:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800326a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800326e:	2b00      	cmp	r3, #0
 8003270:	f040 81d9 	bne.w	8003626 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003274:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003278:	2b00      	cmp	r3, #0
 800327a:	f040 81d4 	bne.w	8003626 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003286:	d10f      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2200      	movs	r2, #0
 8003292:	4619      	mov	r1, r3
 8003294:	f7ff fb69 	bl	800296a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fb10 	bl	80028c6 <LL_ADC_SetSamplingTimeCommonConfig>
 80032a6:	e00e      	b.n	80032c6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6819      	ldr	r1, [r3, #0]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	461a      	mov	r2, r3
 80032b6:	f7ff fb58 	bl	800296a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2100      	movs	r1, #0
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fb00 	bl	80028c6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	08db      	lsrs	r3, r3, #3
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d022      	beq.n	800332e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	6919      	ldr	r1, [r3, #16]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032f8:	f7ff fa5a 	bl	80027b0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	6919      	ldr	r1, [r3, #16]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	461a      	mov	r2, r3
 800330a:	f7ff faa6 	bl	800285a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6919      	ldr	r1, [r3, #16]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	7f1b      	ldrb	r3, [r3, #28]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d102      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x124>
 800331e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003322:	e000      	b.n	8003326 <HAL_ADC_ConfigChannel+0x126>
 8003324:	2300      	movs	r3, #0
 8003326:	461a      	mov	r2, r3
 8003328:	f7ff fab2 	bl	8002890 <LL_ADC_SetOffsetSaturation>
 800332c:	e17b      	b.n	8003626 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2100      	movs	r1, #0
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fa5f 	bl	80027f8 <LL_ADC_GetOffsetChannel>
 800333a:	4603      	mov	r3, r0
 800333c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10a      	bne.n	800335a <HAL_ADC_ConfigChannel+0x15a>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2100      	movs	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fa54 	bl	80027f8 <LL_ADC_GetOffsetChannel>
 8003350:	4603      	mov	r3, r0
 8003352:	0e9b      	lsrs	r3, r3, #26
 8003354:	f003 021f 	and.w	r2, r3, #31
 8003358:	e01e      	b.n	8003398 <HAL_ADC_ConfigChannel+0x198>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2100      	movs	r1, #0
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fa49 	bl	80027f8 <LL_ADC_GetOffsetChannel>
 8003366:	4603      	mov	r3, r0
 8003368:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003370:	fa93 f3a3 	rbit	r3, r3
 8003374:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003378:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800337c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003380:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003388:	2320      	movs	r3, #32
 800338a:	e004      	b.n	8003396 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800338c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003390:	fab3 f383 	clz	r3, r3
 8003394:	b2db      	uxtb	r3, r3
 8003396:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x1b0>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	0e9b      	lsrs	r3, r3, #26
 80033aa:	f003 031f 	and.w	r3, r3, #31
 80033ae:	e018      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x1e2>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80033c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80033cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80033d4:	2320      	movs	r3, #32
 80033d6:	e004      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80033d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033dc:	fab3 f383 	clz	r3, r3
 80033e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d106      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2200      	movs	r2, #0
 80033ec:	2100      	movs	r1, #0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff fa18 	bl	8002824 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2101      	movs	r1, #1
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff f9fc 	bl	80027f8 <LL_ADC_GetOffsetChannel>
 8003400:	4603      	mov	r3, r0
 8003402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x220>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2101      	movs	r1, #1
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff f9f1 	bl	80027f8 <LL_ADC_GetOffsetChannel>
 8003416:	4603      	mov	r3, r0
 8003418:	0e9b      	lsrs	r3, r3, #26
 800341a:	f003 021f 	and.w	r2, r3, #31
 800341e:	e01e      	b.n	800345e <HAL_ADC_ConfigChannel+0x25e>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2101      	movs	r1, #1
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff f9e6 	bl	80027f8 <LL_ADC_GetOffsetChannel>
 800342c:	4603      	mov	r3, r0
 800342e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003436:	fa93 f3a3 	rbit	r3, r3
 800343a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800343e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003442:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003446:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800344e:	2320      	movs	r3, #32
 8003450:	e004      	b.n	800345c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003452:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003466:	2b00      	cmp	r3, #0
 8003468:	d105      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x276>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	0e9b      	lsrs	r3, r3, #26
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	e018      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x2a8>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003482:	fa93 f3a3 	rbit	r3, r3
 8003486:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800348a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800348e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003492:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800349a:	2320      	movs	r3, #32
 800349c:	e004      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800349e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034a2:	fab3 f383 	clz	r3, r3
 80034a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d106      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2200      	movs	r2, #0
 80034b2:	2101      	movs	r1, #1
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff f9b5 	bl	8002824 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2102      	movs	r1, #2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff f999 	bl	80027f8 <LL_ADC_GetOffsetChannel>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10a      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x2e6>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2102      	movs	r1, #2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff f98e 	bl	80027f8 <LL_ADC_GetOffsetChannel>
 80034dc:	4603      	mov	r3, r0
 80034de:	0e9b      	lsrs	r3, r3, #26
 80034e0:	f003 021f 	and.w	r2, r3, #31
 80034e4:	e01e      	b.n	8003524 <HAL_ADC_ConfigChannel+0x324>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2102      	movs	r1, #2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff f983 	bl	80027f8 <LL_ADC_GetOffsetChannel>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034fc:	fa93 f3a3 	rbit	r3, r3
 8003500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003504:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003508:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800350c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003514:	2320      	movs	r3, #32
 8003516:	e004      	b.n	8003522 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003518:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800351c:	fab3 f383 	clz	r3, r3
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800352c:	2b00      	cmp	r3, #0
 800352e:	d105      	bne.n	800353c <HAL_ADC_ConfigChannel+0x33c>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	0e9b      	lsrs	r3, r3, #26
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	e016      	b.n	800356a <HAL_ADC_ConfigChannel+0x36a>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800354e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003554:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800355c:	2320      	movs	r3, #32
 800355e:	e004      	b.n	800356a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003560:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003564:	fab3 f383 	clz	r3, r3
 8003568:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800356a:	429a      	cmp	r2, r3
 800356c:	d106      	bne.n	800357c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2200      	movs	r2, #0
 8003574:	2102      	movs	r1, #2
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff f954 	bl	8002824 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2103      	movs	r1, #3
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff f938 	bl	80027f8 <LL_ADC_GetOffsetChannel>
 8003588:	4603      	mov	r3, r0
 800358a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10a      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x3a8>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2103      	movs	r1, #3
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff f92d 	bl	80027f8 <LL_ADC_GetOffsetChannel>
 800359e:	4603      	mov	r3, r0
 80035a0:	0e9b      	lsrs	r3, r3, #26
 80035a2:	f003 021f 	and.w	r2, r3, #31
 80035a6:	e017      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x3d8>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2103      	movs	r1, #3
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff f922 	bl	80027f8 <LL_ADC_GetOffsetChannel>
 80035b4:	4603      	mov	r3, r0
 80035b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80035c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035c2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80035c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80035ca:	2320      	movs	r3, #32
 80035cc:	e003      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80035ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035d0:	fab3 f383 	clz	r3, r3
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d105      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x3f0>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0e9b      	lsrs	r3, r3, #26
 80035ea:	f003 031f 	and.w	r3, r3, #31
 80035ee:	e011      	b.n	8003614 <HAL_ADC_ConfigChannel+0x414>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035f8:	fa93 f3a3 	rbit	r3, r3
 80035fc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80035fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003600:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003608:	2320      	movs	r3, #32
 800360a:	e003      	b.n	8003614 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800360c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360e:	fab3 f383 	clz	r3, r3
 8003612:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003614:	429a      	cmp	r2, r3
 8003616:	d106      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2200      	movs	r2, #0
 800361e:	2103      	movs	r1, #3
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff f8ff 	bl	8002824 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff fa6e 	bl	8002b0c <LL_ADC_IsEnabled>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	f040 8140 	bne.w	80038b8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	6819      	ldr	r1, [r3, #0]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	461a      	mov	r2, r3
 8003646:	f7ff f9bb 	bl	80029c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	4a8f      	ldr	r2, [pc, #572]	; (800388c <HAL_ADC_ConfigChannel+0x68c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	f040 8131 	bne.w	80038b8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10b      	bne.n	800367e <HAL_ADC_ConfigChannel+0x47e>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	0e9b      	lsrs	r3, r3, #26
 800366c:	3301      	adds	r3, #1
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	2b09      	cmp	r3, #9
 8003674:	bf94      	ite	ls
 8003676:	2301      	movls	r3, #1
 8003678:	2300      	movhi	r3, #0
 800367a:	b2db      	uxtb	r3, r3
 800367c:	e019      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x4b2>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003686:	fa93 f3a3 	rbit	r3, r3
 800368a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800368c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800368e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003690:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003696:	2320      	movs	r3, #32
 8003698:	e003      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800369a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800369c:	fab3 f383 	clz	r3, r3
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	3301      	adds	r3, #1
 80036a4:	f003 031f 	and.w	r3, r3, #31
 80036a8:	2b09      	cmp	r3, #9
 80036aa:	bf94      	ite	ls
 80036ac:	2301      	movls	r3, #1
 80036ae:	2300      	movhi	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d079      	beq.n	80037aa <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d107      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x4d2>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	0e9b      	lsrs	r3, r3, #26
 80036c8:	3301      	adds	r3, #1
 80036ca:	069b      	lsls	r3, r3, #26
 80036cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036d0:	e015      	b.n	80036fe <HAL_ADC_ConfigChannel+0x4fe>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80036e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80036ea:	2320      	movs	r3, #32
 80036ec:	e003      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80036ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f0:	fab3 f383 	clz	r3, r3
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	3301      	adds	r3, #1
 80036f8:	069b      	lsls	r3, r3, #26
 80036fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <HAL_ADC_ConfigChannel+0x51e>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	0e9b      	lsrs	r3, r3, #26
 8003710:	3301      	adds	r3, #1
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	2101      	movs	r1, #1
 8003718:	fa01 f303 	lsl.w	r3, r1, r3
 800371c:	e017      	b.n	800374e <HAL_ADC_ConfigChannel+0x54e>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003726:	fa93 f3a3 	rbit	r3, r3
 800372a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800372c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800372e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003736:	2320      	movs	r3, #32
 8003738:	e003      	b.n	8003742 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800373a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800373c:	fab3 f383 	clz	r3, r3
 8003740:	b2db      	uxtb	r3, r3
 8003742:	3301      	adds	r3, #1
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	2101      	movs	r1, #1
 800374a:	fa01 f303 	lsl.w	r3, r1, r3
 800374e:	ea42 0103 	orr.w	r1, r2, r3
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10a      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x574>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	0e9b      	lsrs	r3, r3, #26
 8003764:	3301      	adds	r3, #1
 8003766:	f003 021f 	and.w	r2, r3, #31
 800376a:	4613      	mov	r3, r2
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	4413      	add	r3, r2
 8003770:	051b      	lsls	r3, r3, #20
 8003772:	e018      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x5a6>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377c:	fa93 f3a3 	rbit	r3, r3
 8003780:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003784:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800378c:	2320      	movs	r3, #32
 800378e:	e003      	b.n	8003798 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003792:	fab3 f383 	clz	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	3301      	adds	r3, #1
 800379a:	f003 021f 	and.w	r2, r3, #31
 800379e:	4613      	mov	r3, r2
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	4413      	add	r3, r2
 80037a4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037a6:	430b      	orrs	r3, r1
 80037a8:	e081      	b.n	80038ae <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d107      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x5c6>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	0e9b      	lsrs	r3, r3, #26
 80037bc:	3301      	adds	r3, #1
 80037be:	069b      	lsls	r3, r3, #26
 80037c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037c4:	e015      	b.n	80037f2 <HAL_ADC_ConfigChannel+0x5f2>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ce:	fa93 f3a3 	rbit	r3, r3
 80037d2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80037d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80037de:	2320      	movs	r3, #32
 80037e0:	e003      	b.n	80037ea <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	fab3 f383 	clz	r3, r3
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	3301      	adds	r3, #1
 80037ec:	069b      	lsls	r3, r3, #26
 80037ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x612>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	0e9b      	lsrs	r3, r3, #26
 8003804:	3301      	adds	r3, #1
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	2101      	movs	r1, #1
 800380c:	fa01 f303 	lsl.w	r3, r1, r3
 8003810:	e017      	b.n	8003842 <HAL_ADC_ConfigChannel+0x642>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	fa93 f3a3 	rbit	r3, r3
 800381e:	61fb      	str	r3, [r7, #28]
  return result;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800382a:	2320      	movs	r3, #32
 800382c:	e003      	b.n	8003836 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	fab3 f383 	clz	r3, r3
 8003834:	b2db      	uxtb	r3, r3
 8003836:	3301      	adds	r3, #1
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	2101      	movs	r1, #1
 800383e:	fa01 f303 	lsl.w	r3, r1, r3
 8003842:	ea42 0103 	orr.w	r1, r2, r3
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10d      	bne.n	800386e <HAL_ADC_ConfigChannel+0x66e>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	0e9b      	lsrs	r3, r3, #26
 8003858:	3301      	adds	r3, #1
 800385a:	f003 021f 	and.w	r2, r3, #31
 800385e:	4613      	mov	r3, r2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4413      	add	r3, r2
 8003864:	3b1e      	subs	r3, #30
 8003866:	051b      	lsls	r3, r3, #20
 8003868:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800386c:	e01e      	b.n	80038ac <HAL_ADC_ConfigChannel+0x6ac>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	fa93 f3a3 	rbit	r3, r3
 800387a:	613b      	str	r3, [r7, #16]
  return result;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d104      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003886:	2320      	movs	r3, #32
 8003888:	e006      	b.n	8003898 <HAL_ADC_ConfigChannel+0x698>
 800388a:	bf00      	nop
 800388c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	fab3 f383 	clz	r3, r3
 8003896:	b2db      	uxtb	r3, r3
 8003898:	3301      	adds	r3, #1
 800389a:	f003 021f 	and.w	r2, r3, #31
 800389e:	4613      	mov	r3, r2
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	4413      	add	r3, r2
 80038a4:	3b1e      	subs	r3, #30
 80038a6:	051b      	lsls	r3, r3, #20
 80038a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038ac:	430b      	orrs	r3, r1
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	6892      	ldr	r2, [r2, #8]
 80038b2:	4619      	mov	r1, r3
 80038b4:	f7ff f859 	bl	800296a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	4b3f      	ldr	r3, [pc, #252]	; (80039bc <HAL_ADC_ConfigChannel+0x7bc>)
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d071      	beq.n	80039a8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038c4:	483e      	ldr	r0, [pc, #248]	; (80039c0 <HAL_ADC_ConfigChannel+0x7c0>)
 80038c6:	f7fe ff65 	bl	8002794 <LL_ADC_GetCommonPathInternalCh>
 80038ca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a3c      	ldr	r2, [pc, #240]	; (80039c4 <HAL_ADC_ConfigChannel+0x7c4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d004      	beq.n	80038e2 <HAL_ADC_ConfigChannel+0x6e2>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a3a      	ldr	r2, [pc, #232]	; (80039c8 <HAL_ADC_ConfigChannel+0x7c8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d127      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d121      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038f6:	d157      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003900:	4619      	mov	r1, r3
 8003902:	482f      	ldr	r0, [pc, #188]	; (80039c0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003904:	f7fe ff33 	bl	800276e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003908:	4b30      	ldr	r3, [pc, #192]	; (80039cc <HAL_ADC_ConfigChannel+0x7cc>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	099b      	lsrs	r3, r3, #6
 800390e:	4a30      	ldr	r2, [pc, #192]	; (80039d0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003910:	fba2 2303 	umull	r2, r3, r2, r3
 8003914:	099b      	lsrs	r3, r3, #6
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	4613      	mov	r3, r2
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003922:	e002      	b.n	800392a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	3b01      	subs	r3, #1
 8003928:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1f9      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003930:	e03a      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a27      	ldr	r2, [pc, #156]	; (80039d4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d113      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x764>
 800393c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10d      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a22      	ldr	r2, [pc, #136]	; (80039d8 <HAL_ADC_ConfigChannel+0x7d8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d02a      	beq.n	80039a8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003952:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800395a:	4619      	mov	r1, r3
 800395c:	4818      	ldr	r0, [pc, #96]	; (80039c0 <HAL_ADC_ConfigChannel+0x7c0>)
 800395e:	f7fe ff06 	bl	800276e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003962:	e021      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1c      	ldr	r2, [pc, #112]	; (80039dc <HAL_ADC_ConfigChannel+0x7dc>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d11c      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800396e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d116      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a16      	ldr	r2, [pc, #88]	; (80039d8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d011      	beq.n	80039a8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003984:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003988:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800398c:	4619      	mov	r1, r3
 800398e:	480c      	ldr	r0, [pc, #48]	; (80039c0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003990:	f7fe feed 	bl	800276e <LL_ADC_SetCommonPathInternalCh>
 8003994:	e008      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399a:	f043 0220 	orr.w	r2, r3, #32
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80039b0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	37d8      	adds	r7, #216	; 0xd8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	80080000 	.word	0x80080000
 80039c0:	50000300 	.word	0x50000300
 80039c4:	c3210000 	.word	0xc3210000
 80039c8:	90c00010 	.word	0x90c00010
 80039cc:	20000010 	.word	0x20000010
 80039d0:	053e2d63 	.word	0x053e2d63
 80039d4:	c7520000 	.word	0xc7520000
 80039d8:	50000100 	.word	0x50000100
 80039dc:	cb840000 	.word	0xcb840000

080039e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff f88d 	bl	8002b0c <LL_ADC_IsEnabled>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d14d      	bne.n	8003a94 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	4b28      	ldr	r3, [pc, #160]	; (8003aa0 <ADC_Enable+0xc0>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00d      	beq.n	8003a22 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0a:	f043 0210 	orr.w	r2, r3, #16
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a16:	f043 0201 	orr.w	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e039      	b.n	8003a96 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff f85c 	bl	8002ae4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a2c:	f7fe fe5e 	bl	80026ec <HAL_GetTick>
 8003a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a32:	e028      	b.n	8003a86 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff f867 	bl	8002b0c <LL_ADC_IsEnabled>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d104      	bne.n	8003a4e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff f84b 	bl	8002ae4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a4e:	f7fe fe4d 	bl	80026ec <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d914      	bls.n	8003a86 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d00d      	beq.n	8003a86 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	f043 0210 	orr.w	r2, r3, #16
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a7a:	f043 0201 	orr.w	r2, r3, #1
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e007      	b.n	8003a96 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d1cf      	bne.n	8003a34 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	8000003f 	.word	0x8000003f

08003aa4 <LL_ADC_IsEnabled>:
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <LL_ADC_IsEnabled+0x18>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e000      	b.n	8003abe <LL_ADC_IsEnabled+0x1a>
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <LL_ADC_REG_IsConversionOngoing>:
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d101      	bne.n	8003ae2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003af0:	b590      	push	{r4, r7, lr}
 8003af2:	b0a1      	sub	sp, #132	; 0x84
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e08b      	b.n	8003c26 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003b16:	2300      	movs	r3, #0
 8003b18:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b26:	d102      	bne.n	8003b2e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b28:	4b41      	ldr	r3, [pc, #260]	; (8003c30 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b2a:	60bb      	str	r3, [r7, #8]
 8003b2c:	e001      	b.n	8003b32 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10b      	bne.n	8003b50 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3c:	f043 0220 	orr.w	r2, r3, #32
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e06a      	b.n	8003c26 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff ffb9 	bl	8003aca <LL_ADC_REG_IsConversionOngoing>
 8003b58:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff ffb3 	bl	8003aca <LL_ADC_REG_IsConversionOngoing>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d14c      	bne.n	8003c04 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003b6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d149      	bne.n	8003c04 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b70:	4b30      	ldr	r3, [pc, #192]	; (8003c34 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003b72:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d028      	beq.n	8003bce <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003b7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	6859      	ldr	r1, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b8e:	035b      	lsls	r3, r3, #13
 8003b90:	430b      	orrs	r3, r1
 8003b92:	431a      	orrs	r2, r3
 8003b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b96:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b98:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003b9c:	f7ff ff82 	bl	8003aa4 <LL_ADC_IsEnabled>
 8003ba0:	4604      	mov	r4, r0
 8003ba2:	4823      	ldr	r0, [pc, #140]	; (8003c30 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003ba4:	f7ff ff7e 	bl	8003aa4 <LL_ADC_IsEnabled>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	4323      	orrs	r3, r4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d133      	bne.n	8003c18 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003bb8:	f023 030f 	bic.w	r3, r3, #15
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	6811      	ldr	r1, [r2, #0]
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	6892      	ldr	r2, [r2, #8]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bca:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bcc:	e024      	b.n	8003c18 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bda:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003bde:	f7ff ff61 	bl	8003aa4 <LL_ADC_IsEnabled>
 8003be2:	4604      	mov	r4, r0
 8003be4:	4812      	ldr	r0, [pc, #72]	; (8003c30 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003be6:	f7ff ff5d 	bl	8003aa4 <LL_ADC_IsEnabled>
 8003bea:	4603      	mov	r3, r0
 8003bec:	4323      	orrs	r3, r4
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d112      	bne.n	8003c18 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003bfa:	f023 030f 	bic.w	r3, r3, #15
 8003bfe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c00:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c02:	e009      	b.n	8003c18 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c08:	f043 0220 	orr.w	r2, r3, #32
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003c16:	e000      	b.n	8003c1a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c22:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3784      	adds	r7, #132	; 0x84
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd90      	pop	{r4, r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	50000100 	.word	0x50000100
 8003c34:	50000300 	.word	0x50000300

08003c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <__NVIC_SetPriorityGrouping+0x44>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c54:	4013      	ands	r3, r2
 8003c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c6a:	4a04      	ldr	r2, [pc, #16]	; (8003c7c <__NVIC_SetPriorityGrouping+0x44>)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	60d3      	str	r3, [r2, #12]
}
 8003c70:	bf00      	nop
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	e000ed00 	.word	0xe000ed00

08003c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c84:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <__NVIC_GetPriorityGrouping+0x18>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	0a1b      	lsrs	r3, r3, #8
 8003c8a:	f003 0307 	and.w	r3, r3, #7
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	e000ed00 	.word	0xe000ed00

08003c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	db0b      	blt.n	8003cc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	f003 021f 	and.w	r2, r3, #31
 8003cb4:	4907      	ldr	r1, [pc, #28]	; (8003cd4 <__NVIC_EnableIRQ+0x38>)
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	e000e100 	.word	0xe000e100

08003cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	6039      	str	r1, [r7, #0]
 8003ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	db0a      	blt.n	8003d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	490c      	ldr	r1, [pc, #48]	; (8003d24 <__NVIC_SetPriority+0x4c>)
 8003cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf6:	0112      	lsls	r2, r2, #4
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d00:	e00a      	b.n	8003d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	4908      	ldr	r1, [pc, #32]	; (8003d28 <__NVIC_SetPriority+0x50>)
 8003d08:	79fb      	ldrb	r3, [r7, #7]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	3b04      	subs	r3, #4
 8003d10:	0112      	lsls	r2, r2, #4
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	440b      	add	r3, r1
 8003d16:	761a      	strb	r2, [r3, #24]
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	e000e100 	.word	0xe000e100
 8003d28:	e000ed00 	.word	0xe000ed00

08003d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b089      	sub	sp, #36	; 0x24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f1c3 0307 	rsb	r3, r3, #7
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	bf28      	it	cs
 8003d4a:	2304      	movcs	r3, #4
 8003d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	3304      	adds	r3, #4
 8003d52:	2b06      	cmp	r3, #6
 8003d54:	d902      	bls.n	8003d5c <NVIC_EncodePriority+0x30>
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	3b03      	subs	r3, #3
 8003d5a:	e000      	b.n	8003d5e <NVIC_EncodePriority+0x32>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d60:	f04f 32ff 	mov.w	r2, #4294967295
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	43da      	mvns	r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	401a      	ands	r2, r3
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d74:	f04f 31ff 	mov.w	r1, #4294967295
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7e:	43d9      	mvns	r1, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d84:	4313      	orrs	r3, r2
         );
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3724      	adds	r7, #36	; 0x24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003da4:	d301      	bcc.n	8003daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003da6:	2301      	movs	r3, #1
 8003da8:	e00f      	b.n	8003dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003daa:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <SysTick_Config+0x40>)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003db2:	210f      	movs	r1, #15
 8003db4:	f04f 30ff 	mov.w	r0, #4294967295
 8003db8:	f7ff ff8e 	bl	8003cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <SysTick_Config+0x40>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dc2:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <SysTick_Config+0x40>)
 8003dc4:	2207      	movs	r2, #7
 8003dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	e000e010 	.word	0xe000e010

08003dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff ff29 	bl	8003c38 <__NVIC_SetPriorityGrouping>
}
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b086      	sub	sp, #24
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	4603      	mov	r3, r0
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003dfc:	f7ff ff40 	bl	8003c80 <__NVIC_GetPriorityGrouping>
 8003e00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	6978      	ldr	r0, [r7, #20]
 8003e08:	f7ff ff90 	bl	8003d2c <NVIC_EncodePriority>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e12:	4611      	mov	r1, r2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff ff5f 	bl	8003cd8 <__NVIC_SetPriority>
}
 8003e1a:	bf00      	nop
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	4603      	mov	r3, r0
 8003e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff ff33 	bl	8003c9c <__NVIC_EnableIRQ>
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff ffa4 	bl	8003d94 <SysTick_Config>
 8003e4c:	4603      	mov	r3, r0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b085      	sub	sp, #20
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d005      	beq.n	8003e7a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2204      	movs	r2, #4
 8003e72:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
 8003e78:	e037      	b.n	8003eea <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 020e 	bic.w	r2, r2, #14
 8003e88:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e98:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0201 	bic.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	f003 021f 	and.w	r2, r3, #31
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ebc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ec6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00c      	beq.n	8003eea <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ede:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ee8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d00d      	beq.n	8003f3c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2204      	movs	r2, #4
 8003f24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	73fb      	strb	r3, [r7, #15]
 8003f3a:	e047      	b.n	8003fcc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 020e 	bic.w	r2, r2, #14
 8003f4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0201 	bic.w	r2, r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f70:	f003 021f 	and.w	r2, r3, #31
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	2101      	movs	r1, #1
 8003f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f88:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00c      	beq.n	8003fac <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fa0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003faa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	4798      	blx	r3
    }
  }
  return status;
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003fe6:	e15a      	b.n	800429e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	2101      	movs	r1, #1
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 814c 	beq.w	8004298 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	2b01      	cmp	r3, #1
 800400a:	d005      	beq.n	8004018 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004014:	2b02      	cmp	r3, #2
 8004016:	d130      	bne.n	800407a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	2203      	movs	r2, #3
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	43db      	mvns	r3, r3
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4013      	ands	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800404e:	2201      	movs	r2, #1
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43db      	mvns	r3, r3
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4013      	ands	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	091b      	lsrs	r3, r3, #4
 8004064:	f003 0201 	and.w	r2, r3, #1
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b03      	cmp	r3, #3
 8004084:	d017      	beq.n	80040b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	2203      	movs	r2, #3
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43db      	mvns	r3, r3
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4013      	ands	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d123      	bne.n	800410a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	08da      	lsrs	r2, r3, #3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3208      	adds	r2, #8
 80040ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	220f      	movs	r2, #15
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43db      	mvns	r3, r3
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4013      	ands	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	08da      	lsrs	r2, r3, #3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3208      	adds	r2, #8
 8004104:	6939      	ldr	r1, [r7, #16]
 8004106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	2203      	movs	r2, #3
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43db      	mvns	r3, r3
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4013      	ands	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f003 0203 	and.w	r2, r3, #3
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 80a6 	beq.w	8004298 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800414c:	4b5b      	ldr	r3, [pc, #364]	; (80042bc <HAL_GPIO_Init+0x2e4>)
 800414e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004150:	4a5a      	ldr	r2, [pc, #360]	; (80042bc <HAL_GPIO_Init+0x2e4>)
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	6613      	str	r3, [r2, #96]	; 0x60
 8004158:	4b58      	ldr	r3, [pc, #352]	; (80042bc <HAL_GPIO_Init+0x2e4>)
 800415a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004164:	4a56      	ldr	r2, [pc, #344]	; (80042c0 <HAL_GPIO_Init+0x2e8>)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	089b      	lsrs	r3, r3, #2
 800416a:	3302      	adds	r3, #2
 800416c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004170:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f003 0303 	and.w	r3, r3, #3
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	220f      	movs	r2, #15
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43db      	mvns	r3, r3
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4013      	ands	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800418e:	d01f      	beq.n	80041d0 <HAL_GPIO_Init+0x1f8>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a4c      	ldr	r2, [pc, #304]	; (80042c4 <HAL_GPIO_Init+0x2ec>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d019      	beq.n	80041cc <HAL_GPIO_Init+0x1f4>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a4b      	ldr	r2, [pc, #300]	; (80042c8 <HAL_GPIO_Init+0x2f0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d013      	beq.n	80041c8 <HAL_GPIO_Init+0x1f0>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a4a      	ldr	r2, [pc, #296]	; (80042cc <HAL_GPIO_Init+0x2f4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00d      	beq.n	80041c4 <HAL_GPIO_Init+0x1ec>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a49      	ldr	r2, [pc, #292]	; (80042d0 <HAL_GPIO_Init+0x2f8>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d007      	beq.n	80041c0 <HAL_GPIO_Init+0x1e8>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a48      	ldr	r2, [pc, #288]	; (80042d4 <HAL_GPIO_Init+0x2fc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d101      	bne.n	80041bc <HAL_GPIO_Init+0x1e4>
 80041b8:	2305      	movs	r3, #5
 80041ba:	e00a      	b.n	80041d2 <HAL_GPIO_Init+0x1fa>
 80041bc:	2306      	movs	r3, #6
 80041be:	e008      	b.n	80041d2 <HAL_GPIO_Init+0x1fa>
 80041c0:	2304      	movs	r3, #4
 80041c2:	e006      	b.n	80041d2 <HAL_GPIO_Init+0x1fa>
 80041c4:	2303      	movs	r3, #3
 80041c6:	e004      	b.n	80041d2 <HAL_GPIO_Init+0x1fa>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e002      	b.n	80041d2 <HAL_GPIO_Init+0x1fa>
 80041cc:	2301      	movs	r3, #1
 80041ce:	e000      	b.n	80041d2 <HAL_GPIO_Init+0x1fa>
 80041d0:	2300      	movs	r3, #0
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	f002 0203 	and.w	r2, r2, #3
 80041d8:	0092      	lsls	r2, r2, #2
 80041da:	4093      	lsls	r3, r2
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041e2:	4937      	ldr	r1, [pc, #220]	; (80042c0 <HAL_GPIO_Init+0x2e8>)
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	089b      	lsrs	r3, r3, #2
 80041e8:	3302      	adds	r3, #2
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041f0:	4b39      	ldr	r3, [pc, #228]	; (80042d8 <HAL_GPIO_Init+0x300>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	43db      	mvns	r3, r3
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4013      	ands	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004214:	4a30      	ldr	r2, [pc, #192]	; (80042d8 <HAL_GPIO_Init+0x300>)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800421a:	4b2f      	ldr	r3, [pc, #188]	; (80042d8 <HAL_GPIO_Init+0x300>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	43db      	mvns	r3, r3
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4013      	ands	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800423e:	4a26      	ldr	r2, [pc, #152]	; (80042d8 <HAL_GPIO_Init+0x300>)
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004244:	4b24      	ldr	r3, [pc, #144]	; (80042d8 <HAL_GPIO_Init+0x300>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	43db      	mvns	r3, r3
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4013      	ands	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004268:	4a1b      	ldr	r2, [pc, #108]	; (80042d8 <HAL_GPIO_Init+0x300>)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800426e:	4b1a      	ldr	r3, [pc, #104]	; (80042d8 <HAL_GPIO_Init+0x300>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	43db      	mvns	r3, r3
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4013      	ands	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4313      	orrs	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004292:	4a11      	ldr	r2, [pc, #68]	; (80042d8 <HAL_GPIO_Init+0x300>)
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	3301      	adds	r3, #1
 800429c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f47f ae9d 	bne.w	8003fe8 <HAL_GPIO_Init+0x10>
  }
}
 80042ae:	bf00      	nop
 80042b0:	bf00      	nop
 80042b2:	371c      	adds	r7, #28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	40021000 	.word	0x40021000
 80042c0:	40010000 	.word	0x40010000
 80042c4:	48000400 	.word	0x48000400
 80042c8:	48000800 	.word	0x48000800
 80042cc:	48000c00 	.word	0x48000c00
 80042d0:	48001000 	.word	0x48001000
 80042d4:	48001400 	.word	0x48001400
 80042d8:	40010400 	.word	0x40010400

080042dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e081      	b.n	80043f2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fc ffd4 	bl	80012b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2224      	movs	r2, #36	; 0x24
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0201 	bic.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800432c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800433c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d107      	bne.n	8004356 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004352:	609a      	str	r2, [r3, #8]
 8004354:	e006      	b.n	8004364 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004362:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	2b02      	cmp	r3, #2
 800436a:	d104      	bne.n	8004376 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004374:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004388:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004398:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691a      	ldr	r2, [r3, #16]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69d9      	ldr	r1, [r3, #28]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1a      	ldr	r2, [r3, #32]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af02      	add	r7, sp, #8
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	607a      	str	r2, [r7, #4]
 8004406:	461a      	mov	r2, r3
 8004408:	460b      	mov	r3, r1
 800440a:	817b      	strh	r3, [r7, #10]
 800440c:	4613      	mov	r3, r2
 800440e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b20      	cmp	r3, #32
 800441a:	f040 80da 	bne.w	80045d2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_I2C_Master_Transmit+0x30>
 8004428:	2302      	movs	r3, #2
 800442a:	e0d3      	b.n	80045d4 <HAL_I2C_Master_Transmit+0x1d8>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004434:	f7fe f95a 	bl	80026ec <HAL_GetTick>
 8004438:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	2319      	movs	r3, #25
 8004440:	2201      	movs	r2, #1
 8004442:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 f8f0 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e0be      	b.n	80045d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2221      	movs	r2, #33	; 0x21
 800445a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2210      	movs	r2, #16
 8004462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	893a      	ldrh	r2, [r7, #8]
 8004476:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004482:	b29b      	uxth	r3, r3
 8004484:	2bff      	cmp	r3, #255	; 0xff
 8004486:	d90e      	bls.n	80044a6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	22ff      	movs	r2, #255	; 0xff
 800448c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004492:	b2da      	uxtb	r2, r3
 8004494:	8979      	ldrh	r1, [r7, #10]
 8004496:	4b51      	ldr	r3, [pc, #324]	; (80045dc <HAL_I2C_Master_Transmit+0x1e0>)
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 fa6c 	bl	800497c <I2C_TransferConfig>
 80044a4:	e06c      	b.n	8004580 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	8979      	ldrh	r1, [r7, #10]
 80044b8:	4b48      	ldr	r3, [pc, #288]	; (80045dc <HAL_I2C_Master_Transmit+0x1e0>)
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fa5b 	bl	800497c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80044c6:	e05b      	b.n	8004580 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	6a39      	ldr	r1, [r7, #32]
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f8ed 	bl	80046ac <I2C_WaitOnTXISFlagUntilTimeout>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e07b      	b.n	80045d4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	781a      	ldrb	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d034      	beq.n	8004580 <HAL_I2C_Master_Transmit+0x184>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451a:	2b00      	cmp	r3, #0
 800451c:	d130      	bne.n	8004580 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	2200      	movs	r2, #0
 8004526:	2180      	movs	r1, #128	; 0x80
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 f87f 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e04d      	b.n	80045d4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	2bff      	cmp	r3, #255	; 0xff
 8004540:	d90e      	bls.n	8004560 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	22ff      	movs	r2, #255	; 0xff
 8004546:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454c:	b2da      	uxtb	r2, r3
 800454e:	8979      	ldrh	r1, [r7, #10]
 8004550:	2300      	movs	r3, #0
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 fa0f 	bl	800497c <I2C_TransferConfig>
 800455e:	e00f      	b.n	8004580 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456e:	b2da      	uxtb	r2, r3
 8004570:	8979      	ldrh	r1, [r7, #10]
 8004572:	2300      	movs	r3, #0
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f9fe 	bl	800497c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d19e      	bne.n	80044c8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	6a39      	ldr	r1, [r7, #32]
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f8cc 	bl	800472c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e01a      	b.n	80045d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2220      	movs	r2, #32
 80045a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6859      	ldr	r1, [r3, #4]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <HAL_I2C_Master_Transmit+0x1e4>)
 80045b2:	400b      	ands	r3, r1
 80045b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	e000      	b.n	80045d4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80045d2:	2302      	movs	r3, #2
  }
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	80002000 	.word	0x80002000
 80045e0:	fe00e800 	.word	0xfe00e800

080045e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d103      	bne.n	8004602 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2200      	movs	r2, #0
 8004600:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b01      	cmp	r3, #1
 800460e:	d007      	beq.n	8004620 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	619a      	str	r2, [r3, #24]
  }
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	4613      	mov	r3, r2
 800463a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800463c:	e022      	b.n	8004684 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d01e      	beq.n	8004684 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004646:	f7fe f851 	bl	80026ec <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d302      	bcc.n	800465c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d113      	bne.n	8004684 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004660:	f043 0220 	orr.w	r2, r3, #32
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e00f      	b.n	80046a4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699a      	ldr	r2, [r3, #24]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4013      	ands	r3, r2
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	429a      	cmp	r2, r3
 8004692:	bf0c      	ite	eq
 8004694:	2301      	moveq	r3, #1
 8004696:	2300      	movne	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	461a      	mov	r2, r3
 800469c:	79fb      	ldrb	r3, [r7, #7]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d0cd      	beq.n	800463e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046b8:	e02c      	b.n	8004714 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f870 	bl	80047a4 <I2C_IsErrorOccurred>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e02a      	b.n	8004724 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d4:	d01e      	beq.n	8004714 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d6:	f7fe f809 	bl	80026ec <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d302      	bcc.n	80046ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d113      	bne.n	8004714 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f0:	f043 0220 	orr.w	r2, r3, #32
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e007      	b.n	8004724 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b02      	cmp	r3, #2
 8004720:	d1cb      	bne.n	80046ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004738:	e028      	b.n	800478c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	68b9      	ldr	r1, [r7, #8]
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 f830 	bl	80047a4 <I2C_IsErrorOccurred>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e026      	b.n	800479c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474e:	f7fd ffcd 	bl	80026ec <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	429a      	cmp	r2, r3
 800475c:	d302      	bcc.n	8004764 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d113      	bne.n	800478c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004768:	f043 0220 	orr.w	r2, r3, #32
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e007      	b.n	800479c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b20      	cmp	r3, #32
 8004798:	d1cf      	bne.n	800473a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b08a      	sub	sp, #40	; 0x28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047b0:	2300      	movs	r3, #0
 80047b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80047be:	2300      	movs	r3, #0
 80047c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f003 0310 	and.w	r3, r3, #16
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d075      	beq.n	80048bc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2210      	movs	r2, #16
 80047d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047d8:	e056      	b.n	8004888 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e0:	d052      	beq.n	8004888 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047e2:	f7fd ff83 	bl	80026ec <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d302      	bcc.n	80047f8 <I2C_IsErrorOccurred+0x54>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d147      	bne.n	8004888 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004802:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800480a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800481a:	d12e      	bne.n	800487a <I2C_IsErrorOccurred+0xd6>
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004822:	d02a      	beq.n	800487a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004824:	7cfb      	ldrb	r3, [r7, #19]
 8004826:	2b20      	cmp	r3, #32
 8004828:	d027      	beq.n	800487a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004838:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800483a:	f7fd ff57 	bl	80026ec <HAL_GetTick>
 800483e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004840:	e01b      	b.n	800487a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004842:	f7fd ff53 	bl	80026ec <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b19      	cmp	r3, #25
 800484e:	d914      	bls.n	800487a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004854:	f043 0220 	orr.w	r2, r3, #32
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b20      	cmp	r3, #32
 8004886:	d1dc      	bne.n	8004842 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b20      	cmp	r3, #32
 8004894:	d003      	beq.n	800489e <I2C_IsErrorOccurred+0xfa>
 8004896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800489a:	2b00      	cmp	r3, #0
 800489c:	d09d      	beq.n	80047da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800489e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d103      	bne.n	80048ae <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2220      	movs	r2, #32
 80048ac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	f043 0304 	orr.w	r3, r3, #4
 80048b4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00b      	beq.n	80048e6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	f043 0301 	orr.w	r3, r3, #1
 80048d4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00b      	beq.n	8004908 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	f043 0308 	orr.w	r3, r3, #8
 80048f6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004900:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	f043 0302 	orr.w	r3, r3, #2
 8004918:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004922:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800492a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800492e:	2b00      	cmp	r3, #0
 8004930:	d01c      	beq.n	800496c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f7ff fe56 	bl	80045e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6859      	ldr	r1, [r3, #4]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <I2C_IsErrorOccurred+0x1d4>)
 8004944:	400b      	ands	r3, r1
 8004946:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	431a      	orrs	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800496c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004970:	4618      	mov	r0, r3
 8004972:	3728      	adds	r7, #40	; 0x28
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	fe00e800 	.word	0xfe00e800

0800497c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	607b      	str	r3, [r7, #4]
 8004986:	460b      	mov	r3, r1
 8004988:	817b      	strh	r3, [r7, #10]
 800498a:	4613      	mov	r3, r2
 800498c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800498e:	897b      	ldrh	r3, [r7, #10]
 8004990:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004994:	7a7b      	ldrb	r3, [r7, #9]
 8004996:	041b      	lsls	r3, r3, #16
 8004998:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800499c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049aa:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	0d5b      	lsrs	r3, r3, #21
 80049b6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80049ba:	4b08      	ldr	r3, [pc, #32]	; (80049dc <I2C_TransferConfig+0x60>)
 80049bc:	430b      	orrs	r3, r1
 80049be:	43db      	mvns	r3, r3
 80049c0:	ea02 0103 	and.w	r1, r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	03ff63ff 	.word	0x03ff63ff

080049e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d138      	bne.n	8004a68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d101      	bne.n	8004a04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a00:	2302      	movs	r3, #2
 8004a02:	e032      	b.n	8004a6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2224      	movs	r2, #36	; 0x24
 8004a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0201 	bic.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6819      	ldr	r1, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	e000      	b.n	8004a6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a68:	2302      	movs	r3, #2
  }
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d139      	bne.n	8004b00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e033      	b.n	8004b02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2224      	movs	r2, #36	; 0x24
 8004aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0201 	bic.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ac8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	021b      	lsls	r3, r3, #8
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	e000      	b.n	8004b02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b00:	2302      	movs	r3, #2
  }
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
	...

08004b10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d141      	bne.n	8004ba2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b1e:	4b4b      	ldr	r3, [pc, #300]	; (8004c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b2a:	d131      	bne.n	8004b90 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b2c:	4b47      	ldr	r3, [pc, #284]	; (8004c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b32:	4a46      	ldr	r2, [pc, #280]	; (8004c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b3c:	4b43      	ldr	r3, [pc, #268]	; (8004c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b44:	4a41      	ldr	r2, [pc, #260]	; (8004c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b4c:	4b40      	ldr	r3, [pc, #256]	; (8004c50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2232      	movs	r2, #50	; 0x32
 8004b52:	fb02 f303 	mul.w	r3, r2, r3
 8004b56:	4a3f      	ldr	r2, [pc, #252]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	0c9b      	lsrs	r3, r3, #18
 8004b5e:	3301      	adds	r3, #1
 8004b60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b62:	e002      	b.n	8004b6a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b6a:	4b38      	ldr	r3, [pc, #224]	; (8004c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b76:	d102      	bne.n	8004b7e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f2      	bne.n	8004b64 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b7e:	4b33      	ldr	r3, [pc, #204]	; (8004c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b8a:	d158      	bne.n	8004c3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e057      	b.n	8004c40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b90:	4b2e      	ldr	r3, [pc, #184]	; (8004c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b96:	4a2d      	ldr	r2, [pc, #180]	; (8004c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004ba0:	e04d      	b.n	8004c3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba8:	d141      	bne.n	8004c2e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004baa:	4b28      	ldr	r3, [pc, #160]	; (8004c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb6:	d131      	bne.n	8004c1c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bb8:	4b24      	ldr	r3, [pc, #144]	; (8004c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bbe:	4a23      	ldr	r2, [pc, #140]	; (8004c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bc8:	4b20      	ldr	r3, [pc, #128]	; (8004c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bd0:	4a1e      	ldr	r2, [pc, #120]	; (8004c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bd8:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2232      	movs	r2, #50	; 0x32
 8004bde:	fb02 f303 	mul.w	r3, r2, r3
 8004be2:	4a1c      	ldr	r2, [pc, #112]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004be4:	fba2 2303 	umull	r2, r3, r2, r3
 8004be8:	0c9b      	lsrs	r3, r3, #18
 8004bea:	3301      	adds	r3, #1
 8004bec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bee:	e002      	b.n	8004bf6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bf6:	4b15      	ldr	r3, [pc, #84]	; (8004c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c02:	d102      	bne.n	8004c0a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f2      	bne.n	8004bf0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c0a:	4b10      	ldr	r3, [pc, #64]	; (8004c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c16:	d112      	bne.n	8004c3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e011      	b.n	8004c40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c22:	4a0a      	ldr	r2, [pc, #40]	; (8004c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c2c:	e007      	b.n	8004c3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c2e:	4b07      	ldr	r3, [pc, #28]	; (8004c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c36:	4a05      	ldr	r2, [pc, #20]	; (8004c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c3c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	40007000 	.word	0x40007000
 8004c50:	20000010 	.word	0x20000010
 8004c54:	431bde83 	.word	0x431bde83

08004c58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e306      	b.n	8005278 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d075      	beq.n	8004d62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c76:	4b97      	ldr	r3, [pc, #604]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c80:	4b94      	ldr	r3, [pc, #592]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0303 	and.w	r3, r3, #3
 8004c88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	2b0c      	cmp	r3, #12
 8004c8e:	d102      	bne.n	8004c96 <HAL_RCC_OscConfig+0x3e>
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	d002      	beq.n	8004c9c <HAL_RCC_OscConfig+0x44>
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d10b      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c9c:	4b8d      	ldr	r3, [pc, #564]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d05b      	beq.n	8004d60 <HAL_RCC_OscConfig+0x108>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d157      	bne.n	8004d60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e2e1      	b.n	8005278 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cbc:	d106      	bne.n	8004ccc <HAL_RCC_OscConfig+0x74>
 8004cbe:	4b85      	ldr	r3, [pc, #532]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a84      	ldr	r2, [pc, #528]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	e01d      	b.n	8004d08 <HAL_RCC_OscConfig+0xb0>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd4:	d10c      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x98>
 8004cd6:	4b7f      	ldr	r3, [pc, #508]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a7e      	ldr	r2, [pc, #504]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	4b7c      	ldr	r3, [pc, #496]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a7b      	ldr	r2, [pc, #492]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	e00b      	b.n	8004d08 <HAL_RCC_OscConfig+0xb0>
 8004cf0:	4b78      	ldr	r3, [pc, #480]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a77      	ldr	r2, [pc, #476]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	4b75      	ldr	r3, [pc, #468]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a74      	ldr	r2, [pc, #464]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d013      	beq.n	8004d38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d10:	f7fd fcec 	bl	80026ec <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d18:	f7fd fce8 	bl	80026ec <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b64      	cmp	r3, #100	; 0x64
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e2a6      	b.n	8005278 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d2a:	4b6a      	ldr	r3, [pc, #424]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0xc0>
 8004d36:	e014      	b.n	8004d62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d38:	f7fd fcd8 	bl	80026ec <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d40:	f7fd fcd4 	bl	80026ec <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b64      	cmp	r3, #100	; 0x64
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e292      	b.n	8005278 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d52:	4b60      	ldr	r3, [pc, #384]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1f0      	bne.n	8004d40 <HAL_RCC_OscConfig+0xe8>
 8004d5e:	e000      	b.n	8004d62 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d075      	beq.n	8004e5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d6e:	4b59      	ldr	r3, [pc, #356]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 030c 	and.w	r3, r3, #12
 8004d76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d78:	4b56      	ldr	r3, [pc, #344]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	2b0c      	cmp	r3, #12
 8004d86:	d102      	bne.n	8004d8e <HAL_RCC_OscConfig+0x136>
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d002      	beq.n	8004d94 <HAL_RCC_OscConfig+0x13c>
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d11f      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d94:	4b4f      	ldr	r3, [pc, #316]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <HAL_RCC_OscConfig+0x154>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e265      	b.n	8005278 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dac:	4b49      	ldr	r3, [pc, #292]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	061b      	lsls	r3, r3, #24
 8004dba:	4946      	ldr	r1, [pc, #280]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004dc0:	4b45      	ldr	r3, [pc, #276]	; (8004ed8 <HAL_RCC_OscConfig+0x280>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fd fc45 	bl	8002654 <HAL_InitTick>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d043      	beq.n	8004e58 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e251      	b.n	8005278 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d023      	beq.n	8004e24 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ddc:	4b3d      	ldr	r3, [pc, #244]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a3c      	ldr	r2, [pc, #240]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fd fc80 	bl	80026ec <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004df0:	f7fd fc7c 	bl	80026ec <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e23a      	b.n	8005278 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e02:	4b34      	ldr	r3, [pc, #208]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e0e:	4b31      	ldr	r3, [pc, #196]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	061b      	lsls	r3, r3, #24
 8004e1c:	492d      	ldr	r1, [pc, #180]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	604b      	str	r3, [r1, #4]
 8004e22:	e01a      	b.n	8004e5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e24:	4b2b      	ldr	r3, [pc, #172]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a2a      	ldr	r2, [pc, #168]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004e2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fd fc5c 	bl	80026ec <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e38:	f7fd fc58 	bl	80026ec <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e216      	b.n	8005278 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e4a:	4b22      	ldr	r3, [pc, #136]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f0      	bne.n	8004e38 <HAL_RCC_OscConfig+0x1e0>
 8004e56:	e000      	b.n	8004e5a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d041      	beq.n	8004eea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d01c      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e6e:	4b19      	ldr	r3, [pc, #100]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e74:	4a17      	ldr	r2, [pc, #92]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004e76:	f043 0301 	orr.w	r3, r3, #1
 8004e7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7e:	f7fd fc35 	bl	80026ec <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e84:	e008      	b.n	8004e98 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e86:	f7fd fc31 	bl	80026ec <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e1ef      	b.n	8005278 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e98:	4b0e      	ldr	r3, [pc, #56]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0ef      	beq.n	8004e86 <HAL_RCC_OscConfig+0x22e>
 8004ea6:	e020      	b.n	8004eea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ea8:	4b0a      	ldr	r3, [pc, #40]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eae:	4a09      	ldr	r2, [pc, #36]	; (8004ed4 <HAL_RCC_OscConfig+0x27c>)
 8004eb0:	f023 0301 	bic.w	r3, r3, #1
 8004eb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb8:	f7fd fc18 	bl	80026ec <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ebe:	e00d      	b.n	8004edc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ec0:	f7fd fc14 	bl	80026ec <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d906      	bls.n	8004edc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e1d2      	b.n	8005278 <HAL_RCC_OscConfig+0x620>
 8004ed2:	bf00      	nop
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004edc:	4b8c      	ldr	r3, [pc, #560]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 8004ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1ea      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 80a6 	beq.w	8005044 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004efc:	4b84      	ldr	r3, [pc, #528]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 8004efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_RCC_OscConfig+0x2b4>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <HAL_RCC_OscConfig+0x2b6>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00d      	beq.n	8004f2e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f12:	4b7f      	ldr	r3, [pc, #508]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 8004f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f16:	4a7e      	ldr	r2, [pc, #504]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 8004f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f1e:	4b7c      	ldr	r3, [pc, #496]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 8004f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f2e:	4b79      	ldr	r3, [pc, #484]	; (8005114 <HAL_RCC_OscConfig+0x4bc>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d118      	bne.n	8004f6c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f3a:	4b76      	ldr	r3, [pc, #472]	; (8005114 <HAL_RCC_OscConfig+0x4bc>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a75      	ldr	r2, [pc, #468]	; (8005114 <HAL_RCC_OscConfig+0x4bc>)
 8004f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f46:	f7fd fbd1 	bl	80026ec <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f4e:	f7fd fbcd 	bl	80026ec <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e18b      	b.n	8005278 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f60:	4b6c      	ldr	r3, [pc, #432]	; (8005114 <HAL_RCC_OscConfig+0x4bc>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0f0      	beq.n	8004f4e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d108      	bne.n	8004f86 <HAL_RCC_OscConfig+0x32e>
 8004f74:	4b66      	ldr	r3, [pc, #408]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 8004f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7a:	4a65      	ldr	r2, [pc, #404]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 8004f7c:	f043 0301 	orr.w	r3, r3, #1
 8004f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f84:	e024      	b.n	8004fd0 <HAL_RCC_OscConfig+0x378>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b05      	cmp	r3, #5
 8004f8c:	d110      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x358>
 8004f8e:	4b60      	ldr	r3, [pc, #384]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 8004f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f94:	4a5e      	ldr	r2, [pc, #376]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 8004f96:	f043 0304 	orr.w	r3, r3, #4
 8004f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f9e:	4b5c      	ldr	r3, [pc, #368]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 8004fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa4:	4a5a      	ldr	r2, [pc, #360]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 8004fa6:	f043 0301 	orr.w	r3, r3, #1
 8004faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fae:	e00f      	b.n	8004fd0 <HAL_RCC_OscConfig+0x378>
 8004fb0:	4b57      	ldr	r3, [pc, #348]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 8004fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb6:	4a56      	ldr	r2, [pc, #344]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 8004fb8:	f023 0301 	bic.w	r3, r3, #1
 8004fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fc0:	4b53      	ldr	r3, [pc, #332]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 8004fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc6:	4a52      	ldr	r2, [pc, #328]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 8004fc8:	f023 0304 	bic.w	r3, r3, #4
 8004fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d016      	beq.n	8005006 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd8:	f7fd fb88 	bl	80026ec <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fde:	e00a      	b.n	8004ff6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe0:	f7fd fb84 	bl	80026ec <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e140      	b.n	8005278 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ff6:	4b46      	ldr	r3, [pc, #280]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 8004ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0ed      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x388>
 8005004:	e015      	b.n	8005032 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005006:	f7fd fb71 	bl	80026ec <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800500c:	e00a      	b.n	8005024 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800500e:	f7fd fb6d 	bl	80026ec <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	f241 3288 	movw	r2, #5000	; 0x1388
 800501c:	4293      	cmp	r3, r2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e129      	b.n	8005278 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005024:	4b3a      	ldr	r3, [pc, #232]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 8005026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1ed      	bne.n	800500e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005032:	7ffb      	ldrb	r3, [r7, #31]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d105      	bne.n	8005044 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005038:	4b35      	ldr	r3, [pc, #212]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 800503a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503c:	4a34      	ldr	r2, [pc, #208]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 800503e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005042:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d03c      	beq.n	80050ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01c      	beq.n	8005092 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005058:	4b2d      	ldr	r3, [pc, #180]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 800505a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800505e:	4a2c      	ldr	r2, [pc, #176]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005068:	f7fd fb40 	bl	80026ec <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005070:	f7fd fb3c 	bl	80026ec <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e0fa      	b.n	8005278 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005082:	4b23      	ldr	r3, [pc, #140]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 8005084:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0ef      	beq.n	8005070 <HAL_RCC_OscConfig+0x418>
 8005090:	e01b      	b.n	80050ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005092:	4b1f      	ldr	r3, [pc, #124]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 8005094:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005098:	4a1d      	ldr	r2, [pc, #116]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 800509a:	f023 0301 	bic.w	r3, r3, #1
 800509e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a2:	f7fd fb23 	bl	80026ec <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050aa:	f7fd fb1f 	bl	80026ec <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e0dd      	b.n	8005278 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050bc:	4b14      	ldr	r3, [pc, #80]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 80050be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1ef      	bne.n	80050aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 80d1 	beq.w	8005276 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050d4:	4b0e      	ldr	r3, [pc, #56]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f003 030c 	and.w	r3, r3, #12
 80050dc:	2b0c      	cmp	r3, #12
 80050de:	f000 808b 	beq.w	80051f8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d15e      	bne.n	80051a8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ea:	4b09      	ldr	r3, [pc, #36]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a08      	ldr	r2, [pc, #32]	; (8005110 <HAL_RCC_OscConfig+0x4b8>)
 80050f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f6:	f7fd faf9 	bl	80026ec <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050fc:	e00c      	b.n	8005118 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050fe:	f7fd faf5 	bl	80026ec <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d905      	bls.n	8005118 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e0b3      	b.n	8005278 <HAL_RCC_OscConfig+0x620>
 8005110:	40021000 	.word	0x40021000
 8005114:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005118:	4b59      	ldr	r3, [pc, #356]	; (8005280 <HAL_RCC_OscConfig+0x628>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1ec      	bne.n	80050fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005124:	4b56      	ldr	r3, [pc, #344]	; (8005280 <HAL_RCC_OscConfig+0x628>)
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	4b56      	ldr	r3, [pc, #344]	; (8005284 <HAL_RCC_OscConfig+0x62c>)
 800512a:	4013      	ands	r3, r2
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6a11      	ldr	r1, [r2, #32]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005134:	3a01      	subs	r2, #1
 8005136:	0112      	lsls	r2, r2, #4
 8005138:	4311      	orrs	r1, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800513e:	0212      	lsls	r2, r2, #8
 8005140:	4311      	orrs	r1, r2
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005146:	0852      	lsrs	r2, r2, #1
 8005148:	3a01      	subs	r2, #1
 800514a:	0552      	lsls	r2, r2, #21
 800514c:	4311      	orrs	r1, r2
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005152:	0852      	lsrs	r2, r2, #1
 8005154:	3a01      	subs	r2, #1
 8005156:	0652      	lsls	r2, r2, #25
 8005158:	4311      	orrs	r1, r2
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800515e:	06d2      	lsls	r2, r2, #27
 8005160:	430a      	orrs	r2, r1
 8005162:	4947      	ldr	r1, [pc, #284]	; (8005280 <HAL_RCC_OscConfig+0x628>)
 8005164:	4313      	orrs	r3, r2
 8005166:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005168:	4b45      	ldr	r3, [pc, #276]	; (8005280 <HAL_RCC_OscConfig+0x628>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a44      	ldr	r2, [pc, #272]	; (8005280 <HAL_RCC_OscConfig+0x628>)
 800516e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005172:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005174:	4b42      	ldr	r3, [pc, #264]	; (8005280 <HAL_RCC_OscConfig+0x628>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	4a41      	ldr	r2, [pc, #260]	; (8005280 <HAL_RCC_OscConfig+0x628>)
 800517a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800517e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005180:	f7fd fab4 	bl	80026ec <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005188:	f7fd fab0 	bl	80026ec <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e06e      	b.n	8005278 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800519a:	4b39      	ldr	r3, [pc, #228]	; (8005280 <HAL_RCC_OscConfig+0x628>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f0      	beq.n	8005188 <HAL_RCC_OscConfig+0x530>
 80051a6:	e066      	b.n	8005276 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a8:	4b35      	ldr	r3, [pc, #212]	; (8005280 <HAL_RCC_OscConfig+0x628>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a34      	ldr	r2, [pc, #208]	; (8005280 <HAL_RCC_OscConfig+0x628>)
 80051ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051b2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80051b4:	4b32      	ldr	r3, [pc, #200]	; (8005280 <HAL_RCC_OscConfig+0x628>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	4a31      	ldr	r2, [pc, #196]	; (8005280 <HAL_RCC_OscConfig+0x628>)
 80051ba:	f023 0303 	bic.w	r3, r3, #3
 80051be:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80051c0:	4b2f      	ldr	r3, [pc, #188]	; (8005280 <HAL_RCC_OscConfig+0x628>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	4a2e      	ldr	r2, [pc, #184]	; (8005280 <HAL_RCC_OscConfig+0x628>)
 80051c6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80051ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d0:	f7fd fa8c 	bl	80026ec <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051d6:	e008      	b.n	80051ea <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d8:	f7fd fa88 	bl	80026ec <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e046      	b.n	8005278 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ea:	4b25      	ldr	r3, [pc, #148]	; (8005280 <HAL_RCC_OscConfig+0x628>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1f0      	bne.n	80051d8 <HAL_RCC_OscConfig+0x580>
 80051f6:	e03e      	b.n	8005276 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e039      	b.n	8005278 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005204:	4b1e      	ldr	r3, [pc, #120]	; (8005280 <HAL_RCC_OscConfig+0x628>)
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f003 0203 	and.w	r2, r3, #3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	429a      	cmp	r2, r3
 8005216:	d12c      	bne.n	8005272 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	3b01      	subs	r3, #1
 8005224:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005226:	429a      	cmp	r2, r3
 8005228:	d123      	bne.n	8005272 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005234:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005236:	429a      	cmp	r2, r3
 8005238:	d11b      	bne.n	8005272 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005246:	429a      	cmp	r2, r3
 8005248:	d113      	bne.n	8005272 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005254:	085b      	lsrs	r3, r3, #1
 8005256:	3b01      	subs	r3, #1
 8005258:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800525a:	429a      	cmp	r2, r3
 800525c:	d109      	bne.n	8005272 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005268:	085b      	lsrs	r3, r3, #1
 800526a:	3b01      	subs	r3, #1
 800526c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800526e:	429a      	cmp	r2, r3
 8005270:	d001      	beq.n	8005276 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e000      	b.n	8005278 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3720      	adds	r7, #32
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	40021000 	.word	0x40021000
 8005284:	019f800c 	.word	0x019f800c

08005288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e11e      	b.n	80054de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052a0:	4b91      	ldr	r3, [pc, #580]	; (80054e8 <HAL_RCC_ClockConfig+0x260>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 030f 	and.w	r3, r3, #15
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d910      	bls.n	80052d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ae:	4b8e      	ldr	r3, [pc, #568]	; (80054e8 <HAL_RCC_ClockConfig+0x260>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f023 020f 	bic.w	r2, r3, #15
 80052b6:	498c      	ldr	r1, [pc, #560]	; (80054e8 <HAL_RCC_ClockConfig+0x260>)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052be:	4b8a      	ldr	r3, [pc, #552]	; (80054e8 <HAL_RCC_ClockConfig+0x260>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d001      	beq.n	80052d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e106      	b.n	80054de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d073      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b03      	cmp	r3, #3
 80052e2:	d129      	bne.n	8005338 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052e4:	4b81      	ldr	r3, [pc, #516]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e0f4      	b.n	80054de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80052f4:	f000 f99e 	bl	8005634 <RCC_GetSysClockFreqFromPLLSource>
 80052f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	4a7c      	ldr	r2, [pc, #496]	; (80054f0 <HAL_RCC_ClockConfig+0x268>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d93f      	bls.n	8005382 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005302:	4b7a      	ldr	r3, [pc, #488]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005316:	2b00      	cmp	r3, #0
 8005318:	d033      	beq.n	8005382 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800531e:	2b00      	cmp	r3, #0
 8005320:	d12f      	bne.n	8005382 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005322:	4b72      	ldr	r3, [pc, #456]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800532a:	4a70      	ldr	r2, [pc, #448]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 800532c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005330:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005332:	2380      	movs	r3, #128	; 0x80
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	e024      	b.n	8005382 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2b02      	cmp	r3, #2
 800533e:	d107      	bne.n	8005350 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005340:	4b6a      	ldr	r3, [pc, #424]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d109      	bne.n	8005360 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e0c6      	b.n	80054de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005350:	4b66      	ldr	r3, [pc, #408]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e0be      	b.n	80054de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005360:	f000 f8ce 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 8005364:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	4a61      	ldr	r2, [pc, #388]	; (80054f0 <HAL_RCC_ClockConfig+0x268>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d909      	bls.n	8005382 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800536e:	4b5f      	ldr	r3, [pc, #380]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005376:	4a5d      	ldr	r2, [pc, #372]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800537c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800537e:	2380      	movs	r3, #128	; 0x80
 8005380:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005382:	4b5a      	ldr	r3, [pc, #360]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f023 0203 	bic.w	r2, r3, #3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	4957      	ldr	r1, [pc, #348]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005390:	4313      	orrs	r3, r2
 8005392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005394:	f7fd f9aa 	bl	80026ec <HAL_GetTick>
 8005398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800539a:	e00a      	b.n	80053b2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800539c:	f7fd f9a6 	bl	80026ec <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e095      	b.n	80054de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b2:	4b4e      	ldr	r3, [pc, #312]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 020c 	and.w	r2, r3, #12
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d1eb      	bne.n	800539c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d023      	beq.n	8005418 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d005      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053dc:	4b43      	ldr	r3, [pc, #268]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	4a42      	ldr	r2, [pc, #264]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 80053e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053e6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d007      	beq.n	8005404 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80053f4:	4b3d      	ldr	r3, [pc, #244]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80053fc:	4a3b      	ldr	r2, [pc, #236]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 80053fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005402:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005404:	4b39      	ldr	r3, [pc, #228]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	4936      	ldr	r1, [pc, #216]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005412:	4313      	orrs	r3, r2
 8005414:	608b      	str	r3, [r1, #8]
 8005416:	e008      	b.n	800542a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2b80      	cmp	r3, #128	; 0x80
 800541c:	d105      	bne.n	800542a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800541e:	4b33      	ldr	r3, [pc, #204]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	4a32      	ldr	r2, [pc, #200]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005424:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005428:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800542a:	4b2f      	ldr	r3, [pc, #188]	; (80054e8 <HAL_RCC_ClockConfig+0x260>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	429a      	cmp	r2, r3
 8005436:	d21d      	bcs.n	8005474 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005438:	4b2b      	ldr	r3, [pc, #172]	; (80054e8 <HAL_RCC_ClockConfig+0x260>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f023 020f 	bic.w	r2, r3, #15
 8005440:	4929      	ldr	r1, [pc, #164]	; (80054e8 <HAL_RCC_ClockConfig+0x260>)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	4313      	orrs	r3, r2
 8005446:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005448:	f7fd f950 	bl	80026ec <HAL_GetTick>
 800544c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800544e:	e00a      	b.n	8005466 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005450:	f7fd f94c 	bl	80026ec <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	f241 3288 	movw	r2, #5000	; 0x1388
 800545e:	4293      	cmp	r3, r2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e03b      	b.n	80054de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005466:	4b20      	ldr	r3, [pc, #128]	; (80054e8 <HAL_RCC_ClockConfig+0x260>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d1ed      	bne.n	8005450 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d008      	beq.n	8005492 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005480:	4b1a      	ldr	r3, [pc, #104]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	4917      	ldr	r1, [pc, #92]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 800548e:	4313      	orrs	r3, r2
 8005490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0308 	and.w	r3, r3, #8
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800549e:	4b13      	ldr	r3, [pc, #76]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	490f      	ldr	r1, [pc, #60]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054b2:	f000 f825 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 80054b6:	4602      	mov	r2, r0
 80054b8:	4b0c      	ldr	r3, [pc, #48]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	091b      	lsrs	r3, r3, #4
 80054be:	f003 030f 	and.w	r3, r3, #15
 80054c2:	490c      	ldr	r1, [pc, #48]	; (80054f4 <HAL_RCC_ClockConfig+0x26c>)
 80054c4:	5ccb      	ldrb	r3, [r1, r3]
 80054c6:	f003 031f 	and.w	r3, r3, #31
 80054ca:	fa22 f303 	lsr.w	r3, r2, r3
 80054ce:	4a0a      	ldr	r2, [pc, #40]	; (80054f8 <HAL_RCC_ClockConfig+0x270>)
 80054d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80054d2:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <HAL_RCC_ClockConfig+0x274>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fd f8bc 	bl	8002654 <HAL_InitTick>
 80054dc:	4603      	mov	r3, r0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	40022000 	.word	0x40022000
 80054ec:	40021000 	.word	0x40021000
 80054f0:	04c4b400 	.word	0x04c4b400
 80054f4:	0800ee38 	.word	0x0800ee38
 80054f8:	20000010 	.word	0x20000010
 80054fc:	20000014 	.word	0x20000014

08005500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005500:	b480      	push	{r7}
 8005502:	b087      	sub	sp, #28
 8005504:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005506:	4b2c      	ldr	r3, [pc, #176]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 030c 	and.w	r3, r3, #12
 800550e:	2b04      	cmp	r3, #4
 8005510:	d102      	bne.n	8005518 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005512:	4b2a      	ldr	r3, [pc, #168]	; (80055bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	e047      	b.n	80055a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005518:	4b27      	ldr	r3, [pc, #156]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 030c 	and.w	r3, r3, #12
 8005520:	2b08      	cmp	r3, #8
 8005522:	d102      	bne.n	800552a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005524:	4b26      	ldr	r3, [pc, #152]	; (80055c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005526:	613b      	str	r3, [r7, #16]
 8005528:	e03e      	b.n	80055a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800552a:	4b23      	ldr	r3, [pc, #140]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 030c 	and.w	r3, r3, #12
 8005532:	2b0c      	cmp	r3, #12
 8005534:	d136      	bne.n	80055a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005536:	4b20      	ldr	r3, [pc, #128]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005540:	4b1d      	ldr	r3, [pc, #116]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	091b      	lsrs	r3, r3, #4
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	3301      	adds	r3, #1
 800554c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b03      	cmp	r3, #3
 8005552:	d10c      	bne.n	800556e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005554:	4a1a      	ldr	r2, [pc, #104]	; (80055c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	fbb2 f3f3 	udiv	r3, r2, r3
 800555c:	4a16      	ldr	r2, [pc, #88]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800555e:	68d2      	ldr	r2, [r2, #12]
 8005560:	0a12      	lsrs	r2, r2, #8
 8005562:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005566:	fb02 f303 	mul.w	r3, r2, r3
 800556a:	617b      	str	r3, [r7, #20]
      break;
 800556c:	e00c      	b.n	8005588 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800556e:	4a13      	ldr	r2, [pc, #76]	; (80055bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	fbb2 f3f3 	udiv	r3, r2, r3
 8005576:	4a10      	ldr	r2, [pc, #64]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005578:	68d2      	ldr	r2, [r2, #12]
 800557a:	0a12      	lsrs	r2, r2, #8
 800557c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005580:	fb02 f303 	mul.w	r3, r2, r3
 8005584:	617b      	str	r3, [r7, #20]
      break;
 8005586:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005588:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	0e5b      	lsrs	r3, r3, #25
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	3301      	adds	r3, #1
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a0:	613b      	str	r3, [r7, #16]
 80055a2:	e001      	b.n	80055a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80055a8:	693b      	ldr	r3, [r7, #16]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40021000 	.word	0x40021000
 80055bc:	00f42400 	.word	0x00f42400
 80055c0:	007a1200 	.word	0x007a1200

080055c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055c8:	4b03      	ldr	r3, [pc, #12]	; (80055d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80055ca:	681b      	ldr	r3, [r3, #0]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	20000010 	.word	0x20000010

080055dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055e0:	f7ff fff0 	bl	80055c4 <HAL_RCC_GetHCLKFreq>
 80055e4:	4602      	mov	r2, r0
 80055e6:	4b06      	ldr	r3, [pc, #24]	; (8005600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	0a1b      	lsrs	r3, r3, #8
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	4904      	ldr	r1, [pc, #16]	; (8005604 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055f2:	5ccb      	ldrb	r3, [r1, r3]
 80055f4:	f003 031f 	and.w	r3, r3, #31
 80055f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40021000 	.word	0x40021000
 8005604:	0800ee48 	.word	0x0800ee48

08005608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800560c:	f7ff ffda 	bl	80055c4 <HAL_RCC_GetHCLKFreq>
 8005610:	4602      	mov	r2, r0
 8005612:	4b06      	ldr	r3, [pc, #24]	; (800562c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	0adb      	lsrs	r3, r3, #11
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	4904      	ldr	r1, [pc, #16]	; (8005630 <HAL_RCC_GetPCLK2Freq+0x28>)
 800561e:	5ccb      	ldrb	r3, [r1, r3]
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005628:	4618      	mov	r0, r3
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40021000 	.word	0x40021000
 8005630:	0800ee48 	.word	0x0800ee48

08005634 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800563a:	4b1e      	ldr	r3, [pc, #120]	; (80056b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005644:	4b1b      	ldr	r3, [pc, #108]	; (80056b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	091b      	lsrs	r3, r3, #4
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	3301      	adds	r3, #1
 8005650:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	2b03      	cmp	r3, #3
 8005656:	d10c      	bne.n	8005672 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005658:	4a17      	ldr	r2, [pc, #92]	; (80056b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005660:	4a14      	ldr	r2, [pc, #80]	; (80056b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005662:	68d2      	ldr	r2, [r2, #12]
 8005664:	0a12      	lsrs	r2, r2, #8
 8005666:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800566a:	fb02 f303 	mul.w	r3, r2, r3
 800566e:	617b      	str	r3, [r7, #20]
    break;
 8005670:	e00c      	b.n	800568c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005672:	4a12      	ldr	r2, [pc, #72]	; (80056bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	fbb2 f3f3 	udiv	r3, r2, r3
 800567a:	4a0e      	ldr	r2, [pc, #56]	; (80056b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800567c:	68d2      	ldr	r2, [r2, #12]
 800567e:	0a12      	lsrs	r2, r2, #8
 8005680:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005684:	fb02 f303 	mul.w	r3, r2, r3
 8005688:	617b      	str	r3, [r7, #20]
    break;
 800568a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800568c:	4b09      	ldr	r3, [pc, #36]	; (80056b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	0e5b      	lsrs	r3, r3, #25
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	3301      	adds	r3, #1
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80056a6:	687b      	ldr	r3, [r7, #4]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	371c      	adds	r7, #28
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	40021000 	.word	0x40021000
 80056b8:	007a1200 	.word	0x007a1200
 80056bc:	00f42400 	.word	0x00f42400

080056c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056c8:	2300      	movs	r3, #0
 80056ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056cc:	2300      	movs	r3, #0
 80056ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 8098 	beq.w	800580e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056de:	2300      	movs	r3, #0
 80056e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056e2:	4b43      	ldr	r3, [pc, #268]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10d      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ee:	4b40      	ldr	r3, [pc, #256]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f2:	4a3f      	ldr	r2, [pc, #252]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f8:	6593      	str	r3, [r2, #88]	; 0x58
 80056fa:	4b3d      	ldr	r3, [pc, #244]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005702:	60bb      	str	r3, [r7, #8]
 8005704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005706:	2301      	movs	r3, #1
 8005708:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800570a:	4b3a      	ldr	r3, [pc, #232]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a39      	ldr	r2, [pc, #228]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005714:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005716:	f7fc ffe9 	bl	80026ec <HAL_GetTick>
 800571a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800571c:	e009      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800571e:	f7fc ffe5 	bl	80026ec <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d902      	bls.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	74fb      	strb	r3, [r7, #19]
        break;
 8005730:	e005      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005732:	4b30      	ldr	r3, [pc, #192]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0ef      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800573e:	7cfb      	ldrb	r3, [r7, #19]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d159      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005744:	4b2a      	ldr	r3, [pc, #168]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800574e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d01e      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	429a      	cmp	r2, r3
 800575e:	d019      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005760:	4b23      	ldr	r3, [pc, #140]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800576a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800576c:	4b20      	ldr	r3, [pc, #128]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005772:	4a1f      	ldr	r2, [pc, #124]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800577c:	4b1c      	ldr	r3, [pc, #112]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800577e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005782:	4a1b      	ldr	r2, [pc, #108]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800578c:	4a18      	ldr	r2, [pc, #96]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d016      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579e:	f7fc ffa5 	bl	80026ec <HAL_GetTick>
 80057a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057a4:	e00b      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057a6:	f7fc ffa1 	bl	80026ec <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d902      	bls.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	74fb      	strb	r3, [r7, #19]
            break;
 80057bc:	e006      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057be:	4b0c      	ldr	r3, [pc, #48]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0ec      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80057cc:	7cfb      	ldrb	r3, [r7, #19]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10b      	bne.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057d2:	4b07      	ldr	r3, [pc, #28]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	4903      	ldr	r1, [pc, #12]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80057e8:	e008      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057ea:	7cfb      	ldrb	r3, [r7, #19]
 80057ec:	74bb      	strb	r3, [r7, #18]
 80057ee:	e005      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80057f0:	40021000 	.word	0x40021000
 80057f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f8:	7cfb      	ldrb	r3, [r7, #19]
 80057fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057fc:	7c7b      	ldrb	r3, [r7, #17]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d105      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005802:	4ba6      	ldr	r3, [pc, #664]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005806:	4aa5      	ldr	r2, [pc, #660]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800580c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800581a:	4ba0      	ldr	r3, [pc, #640]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800581c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005820:	f023 0203 	bic.w	r2, r3, #3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	499c      	ldr	r1, [pc, #624]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00a      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800583c:	4b97      	ldr	r3, [pc, #604]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800583e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005842:	f023 020c 	bic.w	r2, r3, #12
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	4994      	ldr	r1, [pc, #592]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800584c:	4313      	orrs	r3, r2
 800584e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800585e:	4b8f      	ldr	r3, [pc, #572]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005864:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	498b      	ldr	r1, [pc, #556]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800586e:	4313      	orrs	r3, r2
 8005870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00a      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005880:	4b86      	ldr	r3, [pc, #536]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005886:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	4983      	ldr	r1, [pc, #524]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005890:	4313      	orrs	r3, r2
 8005892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00a      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058a2:	4b7e      	ldr	r3, [pc, #504]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	497a      	ldr	r1, [pc, #488]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00a      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058c4:	4b75      	ldr	r3, [pc, #468]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	4972      	ldr	r1, [pc, #456]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058e6:	4b6d      	ldr	r3, [pc, #436]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	4969      	ldr	r1, [pc, #420]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00a      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005908:	4b64      	ldr	r3, [pc, #400]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800590a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	4961      	ldr	r1, [pc, #388]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005918:	4313      	orrs	r3, r2
 800591a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800592a:	4b5c      	ldr	r3, [pc, #368]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800592c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005930:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	4958      	ldr	r1, [pc, #352]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800593a:	4313      	orrs	r3, r2
 800593c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005948:	2b00      	cmp	r3, #0
 800594a:	d015      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800594c:	4b53      	ldr	r3, [pc, #332]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800594e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005952:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595a:	4950      	ldr	r1, [pc, #320]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800595c:	4313      	orrs	r3, r2
 800595e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800596a:	d105      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800596c:	4b4b      	ldr	r3, [pc, #300]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	4a4a      	ldr	r2, [pc, #296]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005976:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005980:	2b00      	cmp	r3, #0
 8005982:	d015      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005984:	4b45      	ldr	r3, [pc, #276]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005992:	4942      	ldr	r1, [pc, #264]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059a2:	d105      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059a4:	4b3d      	ldr	r3, [pc, #244]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	4a3c      	ldr	r2, [pc, #240]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059ae:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d015      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059bc:	4b37      	ldr	r3, [pc, #220]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ca:	4934      	ldr	r1, [pc, #208]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059da:	d105      	bne.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059dc:	4b2f      	ldr	r3, [pc, #188]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	4a2e      	ldr	r2, [pc, #184]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d015      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059f4:	4b29      	ldr	r3, [pc, #164]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a02:	4926      	ldr	r1, [pc, #152]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a12:	d105      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a14:	4b21      	ldr	r3, [pc, #132]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	4a20      	ldr	r2, [pc, #128]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a1e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d015      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a2c:	4b1b      	ldr	r3, [pc, #108]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	4918      	ldr	r1, [pc, #96]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a4a:	d105      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a4c:	4b13      	ldr	r3, [pc, #76]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	4a12      	ldr	r2, [pc, #72]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d015      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a64:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a72:	490a      	ldr	r1, [pc, #40]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a82:	d105      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a84:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	4a04      	ldr	r2, [pc, #16]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005a90:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	40021000 	.word	0x40021000

08005aa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e09d      	b.n	8005bee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d108      	bne.n	8005acc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ac2:	d009      	beq.n	8005ad8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	61da      	str	r2, [r3, #28]
 8005aca:	e005      	b.n	8005ad8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d106      	bne.n	8005af8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fb fe18 	bl	8001728 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b18:	d902      	bls.n	8005b20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	e002      	b.n	8005b26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b2e:	d007      	beq.n	8005b40 <HAL_SPI_Init+0xa0>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b38:	d002      	beq.n	8005b40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b82:	ea42 0103 	orr.w	r1, r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	0c1b      	lsrs	r3, r3, #16
 8005b9c:	f003 0204 	and.w	r2, r3, #4
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	f003 0310 	and.w	r3, r3, #16
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005bbc:	ea42 0103 	orr.w	r1, r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69da      	ldr	r2, [r3, #28]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b08a      	sub	sp, #40	; 0x28
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	607a      	str	r2, [r7, #4]
 8005c02:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c04:	2301      	movs	r3, #1
 8005c06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_SPI_TransmitReceive+0x26>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e1fb      	b.n	8006014 <HAL_SPI_TransmitReceive+0x41e>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c24:	f7fc fd62 	bl	80026ec <HAL_GetTick>
 8005c28:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c30:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005c38:	887b      	ldrh	r3, [r7, #2]
 8005c3a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005c3c:	887b      	ldrh	r3, [r7, #2]
 8005c3e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c40:	7efb      	ldrb	r3, [r7, #27]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d00e      	beq.n	8005c64 <HAL_SPI_TransmitReceive+0x6e>
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c4c:	d106      	bne.n	8005c5c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d102      	bne.n	8005c5c <HAL_SPI_TransmitReceive+0x66>
 8005c56:	7efb      	ldrb	r3, [r7, #27]
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d003      	beq.n	8005c64 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005c62:	e1cd      	b.n	8006000 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d005      	beq.n	8005c76 <HAL_SPI_TransmitReceive+0x80>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <HAL_SPI_TransmitReceive+0x80>
 8005c70:	887b      	ldrh	r3, [r7, #2]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d103      	bne.n	8005c7e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005c7c:	e1c0      	b.n	8006000 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d003      	beq.n	8005c92 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2205      	movs	r2, #5
 8005c8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	887a      	ldrh	r2, [r7, #2]
 8005ca2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	887a      	ldrh	r2, [r7, #2]
 8005caa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	887a      	ldrh	r2, [r7, #2]
 8005cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	887a      	ldrh	r2, [r7, #2]
 8005cbe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cd4:	d802      	bhi.n	8005cdc <HAL_SPI_TransmitReceive+0xe6>
 8005cd6:	8a3b      	ldrh	r3, [r7, #16]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d908      	bls.n	8005cee <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cea:	605a      	str	r2, [r3, #4]
 8005cec:	e007      	b.n	8005cfe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cfc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d08:	2b40      	cmp	r3, #64	; 0x40
 8005d0a:	d007      	beq.n	8005d1c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d24:	d97c      	bls.n	8005e20 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <HAL_SPI_TransmitReceive+0x13e>
 8005d2e:	8a7b      	ldrh	r3, [r7, #18]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d169      	bne.n	8005e08 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d38:	881a      	ldrh	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	1c9a      	adds	r2, r3, #2
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d58:	e056      	b.n	8005e08 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d11b      	bne.n	8005da0 <HAL_SPI_TransmitReceive+0x1aa>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d016      	beq.n	8005da0 <HAL_SPI_TransmitReceive+0x1aa>
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d113      	bne.n	8005da0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	881a      	ldrh	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	1c9a      	adds	r2, r3, #2
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d11c      	bne.n	8005de8 <HAL_SPI_TransmitReceive+0x1f2>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d016      	beq.n	8005de8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68da      	ldr	r2, [r3, #12]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc4:	b292      	uxth	r2, r2
 8005dc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dcc:	1c9a      	adds	r2, r3, #2
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005de4:	2301      	movs	r3, #1
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005de8:	f7fc fc80 	bl	80026ec <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d807      	bhi.n	8005e08 <HAL_SPI_TransmitReceive+0x212>
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfe:	d003      	beq.n	8005e08 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005e06:	e0fb      	b.n	8006000 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1a3      	bne.n	8005d5a <HAL_SPI_TransmitReceive+0x164>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d19d      	bne.n	8005d5a <HAL_SPI_TransmitReceive+0x164>
 8005e1e:	e0df      	b.n	8005fe0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <HAL_SPI_TransmitReceive+0x23a>
 8005e28:	8a7b      	ldrh	r3, [r7, #18]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	f040 80cb 	bne.w	8005fc6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d912      	bls.n	8005e60 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3e:	881a      	ldrh	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4a:	1c9a      	adds	r2, r3, #2
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	3b02      	subs	r3, #2
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e5e:	e0b2      	b.n	8005fc6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	330c      	adds	r3, #12
 8005e6a:	7812      	ldrb	r2, [r2, #0]
 8005e6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e86:	e09e      	b.n	8005fc6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d134      	bne.n	8005f00 <HAL_SPI_TransmitReceive+0x30a>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d02f      	beq.n	8005f00 <HAL_SPI_TransmitReceive+0x30a>
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d12c      	bne.n	8005f00 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d912      	bls.n	8005ed6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	881a      	ldrh	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec0:	1c9a      	adds	r2, r3, #2
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	3b02      	subs	r3, #2
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ed4:	e012      	b.n	8005efc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	330c      	adds	r3, #12
 8005ee0:	7812      	ldrb	r2, [r2, #0]
 8005ee2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d148      	bne.n	8005fa0 <HAL_SPI_TransmitReceive+0x3aa>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d042      	beq.n	8005fa0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d923      	bls.n	8005f6e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	b292      	uxth	r2, r2
 8005f32:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	1c9a      	adds	r2, r3, #2
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	3b02      	subs	r3, #2
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d81f      	bhi.n	8005f9c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f6a:	605a      	str	r2, [r3, #4]
 8005f6c:	e016      	b.n	8005f9c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f103 020c 	add.w	r2, r3, #12
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	7812      	ldrb	r2, [r2, #0]
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005fa0:	f7fc fba4 	bl	80026ec <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d803      	bhi.n	8005fb8 <HAL_SPI_TransmitReceive+0x3c2>
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb6:	d102      	bne.n	8005fbe <HAL_SPI_TransmitReceive+0x3c8>
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d103      	bne.n	8005fc6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005fc4:	e01c      	b.n	8006000 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f47f af5b 	bne.w	8005e88 <HAL_SPI_TransmitReceive+0x292>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f47f af54 	bne.w	8005e88 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fe0:	69fa      	ldr	r2, [r7, #28]
 8005fe2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 f937 	bl	8006258 <SPI_EndRxTxTransaction>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d006      	beq.n	8005ffe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	661a      	str	r2, [r3, #96]	; 0x60
 8005ffc:	e000      	b.n	8006000 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005ffe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006010:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006014:	4618      	mov	r0, r3
 8006016:	3728      	adds	r7, #40	; 0x28
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b088      	sub	sp, #32
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	603b      	str	r3, [r7, #0]
 8006028:	4613      	mov	r3, r2
 800602a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800602c:	f7fc fb5e 	bl	80026ec <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006034:	1a9b      	subs	r3, r3, r2
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	4413      	add	r3, r2
 800603a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800603c:	f7fc fb56 	bl	80026ec <HAL_GetTick>
 8006040:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006042:	4b39      	ldr	r3, [pc, #228]	; (8006128 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	015b      	lsls	r3, r3, #5
 8006048:	0d1b      	lsrs	r3, r3, #20
 800604a:	69fa      	ldr	r2, [r7, #28]
 800604c:	fb02 f303 	mul.w	r3, r2, r3
 8006050:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006052:	e054      	b.n	80060fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605a:	d050      	beq.n	80060fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800605c:	f7fc fb46 	bl	80026ec <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	429a      	cmp	r2, r3
 800606a:	d902      	bls.n	8006072 <SPI_WaitFlagStateUntilTimeout+0x56>
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d13d      	bne.n	80060ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006080:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800608a:	d111      	bne.n	80060b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006094:	d004      	beq.n	80060a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800609e:	d107      	bne.n	80060b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060b8:	d10f      	bne.n	80060da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e017      	b.n	800611e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689a      	ldr	r2, [r3, #8]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	4013      	ands	r3, r2
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	429a      	cmp	r2, r3
 800610c:	bf0c      	ite	eq
 800610e:	2301      	moveq	r3, #1
 8006110:	2300      	movne	r3, #0
 8006112:	b2db      	uxtb	r3, r3
 8006114:	461a      	mov	r2, r3
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	429a      	cmp	r2, r3
 800611a:	d19b      	bne.n	8006054 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3720      	adds	r7, #32
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20000010 	.word	0x20000010

0800612c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08a      	sub	sp, #40	; 0x28
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800613a:	2300      	movs	r3, #0
 800613c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800613e:	f7fc fad5 	bl	80026ec <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006146:	1a9b      	subs	r3, r3, r2
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	4413      	add	r3, r2
 800614c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800614e:	f7fc facd 	bl	80026ec <HAL_GetTick>
 8006152:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	330c      	adds	r3, #12
 800615a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800615c:	4b3d      	ldr	r3, [pc, #244]	; (8006254 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	4613      	mov	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	00da      	lsls	r2, r3, #3
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	0d1b      	lsrs	r3, r3, #20
 800616c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800616e:	fb02 f303 	mul.w	r3, r2, r3
 8006172:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006174:	e060      	b.n	8006238 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800617c:	d107      	bne.n	800618e <SPI_WaitFifoStateUntilTimeout+0x62>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d104      	bne.n	800618e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	b2db      	uxtb	r3, r3
 800618a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800618c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006194:	d050      	beq.n	8006238 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006196:	f7fc faa9 	bl	80026ec <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d902      	bls.n	80061ac <SPI_WaitFifoStateUntilTimeout+0x80>
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d13d      	bne.n	8006228 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061c4:	d111      	bne.n	80061ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ce:	d004      	beq.n	80061da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d8:	d107      	bne.n	80061ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061f2:	d10f      	bne.n	8006214 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006212:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e010      	b.n	800624a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	3b01      	subs	r3, #1
 8006236:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689a      	ldr	r2, [r3, #8]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	4013      	ands	r3, r2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	429a      	cmp	r2, r3
 8006246:	d196      	bne.n	8006176 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3728      	adds	r7, #40	; 0x28
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	20000010 	.word	0x20000010

08006258 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af02      	add	r7, sp, #8
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2200      	movs	r2, #0
 800626c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f7ff ff5b 	bl	800612c <SPI_WaitFifoStateUntilTimeout>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d007      	beq.n	800628c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006280:	f043 0220 	orr.w	r2, r3, #32
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e027      	b.n	80062dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2200      	movs	r2, #0
 8006294:	2180      	movs	r1, #128	; 0x80
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f7ff fec0 	bl	800601c <SPI_WaitFlagStateUntilTimeout>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d007      	beq.n	80062b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a6:	f043 0220 	orr.w	r2, r3, #32
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e014      	b.n	80062dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f7ff ff34 	bl	800612c <SPI_WaitFifoStateUntilTimeout>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d007      	beq.n	80062da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ce:	f043 0220 	orr.w	r2, r3, #32
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e000      	b.n	80062dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e049      	b.n	800638a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d106      	bne.n	8006310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7fb ffde 	bl	80022cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3304      	adds	r3, #4
 8006320:	4619      	mov	r1, r3
 8006322:	4610      	mov	r0, r2
 8006324:	f000 fe8c 	bl	8007040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b082      	sub	sp, #8
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e049      	b.n	8006438 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d106      	bne.n	80063be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f841 	bl	8006440 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2202      	movs	r2, #2
 80063c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	3304      	adds	r3, #4
 80063ce:	4619      	mov	r1, r3
 80063d0:	4610      	mov	r0, r2
 80063d2:	f000 fe35 	bl	8007040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e049      	b.n	80064fa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d106      	bne.n	8006480 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f841 	bl	8006502 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3304      	adds	r3, #4
 8006490:	4619      	mov	r1, r3
 8006492:	4610      	mov	r0, r2
 8006494:	f000 fdd4 	bl	8007040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006502:	b480      	push	{r7}
 8006504:	b083      	sub	sp, #12
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
	...

08006518 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d104      	bne.n	8006536 <HAL_TIM_IC_Start_IT+0x1e>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006532:	b2db      	uxtb	r3, r3
 8006534:	e023      	b.n	800657e <HAL_TIM_IC_Start_IT+0x66>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b04      	cmp	r3, #4
 800653a:	d104      	bne.n	8006546 <HAL_TIM_IC_Start_IT+0x2e>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006542:	b2db      	uxtb	r3, r3
 8006544:	e01b      	b.n	800657e <HAL_TIM_IC_Start_IT+0x66>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b08      	cmp	r3, #8
 800654a:	d104      	bne.n	8006556 <HAL_TIM_IC_Start_IT+0x3e>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006552:	b2db      	uxtb	r3, r3
 8006554:	e013      	b.n	800657e <HAL_TIM_IC_Start_IT+0x66>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b0c      	cmp	r3, #12
 800655a:	d104      	bne.n	8006566 <HAL_TIM_IC_Start_IT+0x4e>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006562:	b2db      	uxtb	r3, r3
 8006564:	e00b      	b.n	800657e <HAL_TIM_IC_Start_IT+0x66>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b10      	cmp	r3, #16
 800656a:	d104      	bne.n	8006576 <HAL_TIM_IC_Start_IT+0x5e>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006572:	b2db      	uxtb	r3, r3
 8006574:	e003      	b.n	800657e <HAL_TIM_IC_Start_IT+0x66>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800657c:	b2db      	uxtb	r3, r3
 800657e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d104      	bne.n	8006590 <HAL_TIM_IC_Start_IT+0x78>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800658c:	b2db      	uxtb	r3, r3
 800658e:	e013      	b.n	80065b8 <HAL_TIM_IC_Start_IT+0xa0>
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	2b04      	cmp	r3, #4
 8006594:	d104      	bne.n	80065a0 <HAL_TIM_IC_Start_IT+0x88>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800659c:	b2db      	uxtb	r3, r3
 800659e:	e00b      	b.n	80065b8 <HAL_TIM_IC_Start_IT+0xa0>
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	2b08      	cmp	r3, #8
 80065a4:	d104      	bne.n	80065b0 <HAL_TIM_IC_Start_IT+0x98>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	e003      	b.n	80065b8 <HAL_TIM_IC_Start_IT+0xa0>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80065ba:	7bbb      	ldrb	r3, [r7, #14]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d102      	bne.n	80065c6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80065c0:	7b7b      	ldrb	r3, [r7, #13]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d001      	beq.n	80065ca <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e0d8      	b.n	800677c <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d104      	bne.n	80065da <HAL_TIM_IC_Start_IT+0xc2>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065d8:	e023      	b.n	8006622 <HAL_TIM_IC_Start_IT+0x10a>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b04      	cmp	r3, #4
 80065de:	d104      	bne.n	80065ea <HAL_TIM_IC_Start_IT+0xd2>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065e8:	e01b      	b.n	8006622 <HAL_TIM_IC_Start_IT+0x10a>
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b08      	cmp	r3, #8
 80065ee:	d104      	bne.n	80065fa <HAL_TIM_IC_Start_IT+0xe2>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065f8:	e013      	b.n	8006622 <HAL_TIM_IC_Start_IT+0x10a>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b0c      	cmp	r3, #12
 80065fe:	d104      	bne.n	800660a <HAL_TIM_IC_Start_IT+0xf2>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006608:	e00b      	b.n	8006622 <HAL_TIM_IC_Start_IT+0x10a>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b10      	cmp	r3, #16
 800660e:	d104      	bne.n	800661a <HAL_TIM_IC_Start_IT+0x102>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006618:	e003      	b.n	8006622 <HAL_TIM_IC_Start_IT+0x10a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2202      	movs	r2, #2
 800661e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d104      	bne.n	8006632 <HAL_TIM_IC_Start_IT+0x11a>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006630:	e013      	b.n	800665a <HAL_TIM_IC_Start_IT+0x142>
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	2b04      	cmp	r3, #4
 8006636:	d104      	bne.n	8006642 <HAL_TIM_IC_Start_IT+0x12a>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006640:	e00b      	b.n	800665a <HAL_TIM_IC_Start_IT+0x142>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b08      	cmp	r3, #8
 8006646:	d104      	bne.n	8006652 <HAL_TIM_IC_Start_IT+0x13a>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006650:	e003      	b.n	800665a <HAL_TIM_IC_Start_IT+0x142>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2202      	movs	r2, #2
 8006656:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b0c      	cmp	r3, #12
 800665e:	d841      	bhi.n	80066e4 <HAL_TIM_IC_Start_IT+0x1cc>
 8006660:	a201      	add	r2, pc, #4	; (adr r2, 8006668 <HAL_TIM_IC_Start_IT+0x150>)
 8006662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006666:	bf00      	nop
 8006668:	0800669d 	.word	0x0800669d
 800666c:	080066e5 	.word	0x080066e5
 8006670:	080066e5 	.word	0x080066e5
 8006674:	080066e5 	.word	0x080066e5
 8006678:	080066af 	.word	0x080066af
 800667c:	080066e5 	.word	0x080066e5
 8006680:	080066e5 	.word	0x080066e5
 8006684:	080066e5 	.word	0x080066e5
 8006688:	080066c1 	.word	0x080066c1
 800668c:	080066e5 	.word	0x080066e5
 8006690:	080066e5 	.word	0x080066e5
 8006694:	080066e5 	.word	0x080066e5
 8006698:	080066d3 	.word	0x080066d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0202 	orr.w	r2, r2, #2
 80066aa:	60da      	str	r2, [r3, #12]
      break;
 80066ac:	e01d      	b.n	80066ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68da      	ldr	r2, [r3, #12]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0204 	orr.w	r2, r2, #4
 80066bc:	60da      	str	r2, [r3, #12]
      break;
 80066be:	e014      	b.n	80066ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0208 	orr.w	r2, r2, #8
 80066ce:	60da      	str	r2, [r3, #12]
      break;
 80066d0:	e00b      	b.n	80066ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f042 0210 	orr.w	r2, r2, #16
 80066e0:	60da      	str	r2, [r3, #12]
      break;
 80066e2:	e002      	b.n	80066ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	73fb      	strb	r3, [r7, #15]
      break;
 80066e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d144      	bne.n	800677a <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2201      	movs	r2, #1
 80066f6:	6839      	ldr	r1, [r7, #0]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f001 f9e1 	bl	8007ac0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a20      	ldr	r2, [pc, #128]	; (8006784 <HAL_TIM_IC_Start_IT+0x26c>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d018      	beq.n	800673a <HAL_TIM_IC_Start_IT+0x222>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006710:	d013      	beq.n	800673a <HAL_TIM_IC_Start_IT+0x222>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a1c      	ldr	r2, [pc, #112]	; (8006788 <HAL_TIM_IC_Start_IT+0x270>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d00e      	beq.n	800673a <HAL_TIM_IC_Start_IT+0x222>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a1a      	ldr	r2, [pc, #104]	; (800678c <HAL_TIM_IC_Start_IT+0x274>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d009      	beq.n	800673a <HAL_TIM_IC_Start_IT+0x222>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a19      	ldr	r2, [pc, #100]	; (8006790 <HAL_TIM_IC_Start_IT+0x278>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d004      	beq.n	800673a <HAL_TIM_IC_Start_IT+0x222>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a17      	ldr	r2, [pc, #92]	; (8006794 <HAL_TIM_IC_Start_IT+0x27c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d115      	bne.n	8006766 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	4b15      	ldr	r3, [pc, #84]	; (8006798 <HAL_TIM_IC_Start_IT+0x280>)
 8006742:	4013      	ands	r3, r2
 8006744:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	2b06      	cmp	r3, #6
 800674a:	d015      	beq.n	8006778 <HAL_TIM_IC_Start_IT+0x260>
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006752:	d011      	beq.n	8006778 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0201 	orr.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006764:	e008      	b.n	8006778 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f042 0201 	orr.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	e000      	b.n	800677a <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006778:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800677a:	7bfb      	ldrb	r3, [r7, #15]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	40012c00 	.word	0x40012c00
 8006788:	40000400 	.word	0x40000400
 800678c:	40000800 	.word	0x40000800
 8006790:	40013400 	.word	0x40013400
 8006794:	40014000 	.word	0x40014000
 8006798:	00010007 	.word	0x00010007

0800679c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d122      	bne.n	80067f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d11b      	bne.n	80067f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f06f 0202 	mvn.w	r2, #2
 80067c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	f003 0303 	and.w	r3, r3, #3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7fa fdde 	bl	80013a0 <HAL_TIM_IC_CaptureCallback>
 80067e4:	e005      	b.n	80067f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fc0c 	bl	8007004 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fc13 	bl	8007018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	f003 0304 	and.w	r3, r3, #4
 8006802:	2b04      	cmp	r3, #4
 8006804:	d122      	bne.n	800684c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b04      	cmp	r3, #4
 8006812:	d11b      	bne.n	800684c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f06f 0204 	mvn.w	r2, #4
 800681c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2202      	movs	r2, #2
 8006822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7fa fdb4 	bl	80013a0 <HAL_TIM_IC_CaptureCallback>
 8006838:	e005      	b.n	8006846 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fbe2 	bl	8007004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fbe9 	bl	8007018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	f003 0308 	and.w	r3, r3, #8
 8006856:	2b08      	cmp	r3, #8
 8006858:	d122      	bne.n	80068a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f003 0308 	and.w	r3, r3, #8
 8006864:	2b08      	cmp	r3, #8
 8006866:	d11b      	bne.n	80068a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f06f 0208 	mvn.w	r2, #8
 8006870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2204      	movs	r2, #4
 8006876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	f003 0303 	and.w	r3, r3, #3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7fa fd8a 	bl	80013a0 <HAL_TIM_IC_CaptureCallback>
 800688c:	e005      	b.n	800689a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fbb8 	bl	8007004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fbbf 	bl	8007018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	f003 0310 	and.w	r3, r3, #16
 80068aa:	2b10      	cmp	r3, #16
 80068ac:	d122      	bne.n	80068f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	f003 0310 	and.w	r3, r3, #16
 80068b8:	2b10      	cmp	r3, #16
 80068ba:	d11b      	bne.n	80068f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f06f 0210 	mvn.w	r2, #16
 80068c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2208      	movs	r2, #8
 80068ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7fa fd60 	bl	80013a0 <HAL_TIM_IC_CaptureCallback>
 80068e0:	e005      	b.n	80068ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fb8e 	bl	8007004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fb95 	bl	8007018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d10e      	bne.n	8006920 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b01      	cmp	r3, #1
 800690e:	d107      	bne.n	8006920 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f06f 0201 	mvn.w	r2, #1
 8006918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fb68 	bl	8006ff0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692a:	2b80      	cmp	r3, #128	; 0x80
 800692c:	d10e      	bne.n	800694c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006938:	2b80      	cmp	r3, #128	; 0x80
 800693a:	d107      	bne.n	800694c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f001 fa0c 	bl	8007d64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800695a:	d10e      	bne.n	800697a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006966:	2b80      	cmp	r3, #128	; 0x80
 8006968:	d107      	bne.n	800697a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f001 f9ff 	bl	8007d78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006984:	2b40      	cmp	r3, #64	; 0x40
 8006986:	d10e      	bne.n	80069a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006992:	2b40      	cmp	r3, #64	; 0x40
 8006994:	d107      	bne.n	80069a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800699e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fb43 	bl	800702c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	d10e      	bne.n	80069d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f003 0320 	and.w	r3, r3, #32
 80069be:	2b20      	cmp	r3, #32
 80069c0:	d107      	bne.n	80069d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f06f 0220 	mvn.w	r2, #32
 80069ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f001 f9bf 	bl	8007d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069e0:	d10f      	bne.n	8006a02 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069f0:	d107      	bne.n	8006a02 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80069fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 f9c5 	bl	8007d8c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a10:	d10f      	bne.n	8006a32 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a20:	d107      	bne.n	8006a32 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 f9b7 	bl	8007da0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a40:	d10f      	bne.n	8006a62 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a50:	d107      	bne.n	8006a62 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 f9a9 	bl	8007db4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a70:	d10f      	bne.n	8006a92 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a80:	d107      	bne.n	8006a92 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f001 f99b 	bl	8007dc8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a92:	bf00      	nop
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b086      	sub	sp, #24
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d101      	bne.n	8006ab8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e088      	b.n	8006bca <HAL_TIM_IC_ConfigChannel+0x130>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d11b      	bne.n	8006afe <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6818      	ldr	r0, [r3, #0]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	6819      	ldr	r1, [r3, #0]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	f000 fe39 	bl	800774c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	699a      	ldr	r2, [r3, #24]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 020c 	bic.w	r2, r2, #12
 8006ae8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6999      	ldr	r1, [r3, #24]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	619a      	str	r2, [r3, #24]
 8006afc:	e060      	b.n	8006bc0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	d11c      	bne.n	8006b3e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6818      	ldr	r0, [r3, #0]
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	6819      	ldr	r1, [r3, #0]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f000 feb1 	bl	800787a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699a      	ldr	r2, [r3, #24]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b26:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6999      	ldr	r1, [r3, #24]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	021a      	lsls	r2, r3, #8
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	619a      	str	r2, [r3, #24]
 8006b3c:	e040      	b.n	8006bc0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b08      	cmp	r3, #8
 8006b42:	d11b      	bne.n	8006b7c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6818      	ldr	r0, [r3, #0]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	6819      	ldr	r1, [r3, #0]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f000 fefe 	bl	8007954 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	69da      	ldr	r2, [r3, #28]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 020c 	bic.w	r2, r2, #12
 8006b66:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	69d9      	ldr	r1, [r3, #28]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	689a      	ldr	r2, [r3, #8]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	61da      	str	r2, [r3, #28]
 8006b7a:	e021      	b.n	8006bc0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b0c      	cmp	r3, #12
 8006b80:	d11c      	bne.n	8006bbc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6818      	ldr	r0, [r3, #0]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	6819      	ldr	r1, [r3, #0]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f000 ff1b 	bl	80079cc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	69da      	ldr	r2, [r3, #28]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ba4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	69d9      	ldr	r1, [r3, #28]
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	021a      	lsls	r2, r3, #8
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	61da      	str	r2, [r3, #28]
 8006bba:	e001      	b.n	8006bc0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d101      	bne.n	8006bf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bee:	2302      	movs	r3, #2
 8006bf0:	e0ff      	b.n	8006df2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b14      	cmp	r3, #20
 8006bfe:	f200 80f0 	bhi.w	8006de2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006c02:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006c5d 	.word	0x08006c5d
 8006c0c:	08006de3 	.word	0x08006de3
 8006c10:	08006de3 	.word	0x08006de3
 8006c14:	08006de3 	.word	0x08006de3
 8006c18:	08006c9d 	.word	0x08006c9d
 8006c1c:	08006de3 	.word	0x08006de3
 8006c20:	08006de3 	.word	0x08006de3
 8006c24:	08006de3 	.word	0x08006de3
 8006c28:	08006cdf 	.word	0x08006cdf
 8006c2c:	08006de3 	.word	0x08006de3
 8006c30:	08006de3 	.word	0x08006de3
 8006c34:	08006de3 	.word	0x08006de3
 8006c38:	08006d1f 	.word	0x08006d1f
 8006c3c:	08006de3 	.word	0x08006de3
 8006c40:	08006de3 	.word	0x08006de3
 8006c44:	08006de3 	.word	0x08006de3
 8006c48:	08006d61 	.word	0x08006d61
 8006c4c:	08006de3 	.word	0x08006de3
 8006c50:	08006de3 	.word	0x08006de3
 8006c54:	08006de3 	.word	0x08006de3
 8006c58:	08006da1 	.word	0x08006da1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68b9      	ldr	r1, [r7, #8]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 fa7c 	bl	8007160 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	699a      	ldr	r2, [r3, #24]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0208 	orr.w	r2, r2, #8
 8006c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699a      	ldr	r2, [r3, #24]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0204 	bic.w	r2, r2, #4
 8006c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6999      	ldr	r1, [r3, #24]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	691a      	ldr	r2, [r3, #16]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	619a      	str	r2, [r3, #24]
      break;
 8006c9a:	e0a5      	b.n	8006de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68b9      	ldr	r1, [r7, #8]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 faec 	bl	8007280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	699a      	ldr	r2, [r3, #24]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	699a      	ldr	r2, [r3, #24]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	6999      	ldr	r1, [r3, #24]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	021a      	lsls	r2, r3, #8
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	619a      	str	r2, [r3, #24]
      break;
 8006cdc:	e084      	b.n	8006de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 fb55 	bl	8007394 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	69da      	ldr	r2, [r3, #28]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f042 0208 	orr.w	r2, r2, #8
 8006cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	69da      	ldr	r2, [r3, #28]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 0204 	bic.w	r2, r2, #4
 8006d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	69d9      	ldr	r1, [r3, #28]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	691a      	ldr	r2, [r3, #16]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	61da      	str	r2, [r3, #28]
      break;
 8006d1c:	e064      	b.n	8006de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68b9      	ldr	r1, [r7, #8]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fbbd 	bl	80074a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	69da      	ldr	r2, [r3, #28]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	69da      	ldr	r2, [r3, #28]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	69d9      	ldr	r1, [r3, #28]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	021a      	lsls	r2, r3, #8
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	61da      	str	r2, [r3, #28]
      break;
 8006d5e:	e043      	b.n	8006de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68b9      	ldr	r1, [r7, #8]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f000 fc26 	bl	80075b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0208 	orr.w	r2, r2, #8
 8006d7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 0204 	bic.w	r2, r2, #4
 8006d8a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	691a      	ldr	r2, [r3, #16]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006d9e:	e023      	b.n	8006de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68b9      	ldr	r1, [r7, #8]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 fc6a 	bl	8007680 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	021a      	lsls	r2, r3, #8
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006de0:	e002      	b.n	8006de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	75fb      	strb	r3, [r7, #23]
      break;
 8006de6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop

08006dfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d101      	bne.n	8006e18 <HAL_TIM_ConfigClockSource+0x1c>
 8006e14:	2302      	movs	r3, #2
 8006e16:	e0de      	b.n	8006fd6 <HAL_TIM_ConfigClockSource+0x1da>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006e36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a63      	ldr	r2, [pc, #396]	; (8006fe0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	f000 80a9 	beq.w	8006faa <HAL_TIM_ConfigClockSource+0x1ae>
 8006e58:	4a61      	ldr	r2, [pc, #388]	; (8006fe0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	f200 80ae 	bhi.w	8006fbc <HAL_TIM_ConfigClockSource+0x1c0>
 8006e60:	4a60      	ldr	r2, [pc, #384]	; (8006fe4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	f000 80a1 	beq.w	8006faa <HAL_TIM_ConfigClockSource+0x1ae>
 8006e68:	4a5e      	ldr	r2, [pc, #376]	; (8006fe4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	f200 80a6 	bhi.w	8006fbc <HAL_TIM_ConfigClockSource+0x1c0>
 8006e70:	4a5d      	ldr	r2, [pc, #372]	; (8006fe8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	f000 8099 	beq.w	8006faa <HAL_TIM_ConfigClockSource+0x1ae>
 8006e78:	4a5b      	ldr	r2, [pc, #364]	; (8006fe8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	f200 809e 	bhi.w	8006fbc <HAL_TIM_ConfigClockSource+0x1c0>
 8006e80:	4a5a      	ldr	r2, [pc, #360]	; (8006fec <HAL_TIM_ConfigClockSource+0x1f0>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	f000 8091 	beq.w	8006faa <HAL_TIM_ConfigClockSource+0x1ae>
 8006e88:	4a58      	ldr	r2, [pc, #352]	; (8006fec <HAL_TIM_ConfigClockSource+0x1f0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	f200 8096 	bhi.w	8006fbc <HAL_TIM_ConfigClockSource+0x1c0>
 8006e90:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006e94:	f000 8089 	beq.w	8006faa <HAL_TIM_ConfigClockSource+0x1ae>
 8006e98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006e9c:	f200 808e 	bhi.w	8006fbc <HAL_TIM_ConfigClockSource+0x1c0>
 8006ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ea4:	d03e      	beq.n	8006f24 <HAL_TIM_ConfigClockSource+0x128>
 8006ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eaa:	f200 8087 	bhi.w	8006fbc <HAL_TIM_ConfigClockSource+0x1c0>
 8006eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb2:	f000 8086 	beq.w	8006fc2 <HAL_TIM_ConfigClockSource+0x1c6>
 8006eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eba:	d87f      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x1c0>
 8006ebc:	2b70      	cmp	r3, #112	; 0x70
 8006ebe:	d01a      	beq.n	8006ef6 <HAL_TIM_ConfigClockSource+0xfa>
 8006ec0:	2b70      	cmp	r3, #112	; 0x70
 8006ec2:	d87b      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x1c0>
 8006ec4:	2b60      	cmp	r3, #96	; 0x60
 8006ec6:	d050      	beq.n	8006f6a <HAL_TIM_ConfigClockSource+0x16e>
 8006ec8:	2b60      	cmp	r3, #96	; 0x60
 8006eca:	d877      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x1c0>
 8006ecc:	2b50      	cmp	r3, #80	; 0x50
 8006ece:	d03c      	beq.n	8006f4a <HAL_TIM_ConfigClockSource+0x14e>
 8006ed0:	2b50      	cmp	r3, #80	; 0x50
 8006ed2:	d873      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x1c0>
 8006ed4:	2b40      	cmp	r3, #64	; 0x40
 8006ed6:	d058      	beq.n	8006f8a <HAL_TIM_ConfigClockSource+0x18e>
 8006ed8:	2b40      	cmp	r3, #64	; 0x40
 8006eda:	d86f      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x1c0>
 8006edc:	2b30      	cmp	r3, #48	; 0x30
 8006ede:	d064      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x1ae>
 8006ee0:	2b30      	cmp	r3, #48	; 0x30
 8006ee2:	d86b      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x1c0>
 8006ee4:	2b20      	cmp	r3, #32
 8006ee6:	d060      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x1ae>
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d867      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x1c0>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d05c      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x1ae>
 8006ef0:	2b10      	cmp	r3, #16
 8006ef2:	d05a      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x1ae>
 8006ef4:	e062      	b.n	8006fbc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6818      	ldr	r0, [r3, #0]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	6899      	ldr	r1, [r3, #8]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f000 fdbb 	bl	8007a80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	609a      	str	r2, [r3, #8]
      break;
 8006f22:	e04f      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6818      	ldr	r0, [r3, #0]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	6899      	ldr	r1, [r3, #8]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f000 fda4 	bl	8007a80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f46:	609a      	str	r2, [r3, #8]
      break;
 8006f48:	e03c      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6818      	ldr	r0, [r3, #0]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	6859      	ldr	r1, [r3, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	461a      	mov	r2, r3
 8006f58:	f000 fc60 	bl	800781c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2150      	movs	r1, #80	; 0x50
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 fd6f 	bl	8007a46 <TIM_ITRx_SetConfig>
      break;
 8006f68:	e02c      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6818      	ldr	r0, [r3, #0]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	6859      	ldr	r1, [r3, #4]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	461a      	mov	r2, r3
 8006f78:	f000 fcbc 	bl	80078f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2160      	movs	r1, #96	; 0x60
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 fd5f 	bl	8007a46 <TIM_ITRx_SetConfig>
      break;
 8006f88:	e01c      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6818      	ldr	r0, [r3, #0]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	6859      	ldr	r1, [r3, #4]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	461a      	mov	r2, r3
 8006f98:	f000 fc40 	bl	800781c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2140      	movs	r1, #64	; 0x40
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 fd4f 	bl	8007a46 <TIM_ITRx_SetConfig>
      break;
 8006fa8:	e00c      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	f000 fd46 	bl	8007a46 <TIM_ITRx_SetConfig>
      break;
 8006fba:	e003      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc0:	e000      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006fc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	00100070 	.word	0x00100070
 8006fe4:	00100040 	.word	0x00100040
 8006fe8:	00100030 	.word	0x00100030
 8006fec:	00100020 	.word	0x00100020

08006ff0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a3c      	ldr	r2, [pc, #240]	; (8007144 <TIM_Base_SetConfig+0x104>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00f      	beq.n	8007078 <TIM_Base_SetConfig+0x38>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800705e:	d00b      	beq.n	8007078 <TIM_Base_SetConfig+0x38>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a39      	ldr	r2, [pc, #228]	; (8007148 <TIM_Base_SetConfig+0x108>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d007      	beq.n	8007078 <TIM_Base_SetConfig+0x38>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a38      	ldr	r2, [pc, #224]	; (800714c <TIM_Base_SetConfig+0x10c>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d003      	beq.n	8007078 <TIM_Base_SetConfig+0x38>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a37      	ldr	r2, [pc, #220]	; (8007150 <TIM_Base_SetConfig+0x110>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d108      	bne.n	800708a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	4313      	orrs	r3, r2
 8007088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a2d      	ldr	r2, [pc, #180]	; (8007144 <TIM_Base_SetConfig+0x104>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d01b      	beq.n	80070ca <TIM_Base_SetConfig+0x8a>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007098:	d017      	beq.n	80070ca <TIM_Base_SetConfig+0x8a>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a2a      	ldr	r2, [pc, #168]	; (8007148 <TIM_Base_SetConfig+0x108>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d013      	beq.n	80070ca <TIM_Base_SetConfig+0x8a>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a29      	ldr	r2, [pc, #164]	; (800714c <TIM_Base_SetConfig+0x10c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d00f      	beq.n	80070ca <TIM_Base_SetConfig+0x8a>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a28      	ldr	r2, [pc, #160]	; (8007150 <TIM_Base_SetConfig+0x110>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00b      	beq.n	80070ca <TIM_Base_SetConfig+0x8a>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a27      	ldr	r2, [pc, #156]	; (8007154 <TIM_Base_SetConfig+0x114>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d007      	beq.n	80070ca <TIM_Base_SetConfig+0x8a>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a26      	ldr	r2, [pc, #152]	; (8007158 <TIM_Base_SetConfig+0x118>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d003      	beq.n	80070ca <TIM_Base_SetConfig+0x8a>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a25      	ldr	r2, [pc, #148]	; (800715c <TIM_Base_SetConfig+0x11c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d108      	bne.n	80070dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	4313      	orrs	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a10      	ldr	r2, [pc, #64]	; (8007144 <TIM_Base_SetConfig+0x104>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d00f      	beq.n	8007128 <TIM_Base_SetConfig+0xe8>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a11      	ldr	r2, [pc, #68]	; (8007150 <TIM_Base_SetConfig+0x110>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d00b      	beq.n	8007128 <TIM_Base_SetConfig+0xe8>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a10      	ldr	r2, [pc, #64]	; (8007154 <TIM_Base_SetConfig+0x114>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d007      	beq.n	8007128 <TIM_Base_SetConfig+0xe8>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a0f      	ldr	r2, [pc, #60]	; (8007158 <TIM_Base_SetConfig+0x118>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d003      	beq.n	8007128 <TIM_Base_SetConfig+0xe8>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a0e      	ldr	r2, [pc, #56]	; (800715c <TIM_Base_SetConfig+0x11c>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d103      	bne.n	8007130 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	691a      	ldr	r2, [r3, #16]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	615a      	str	r2, [r3, #20]
}
 8007136:	bf00      	nop
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	40012c00 	.word	0x40012c00
 8007148:	40000400 	.word	0x40000400
 800714c:	40000800 	.word	0x40000800
 8007150:	40013400 	.word	0x40013400
 8007154:	40014000 	.word	0x40014000
 8007158:	40014400 	.word	0x40014400
 800715c:	40014800 	.word	0x40014800

08007160 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	f023 0201 	bic.w	r2, r3, #1
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800718e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 0303 	bic.w	r3, r3, #3
 800719a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f023 0302 	bic.w	r3, r3, #2
 80071ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a2c      	ldr	r2, [pc, #176]	; (800726c <TIM_OC1_SetConfig+0x10c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d00f      	beq.n	80071e0 <TIM_OC1_SetConfig+0x80>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a2b      	ldr	r2, [pc, #172]	; (8007270 <TIM_OC1_SetConfig+0x110>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d00b      	beq.n	80071e0 <TIM_OC1_SetConfig+0x80>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a2a      	ldr	r2, [pc, #168]	; (8007274 <TIM_OC1_SetConfig+0x114>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d007      	beq.n	80071e0 <TIM_OC1_SetConfig+0x80>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a29      	ldr	r2, [pc, #164]	; (8007278 <TIM_OC1_SetConfig+0x118>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d003      	beq.n	80071e0 <TIM_OC1_SetConfig+0x80>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a28      	ldr	r2, [pc, #160]	; (800727c <TIM_OC1_SetConfig+0x11c>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d10c      	bne.n	80071fa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f023 0308 	bic.w	r3, r3, #8
 80071e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f023 0304 	bic.w	r3, r3, #4
 80071f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a1b      	ldr	r2, [pc, #108]	; (800726c <TIM_OC1_SetConfig+0x10c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d00f      	beq.n	8007222 <TIM_OC1_SetConfig+0xc2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a1a      	ldr	r2, [pc, #104]	; (8007270 <TIM_OC1_SetConfig+0x110>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d00b      	beq.n	8007222 <TIM_OC1_SetConfig+0xc2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a19      	ldr	r2, [pc, #100]	; (8007274 <TIM_OC1_SetConfig+0x114>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d007      	beq.n	8007222 <TIM_OC1_SetConfig+0xc2>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a18      	ldr	r2, [pc, #96]	; (8007278 <TIM_OC1_SetConfig+0x118>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d003      	beq.n	8007222 <TIM_OC1_SetConfig+0xc2>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a17      	ldr	r2, [pc, #92]	; (800727c <TIM_OC1_SetConfig+0x11c>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d111      	bne.n	8007246 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	4313      	orrs	r3, r2
 800723a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	4313      	orrs	r3, r2
 8007244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	621a      	str	r2, [r3, #32]
}
 8007260:	bf00      	nop
 8007262:	371c      	adds	r7, #28
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	40012c00 	.word	0x40012c00
 8007270:	40013400 	.word	0x40013400
 8007274:	40014000 	.word	0x40014000
 8007278:	40014400 	.word	0x40014400
 800727c:	40014800 	.word	0x40014800

08007280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007280:	b480      	push	{r7}
 8007282:	b087      	sub	sp, #28
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	f023 0210 	bic.w	r2, r3, #16
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	021b      	lsls	r3, r3, #8
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	f023 0320 	bic.w	r3, r3, #32
 80072ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	011b      	lsls	r3, r3, #4
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	4313      	orrs	r3, r2
 80072da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a28      	ldr	r2, [pc, #160]	; (8007380 <TIM_OC2_SetConfig+0x100>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d003      	beq.n	80072ec <TIM_OC2_SetConfig+0x6c>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a27      	ldr	r2, [pc, #156]	; (8007384 <TIM_OC2_SetConfig+0x104>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d10d      	bne.n	8007308 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	011b      	lsls	r3, r3, #4
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007306:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a1d      	ldr	r2, [pc, #116]	; (8007380 <TIM_OC2_SetConfig+0x100>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d00f      	beq.n	8007330 <TIM_OC2_SetConfig+0xb0>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a1c      	ldr	r2, [pc, #112]	; (8007384 <TIM_OC2_SetConfig+0x104>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d00b      	beq.n	8007330 <TIM_OC2_SetConfig+0xb0>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a1b      	ldr	r2, [pc, #108]	; (8007388 <TIM_OC2_SetConfig+0x108>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d007      	beq.n	8007330 <TIM_OC2_SetConfig+0xb0>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a1a      	ldr	r2, [pc, #104]	; (800738c <TIM_OC2_SetConfig+0x10c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d003      	beq.n	8007330 <TIM_OC2_SetConfig+0xb0>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a19      	ldr	r2, [pc, #100]	; (8007390 <TIM_OC2_SetConfig+0x110>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d113      	bne.n	8007358 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007336:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800733e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	693a      	ldr	r2, [r7, #16]
 8007348:	4313      	orrs	r3, r2
 800734a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	4313      	orrs	r3, r2
 8007356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	621a      	str	r2, [r3, #32]
}
 8007372:	bf00      	nop
 8007374:	371c      	adds	r7, #28
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	40012c00 	.word	0x40012c00
 8007384:	40013400 	.word	0x40013400
 8007388:	40014000 	.word	0x40014000
 800738c:	40014400 	.word	0x40014400
 8007390:	40014800 	.word	0x40014800

08007394 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f023 0303 	bic.w	r3, r3, #3
 80073ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	021b      	lsls	r3, r3, #8
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a27      	ldr	r2, [pc, #156]	; (8007490 <TIM_OC3_SetConfig+0xfc>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d003      	beq.n	80073fe <TIM_OC3_SetConfig+0x6a>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a26      	ldr	r2, [pc, #152]	; (8007494 <TIM_OC3_SetConfig+0x100>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d10d      	bne.n	800741a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007404:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	021b      	lsls	r3, r3, #8
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	4313      	orrs	r3, r2
 8007410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a1c      	ldr	r2, [pc, #112]	; (8007490 <TIM_OC3_SetConfig+0xfc>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d00f      	beq.n	8007442 <TIM_OC3_SetConfig+0xae>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a1b      	ldr	r2, [pc, #108]	; (8007494 <TIM_OC3_SetConfig+0x100>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d00b      	beq.n	8007442 <TIM_OC3_SetConfig+0xae>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a1a      	ldr	r2, [pc, #104]	; (8007498 <TIM_OC3_SetConfig+0x104>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d007      	beq.n	8007442 <TIM_OC3_SetConfig+0xae>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a19      	ldr	r2, [pc, #100]	; (800749c <TIM_OC3_SetConfig+0x108>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d003      	beq.n	8007442 <TIM_OC3_SetConfig+0xae>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a18      	ldr	r2, [pc, #96]	; (80074a0 <TIM_OC3_SetConfig+0x10c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d113      	bne.n	800746a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	011b      	lsls	r3, r3, #4
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	4313      	orrs	r3, r2
 800745c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	011b      	lsls	r3, r3, #4
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	4313      	orrs	r3, r2
 8007468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	621a      	str	r2, [r3, #32]
}
 8007484:	bf00      	nop
 8007486:	371c      	adds	r7, #28
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	40012c00 	.word	0x40012c00
 8007494:	40013400 	.word	0x40013400
 8007498:	40014000 	.word	0x40014000
 800749c:	40014400 	.word	0x40014400
 80074a0:	40014800 	.word	0x40014800

080074a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	021b      	lsls	r3, r3, #8
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	031b      	lsls	r3, r3, #12
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a28      	ldr	r2, [pc, #160]	; (80075a4 <TIM_OC4_SetConfig+0x100>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d003      	beq.n	8007510 <TIM_OC4_SetConfig+0x6c>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a27      	ldr	r2, [pc, #156]	; (80075a8 <TIM_OC4_SetConfig+0x104>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d10d      	bne.n	800752c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	031b      	lsls	r3, r3, #12
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	4313      	orrs	r3, r2
 8007522:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800752a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a1d      	ldr	r2, [pc, #116]	; (80075a4 <TIM_OC4_SetConfig+0x100>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d00f      	beq.n	8007554 <TIM_OC4_SetConfig+0xb0>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a1c      	ldr	r2, [pc, #112]	; (80075a8 <TIM_OC4_SetConfig+0x104>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d00b      	beq.n	8007554 <TIM_OC4_SetConfig+0xb0>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a1b      	ldr	r2, [pc, #108]	; (80075ac <TIM_OC4_SetConfig+0x108>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d007      	beq.n	8007554 <TIM_OC4_SetConfig+0xb0>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a1a      	ldr	r2, [pc, #104]	; (80075b0 <TIM_OC4_SetConfig+0x10c>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d003      	beq.n	8007554 <TIM_OC4_SetConfig+0xb0>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a19      	ldr	r2, [pc, #100]	; (80075b4 <TIM_OC4_SetConfig+0x110>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d113      	bne.n	800757c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800755a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007562:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	019b      	lsls	r3, r3, #6
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	4313      	orrs	r3, r2
 800756e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	019b      	lsls	r3, r3, #6
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	4313      	orrs	r3, r2
 800757a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	621a      	str	r2, [r3, #32]
}
 8007596:	bf00      	nop
 8007598:	371c      	adds	r7, #28
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	40012c00 	.word	0x40012c00
 80075a8:	40013400 	.word	0x40013400
 80075ac:	40014000 	.word	0x40014000
 80075b0:	40014400 	.word	0x40014400
 80075b4:	40014800 	.word	0x40014800

080075b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80075fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	041b      	lsls	r3, r3, #16
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	4313      	orrs	r3, r2
 8007608:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a17      	ldr	r2, [pc, #92]	; (800766c <TIM_OC5_SetConfig+0xb4>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d00f      	beq.n	8007632 <TIM_OC5_SetConfig+0x7a>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a16      	ldr	r2, [pc, #88]	; (8007670 <TIM_OC5_SetConfig+0xb8>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d00b      	beq.n	8007632 <TIM_OC5_SetConfig+0x7a>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a15      	ldr	r2, [pc, #84]	; (8007674 <TIM_OC5_SetConfig+0xbc>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d007      	beq.n	8007632 <TIM_OC5_SetConfig+0x7a>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a14      	ldr	r2, [pc, #80]	; (8007678 <TIM_OC5_SetConfig+0xc0>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d003      	beq.n	8007632 <TIM_OC5_SetConfig+0x7a>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a13      	ldr	r2, [pc, #76]	; (800767c <TIM_OC5_SetConfig+0xc4>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d109      	bne.n	8007646 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007638:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	021b      	lsls	r3, r3, #8
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	4313      	orrs	r3, r2
 8007644:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	621a      	str	r2, [r3, #32]
}
 8007660:	bf00      	nop
 8007662:	371c      	adds	r7, #28
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	40012c00 	.word	0x40012c00
 8007670:	40013400 	.word	0x40013400
 8007674:	40014000 	.word	0x40014000
 8007678:	40014400 	.word	0x40014400
 800767c:	40014800 	.word	0x40014800

08007680 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	021b      	lsls	r3, r3, #8
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	4313      	orrs	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	051b      	lsls	r3, r3, #20
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a18      	ldr	r2, [pc, #96]	; (8007738 <TIM_OC6_SetConfig+0xb8>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d00f      	beq.n	80076fc <TIM_OC6_SetConfig+0x7c>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a17      	ldr	r2, [pc, #92]	; (800773c <TIM_OC6_SetConfig+0xbc>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d00b      	beq.n	80076fc <TIM_OC6_SetConfig+0x7c>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a16      	ldr	r2, [pc, #88]	; (8007740 <TIM_OC6_SetConfig+0xc0>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d007      	beq.n	80076fc <TIM_OC6_SetConfig+0x7c>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a15      	ldr	r2, [pc, #84]	; (8007744 <TIM_OC6_SetConfig+0xc4>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d003      	beq.n	80076fc <TIM_OC6_SetConfig+0x7c>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a14      	ldr	r2, [pc, #80]	; (8007748 <TIM_OC6_SetConfig+0xc8>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d109      	bne.n	8007710 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007702:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	695b      	ldr	r3, [r3, #20]
 8007708:	029b      	lsls	r3, r3, #10
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	4313      	orrs	r3, r2
 800770e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	621a      	str	r2, [r3, #32]
}
 800772a:	bf00      	nop
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	40012c00 	.word	0x40012c00
 800773c:	40013400 	.word	0x40013400
 8007740:	40014000 	.word	0x40014000
 8007744:	40014400 	.word	0x40014400
 8007748:	40014800 	.word	0x40014800

0800774c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
 8007758:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	f023 0201 	bic.w	r2, r3, #1
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6a1b      	ldr	r3, [r3, #32]
 8007770:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4a24      	ldr	r2, [pc, #144]	; (8007808 <TIM_TI1_SetConfig+0xbc>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d013      	beq.n	80077a2 <TIM_TI1_SetConfig+0x56>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007780:	d00f      	beq.n	80077a2 <TIM_TI1_SetConfig+0x56>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	4a21      	ldr	r2, [pc, #132]	; (800780c <TIM_TI1_SetConfig+0xc0>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d00b      	beq.n	80077a2 <TIM_TI1_SetConfig+0x56>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	4a20      	ldr	r2, [pc, #128]	; (8007810 <TIM_TI1_SetConfig+0xc4>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d007      	beq.n	80077a2 <TIM_TI1_SetConfig+0x56>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	4a1f      	ldr	r2, [pc, #124]	; (8007814 <TIM_TI1_SetConfig+0xc8>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d003      	beq.n	80077a2 <TIM_TI1_SetConfig+0x56>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	4a1e      	ldr	r2, [pc, #120]	; (8007818 <TIM_TI1_SetConfig+0xcc>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d101      	bne.n	80077a6 <TIM_TI1_SetConfig+0x5a>
 80077a2:	2301      	movs	r3, #1
 80077a4:	e000      	b.n	80077a8 <TIM_TI1_SetConfig+0x5c>
 80077a6:	2300      	movs	r3, #0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d008      	beq.n	80077be <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f023 0303 	bic.w	r3, r3, #3
 80077b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]
 80077bc:	e003      	b.n	80077c6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f043 0301 	orr.w	r3, r3, #1
 80077c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	011b      	lsls	r3, r3, #4
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	f023 030a 	bic.w	r3, r3, #10
 80077e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	f003 030a 	and.w	r3, r3, #10
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	621a      	str	r2, [r3, #32]
}
 80077fa:	bf00      	nop
 80077fc:	371c      	adds	r7, #28
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	40012c00 	.word	0x40012c00
 800780c:	40000400 	.word	0x40000400
 8007810:	40000800 	.word	0x40000800
 8007814:	40013400 	.word	0x40013400
 8007818:	40014000 	.word	0x40014000

0800781c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800781c:	b480      	push	{r7}
 800781e:	b087      	sub	sp, #28
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6a1b      	ldr	r3, [r3, #32]
 800782c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	f023 0201 	bic.w	r2, r3, #1
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	4313      	orrs	r3, r2
 8007850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f023 030a 	bic.w	r3, r3, #10
 8007858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	4313      	orrs	r3, r2
 8007860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	621a      	str	r2, [r3, #32]
}
 800786e:	bf00      	nop
 8007870:	371c      	adds	r7, #28
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800787a:	b480      	push	{r7}
 800787c:	b087      	sub	sp, #28
 800787e:	af00      	add	r7, sp, #0
 8007880:	60f8      	str	r0, [r7, #12]
 8007882:	60b9      	str	r1, [r7, #8]
 8007884:	607a      	str	r2, [r7, #4]
 8007886:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	f023 0210 	bic.w	r2, r3, #16
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	021b      	lsls	r3, r3, #8
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	031b      	lsls	r3, r3, #12
 80078be:	b29b      	uxth	r3, r3
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	011b      	lsls	r3, r3, #4
 80078d2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	4313      	orrs	r3, r2
 80078da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	621a      	str	r2, [r3, #32]
}
 80078e8:	bf00      	nop
 80078ea:	371c      	adds	r7, #28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b087      	sub	sp, #28
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6a1b      	ldr	r3, [r3, #32]
 8007904:	f023 0210 	bic.w	r2, r3, #16
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800791e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	031b      	lsls	r3, r3, #12
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	4313      	orrs	r3, r2
 8007928:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007930:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	011b      	lsls	r3, r3, #4
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	4313      	orrs	r3, r2
 800793a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	621a      	str	r2, [r3, #32]
}
 8007948:	bf00      	nop
 800794a:	371c      	adds	r7, #28
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007954:	b480      	push	{r7}
 8007956:	b087      	sub	sp, #28
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
 8007960:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f023 0303 	bic.w	r3, r3, #3
 8007980:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4313      	orrs	r3, r2
 8007988:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007990:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	011b      	lsls	r3, r3, #4
 8007996:	b2db      	uxtb	r3, r3
 8007998:	697a      	ldr	r2, [r7, #20]
 800799a:	4313      	orrs	r3, r2
 800799c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80079a4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	021b      	lsls	r3, r3, #8
 80079aa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	621a      	str	r2, [r3, #32]
}
 80079c0:	bf00      	nop
 80079c2:	371c      	adds	r7, #28
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
 80079d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	69db      	ldr	r3, [r3, #28]
 80079ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6a1b      	ldr	r3, [r3, #32]
 80079f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	021b      	lsls	r3, r3, #8
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a0a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	031b      	lsls	r3, r3, #12
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007a1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	031b      	lsls	r3, r3, #12
 8007a24:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	621a      	str	r2, [r3, #32]
}
 8007a3a:	bf00      	nop
 8007a3c:	371c      	adds	r7, #28
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b085      	sub	sp, #20
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	f043 0307 	orr.w	r3, r3, #7
 8007a6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	609a      	str	r2, [r3, #8]
}
 8007a74:	bf00      	nop
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
 8007a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	021a      	lsls	r2, r3, #8
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	609a      	str	r2, [r3, #8]
}
 8007ab4:	bf00      	nop
 8007ab6:	371c      	adds	r7, #28
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	f003 031f 	and.w	r3, r3, #31
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6a1a      	ldr	r2, [r3, #32]
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	43db      	mvns	r3, r3
 8007ae2:	401a      	ands	r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6a1a      	ldr	r2, [r3, #32]
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	f003 031f 	and.w	r3, r3, #31
 8007af2:	6879      	ldr	r1, [r7, #4]
 8007af4:	fa01 f303 	lsl.w	r3, r1, r3
 8007af8:	431a      	orrs	r2, r3
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	621a      	str	r2, [r3, #32]
}
 8007afe:	bf00      	nop
 8007b00:	371c      	adds	r7, #28
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
	...

08007b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d101      	bne.n	8007b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b20:	2302      	movs	r3, #2
 8007b22:	e065      	b.n	8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a2c      	ldr	r2, [pc, #176]	; (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d004      	beq.n	8007b58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a2b      	ldr	r2, [pc, #172]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d108      	bne.n	8007b6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a1b      	ldr	r2, [pc, #108]	; (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d018      	beq.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b9a:	d013      	beq.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a18      	ldr	r2, [pc, #96]	; (8007c04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d00e      	beq.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a17      	ldr	r2, [pc, #92]	; (8007c08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d009      	beq.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a12      	ldr	r2, [pc, #72]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d004      	beq.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a13      	ldr	r2, [pc, #76]	; (8007c0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d10c      	bne.n	8007bde <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	40012c00 	.word	0x40012c00
 8007c00:	40013400 	.word	0x40013400
 8007c04:	40000400 	.word	0x40000400
 8007c08:	40000800 	.word	0x40000800
 8007c0c:	40014000 	.word	0x40014000

08007c10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d101      	bne.n	8007c2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c28:	2302      	movs	r3, #2
 8007c2a:	e087      	b.n	8007d3c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c92:	4313      	orrs	r3, r2
 8007c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	041b      	lsls	r3, r3, #16
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a27      	ldr	r2, [pc, #156]	; (8007d48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d004      	beq.n	8007cba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a25      	ldr	r2, [pc, #148]	; (8007d4c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d106      	bne.n	8007cc8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a1e      	ldr	r2, [pc, #120]	; (8007d48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d004      	beq.n	8007cdc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a1d      	ldr	r2, [pc, #116]	; (8007d4c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d126      	bne.n	8007d2a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce6:	051b      	lsls	r3, r3, #20
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d04:	4313      	orrs	r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a0e      	ldr	r2, [pc, #56]	; (8007d48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d004      	beq.n	8007d1c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a0d      	ldr	r2, [pc, #52]	; (8007d4c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d106      	bne.n	8007d2a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d26:	4313      	orrs	r3, r2
 8007d28:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	40012c00 	.word	0x40012c00
 8007d4c:	40013400 	.word	0x40013400

08007d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e042      	b.n	8007e74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d106      	bne.n	8007e06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7fa fb85 	bl	8002510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2224      	movs	r2, #36	; 0x24
 8007e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f022 0201 	bic.w	r2, r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fb64 	bl	80084ec <UART_SetConfig>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d101      	bne.n	8007e2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e022      	b.n	8007e74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d002      	beq.n	8007e3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fe24 	bl	8008a84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	685a      	ldr	r2, [r3, #4]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	689a      	ldr	r2, [r3, #8]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f042 0201 	orr.w	r2, r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 feab 	bl	8008bc8 <UART_CheckIdleState>
 8007e72:	4603      	mov	r3, r0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b0ba      	sub	sp, #232	; 0xe8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	69db      	ldr	r3, [r3, #28]
 8007e8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ea2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007ea6:	f640 030f 	movw	r3, #2063	; 0x80f
 8007eaa:	4013      	ands	r3, r2
 8007eac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007eb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d11b      	bne.n	8007ef0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ebc:	f003 0320 	and.w	r3, r3, #32
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d015      	beq.n	8007ef0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ec8:	f003 0320 	and.w	r3, r3, #32
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d105      	bne.n	8007edc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d009      	beq.n	8007ef0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 82d6 	beq.w	8008492 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	4798      	blx	r3
      }
      return;
 8007eee:	e2d0      	b.n	8008492 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007ef0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 811f 	beq.w	8008138 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007efa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007efe:	4b8b      	ldr	r3, [pc, #556]	; (800812c <HAL_UART_IRQHandler+0x2b0>)
 8007f00:	4013      	ands	r3, r2
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d106      	bne.n	8007f14 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007f06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007f0a:	4b89      	ldr	r3, [pc, #548]	; (8008130 <HAL_UART_IRQHandler+0x2b4>)
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 8112 	beq.w	8008138 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d011      	beq.n	8007f44 <HAL_UART_IRQHandler+0xc8>
 8007f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00b      	beq.n	8007f44 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2201      	movs	r2, #1
 8007f32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f3a:	f043 0201 	orr.w	r2, r3, #1
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f48:	f003 0302 	and.w	r3, r3, #2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d011      	beq.n	8007f74 <HAL_UART_IRQHandler+0xf8>
 8007f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00b      	beq.n	8007f74 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2202      	movs	r2, #2
 8007f62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f6a:	f043 0204 	orr.w	r2, r3, #4
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f78:	f003 0304 	and.w	r3, r3, #4
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d011      	beq.n	8007fa4 <HAL_UART_IRQHandler+0x128>
 8007f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00b      	beq.n	8007fa4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2204      	movs	r2, #4
 8007f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f9a:	f043 0202 	orr.w	r2, r3, #2
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa8:	f003 0308 	and.w	r3, r3, #8
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d017      	beq.n	8007fe0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb4:	f003 0320 	and.w	r3, r3, #32
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d105      	bne.n	8007fc8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007fbc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007fc0:	4b5a      	ldr	r3, [pc, #360]	; (800812c <HAL_UART_IRQHandler+0x2b0>)
 8007fc2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00b      	beq.n	8007fe0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2208      	movs	r2, #8
 8007fce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fd6:	f043 0208 	orr.w	r2, r3, #8
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d012      	beq.n	8008012 <HAL_UART_IRQHandler+0x196>
 8007fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ff0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00c      	beq.n	8008012 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008000:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008008:	f043 0220 	orr.w	r2, r3, #32
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 823c 	beq.w	8008496 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800801e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008022:	f003 0320 	and.w	r3, r3, #32
 8008026:	2b00      	cmp	r3, #0
 8008028:	d013      	beq.n	8008052 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800802a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800802e:	f003 0320 	and.w	r3, r3, #32
 8008032:	2b00      	cmp	r3, #0
 8008034:	d105      	bne.n	8008042 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800803a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d007      	beq.n	8008052 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008046:	2b00      	cmp	r3, #0
 8008048:	d003      	beq.n	8008052 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008058:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008066:	2b40      	cmp	r3, #64	; 0x40
 8008068:	d005      	beq.n	8008076 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800806a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800806e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008072:	2b00      	cmp	r3, #0
 8008074:	d04f      	beq.n	8008116 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 feb9 	bl	8008dee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008086:	2b40      	cmp	r3, #64	; 0x40
 8008088:	d141      	bne.n	800810e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3308      	adds	r3, #8
 8008090:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008094:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008098:	e853 3f00 	ldrex	r3, [r3]
 800809c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80080a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3308      	adds	r3, #8
 80080b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80080b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80080ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80080c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80080c6:	e841 2300 	strex	r3, r2, [r1]
 80080ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80080ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1d9      	bne.n	800808a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d013      	beq.n	8008106 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080e2:	4a14      	ldr	r2, [pc, #80]	; (8008134 <HAL_UART_IRQHandler+0x2b8>)
 80080e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7fb ff0c 	bl	8003f08 <HAL_DMA_Abort_IT>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d017      	beq.n	8008126 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008100:	4610      	mov	r0, r2
 8008102:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008104:	e00f      	b.n	8008126 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f9da 	bl	80084c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800810c:	e00b      	b.n	8008126 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f9d6 	bl	80084c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008114:	e007      	b.n	8008126 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f9d2 	bl	80084c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008124:	e1b7      	b.n	8008496 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008126:	bf00      	nop
    return;
 8008128:	e1b5      	b.n	8008496 <HAL_UART_IRQHandler+0x61a>
 800812a:	bf00      	nop
 800812c:	10000001 	.word	0x10000001
 8008130:	04000120 	.word	0x04000120
 8008134:	08008ebb 	.word	0x08008ebb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800813c:	2b01      	cmp	r3, #1
 800813e:	f040 814a 	bne.w	80083d6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008146:	f003 0310 	and.w	r3, r3, #16
 800814a:	2b00      	cmp	r3, #0
 800814c:	f000 8143 	beq.w	80083d6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008154:	f003 0310 	and.w	r3, r3, #16
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 813c 	beq.w	80083d6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2210      	movs	r2, #16
 8008164:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008170:	2b40      	cmp	r3, #64	; 0x40
 8008172:	f040 80b5 	bne.w	80082e0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008182:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 8187 	beq.w	800849a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008192:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008196:	429a      	cmp	r2, r3
 8008198:	f080 817f 	bcs.w	800849a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0320 	and.w	r3, r3, #32
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f040 8086 	bne.w	80082c4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081c4:	e853 3f00 	ldrex	r3, [r3]
 80081c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80081cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	461a      	mov	r2, r3
 80081de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80081e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80081ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80081f2:	e841 2300 	strex	r3, r2, [r1]
 80081f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80081fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1da      	bne.n	80081b8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	3308      	adds	r3, #8
 8008208:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800820c:	e853 3f00 	ldrex	r3, [r3]
 8008210:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008214:	f023 0301 	bic.w	r3, r3, #1
 8008218:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	3308      	adds	r3, #8
 8008222:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008226:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800822a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800822e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008232:	e841 2300 	strex	r3, r2, [r1]
 8008236:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e1      	bne.n	8008202 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3308      	adds	r3, #8
 8008244:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008248:	e853 3f00 	ldrex	r3, [r3]
 800824c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800824e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008254:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3308      	adds	r3, #8
 800825e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008262:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008264:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008266:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008268:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1e3      	bne.n	800823e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2220      	movs	r2, #32
 800827a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800828c:	e853 3f00 	ldrex	r3, [r3]
 8008290:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008294:	f023 0310 	bic.w	r3, r3, #16
 8008298:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	461a      	mov	r2, r3
 80082a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80082a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082ae:	e841 2300 	strex	r3, r2, [r1]
 80082b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1e4      	bne.n	8008284 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fb fdc9 	bl	8003e56 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f8fb 	bl	80084d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082de:	e0dc      	b.n	800849a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 80ce 	beq.w	800849e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8008302:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 80c9 	beq.w	800849e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008314:	e853 3f00 	ldrex	r3, [r3]
 8008318:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800831a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008320:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	461a      	mov	r2, r3
 800832a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800832e:	647b      	str	r3, [r7, #68]	; 0x44
 8008330:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008332:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008334:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800833c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1e4      	bne.n	800830c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3308      	adds	r3, #8
 8008348:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834c:	e853 3f00 	ldrex	r3, [r3]
 8008350:	623b      	str	r3, [r7, #32]
   return(result);
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008358:	f023 0301 	bic.w	r3, r3, #1
 800835c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	3308      	adds	r3, #8
 8008366:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800836a:	633a      	str	r2, [r7, #48]	; 0x30
 800836c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008372:	e841 2300 	strex	r3, r2, [r1]
 8008376:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1e1      	bne.n	8008342 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2220      	movs	r2, #32
 8008382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	e853 3f00 	ldrex	r3, [r3]
 800839e:	60fb      	str	r3, [r7, #12]
   return(result);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f023 0310 	bic.w	r3, r3, #16
 80083a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	461a      	mov	r2, r3
 80083b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80083b4:	61fb      	str	r3, [r7, #28]
 80083b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b8:	69b9      	ldr	r1, [r7, #24]
 80083ba:	69fa      	ldr	r2, [r7, #28]
 80083bc:	e841 2300 	strex	r3, r2, [r1]
 80083c0:	617b      	str	r3, [r7, #20]
   return(result);
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1e4      	bne.n	8008392 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f880 	bl	80084d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083d4:	e063      	b.n	800849e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80083d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00e      	beq.n	8008400 <HAL_UART_IRQHandler+0x584>
 80083e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d008      	beq.n	8008400 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80083f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fd9f 	bl	8008f3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083fe:	e051      	b.n	80084a4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008408:	2b00      	cmp	r3, #0
 800840a:	d014      	beq.n	8008436 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800840c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008414:	2b00      	cmp	r3, #0
 8008416:	d105      	bne.n	8008424 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800841c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d008      	beq.n	8008436 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008428:	2b00      	cmp	r3, #0
 800842a:	d03a      	beq.n	80084a2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	4798      	blx	r3
    }
    return;
 8008434:	e035      	b.n	80084a2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800843a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800843e:	2b00      	cmp	r3, #0
 8008440:	d009      	beq.n	8008456 <HAL_UART_IRQHandler+0x5da>
 8008442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800844a:	2b00      	cmp	r3, #0
 800844c:	d003      	beq.n	8008456 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fd49 	bl	8008ee6 <UART_EndTransmit_IT>
    return;
 8008454:	e026      	b.n	80084a4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800845a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d009      	beq.n	8008476 <HAL_UART_IRQHandler+0x5fa>
 8008462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008466:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fd78 	bl	8008f64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008474:	e016      	b.n	80084a4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800847a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d010      	beq.n	80084a4 <HAL_UART_IRQHandler+0x628>
 8008482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008486:	2b00      	cmp	r3, #0
 8008488:	da0c      	bge.n	80084a4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fd60 	bl	8008f50 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008490:	e008      	b.n	80084a4 <HAL_UART_IRQHandler+0x628>
      return;
 8008492:	bf00      	nop
 8008494:	e006      	b.n	80084a4 <HAL_UART_IRQHandler+0x628>
    return;
 8008496:	bf00      	nop
 8008498:	e004      	b.n	80084a4 <HAL_UART_IRQHandler+0x628>
      return;
 800849a:	bf00      	nop
 800849c:	e002      	b.n	80084a4 <HAL_UART_IRQHandler+0x628>
      return;
 800849e:	bf00      	nop
 80084a0:	e000      	b.n	80084a4 <HAL_UART_IRQHandler+0x628>
    return;
 80084a2:	bf00      	nop
  }
}
 80084a4:	37e8      	adds	r7, #232	; 0xe8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop

080084ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80084b4:	bf00      	nop
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084f0:	b08c      	sub	sp, #48	; 0x30
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	689a      	ldr	r2, [r3, #8]
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	431a      	orrs	r2, r3
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	431a      	orrs	r2, r3
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	69db      	ldr	r3, [r3, #28]
 8008510:	4313      	orrs	r3, r2
 8008512:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	4bab      	ldr	r3, [pc, #684]	; (80087c8 <UART_SetConfig+0x2dc>)
 800851c:	4013      	ands	r3, r2
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	6812      	ldr	r2, [r2, #0]
 8008522:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008524:	430b      	orrs	r3, r1
 8008526:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	68da      	ldr	r2, [r3, #12]
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	430a      	orrs	r2, r1
 800853c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4aa0      	ldr	r2, [pc, #640]	; (80087cc <UART_SetConfig+0x2e0>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d004      	beq.n	8008558 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008554:	4313      	orrs	r3, r2
 8008556:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008562:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	6812      	ldr	r2, [r2, #0]
 800856a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800856c:	430b      	orrs	r3, r1
 800856e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008576:	f023 010f 	bic.w	r1, r3, #15
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	430a      	orrs	r2, r1
 8008584:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a91      	ldr	r2, [pc, #580]	; (80087d0 <UART_SetConfig+0x2e4>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d125      	bne.n	80085dc <UART_SetConfig+0xf0>
 8008590:	4b90      	ldr	r3, [pc, #576]	; (80087d4 <UART_SetConfig+0x2e8>)
 8008592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008596:	f003 0303 	and.w	r3, r3, #3
 800859a:	2b03      	cmp	r3, #3
 800859c:	d81a      	bhi.n	80085d4 <UART_SetConfig+0xe8>
 800859e:	a201      	add	r2, pc, #4	; (adr r2, 80085a4 <UART_SetConfig+0xb8>)
 80085a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a4:	080085b5 	.word	0x080085b5
 80085a8:	080085c5 	.word	0x080085c5
 80085ac:	080085bd 	.word	0x080085bd
 80085b0:	080085cd 	.word	0x080085cd
 80085b4:	2301      	movs	r3, #1
 80085b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ba:	e0d6      	b.n	800876a <UART_SetConfig+0x27e>
 80085bc:	2302      	movs	r3, #2
 80085be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085c2:	e0d2      	b.n	800876a <UART_SetConfig+0x27e>
 80085c4:	2304      	movs	r3, #4
 80085c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ca:	e0ce      	b.n	800876a <UART_SetConfig+0x27e>
 80085cc:	2308      	movs	r3, #8
 80085ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085d2:	e0ca      	b.n	800876a <UART_SetConfig+0x27e>
 80085d4:	2310      	movs	r3, #16
 80085d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085da:	e0c6      	b.n	800876a <UART_SetConfig+0x27e>
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a7d      	ldr	r2, [pc, #500]	; (80087d8 <UART_SetConfig+0x2ec>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d138      	bne.n	8008658 <UART_SetConfig+0x16c>
 80085e6:	4b7b      	ldr	r3, [pc, #492]	; (80087d4 <UART_SetConfig+0x2e8>)
 80085e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ec:	f003 030c 	and.w	r3, r3, #12
 80085f0:	2b0c      	cmp	r3, #12
 80085f2:	d82d      	bhi.n	8008650 <UART_SetConfig+0x164>
 80085f4:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <UART_SetConfig+0x110>)
 80085f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fa:	bf00      	nop
 80085fc:	08008631 	.word	0x08008631
 8008600:	08008651 	.word	0x08008651
 8008604:	08008651 	.word	0x08008651
 8008608:	08008651 	.word	0x08008651
 800860c:	08008641 	.word	0x08008641
 8008610:	08008651 	.word	0x08008651
 8008614:	08008651 	.word	0x08008651
 8008618:	08008651 	.word	0x08008651
 800861c:	08008639 	.word	0x08008639
 8008620:	08008651 	.word	0x08008651
 8008624:	08008651 	.word	0x08008651
 8008628:	08008651 	.word	0x08008651
 800862c:	08008649 	.word	0x08008649
 8008630:	2300      	movs	r3, #0
 8008632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008636:	e098      	b.n	800876a <UART_SetConfig+0x27e>
 8008638:	2302      	movs	r3, #2
 800863a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800863e:	e094      	b.n	800876a <UART_SetConfig+0x27e>
 8008640:	2304      	movs	r3, #4
 8008642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008646:	e090      	b.n	800876a <UART_SetConfig+0x27e>
 8008648:	2308      	movs	r3, #8
 800864a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800864e:	e08c      	b.n	800876a <UART_SetConfig+0x27e>
 8008650:	2310      	movs	r3, #16
 8008652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008656:	e088      	b.n	800876a <UART_SetConfig+0x27e>
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a5f      	ldr	r2, [pc, #380]	; (80087dc <UART_SetConfig+0x2f0>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d125      	bne.n	80086ae <UART_SetConfig+0x1c2>
 8008662:	4b5c      	ldr	r3, [pc, #368]	; (80087d4 <UART_SetConfig+0x2e8>)
 8008664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008668:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800866c:	2b30      	cmp	r3, #48	; 0x30
 800866e:	d016      	beq.n	800869e <UART_SetConfig+0x1b2>
 8008670:	2b30      	cmp	r3, #48	; 0x30
 8008672:	d818      	bhi.n	80086a6 <UART_SetConfig+0x1ba>
 8008674:	2b20      	cmp	r3, #32
 8008676:	d00a      	beq.n	800868e <UART_SetConfig+0x1a2>
 8008678:	2b20      	cmp	r3, #32
 800867a:	d814      	bhi.n	80086a6 <UART_SetConfig+0x1ba>
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <UART_SetConfig+0x19a>
 8008680:	2b10      	cmp	r3, #16
 8008682:	d008      	beq.n	8008696 <UART_SetConfig+0x1aa>
 8008684:	e00f      	b.n	80086a6 <UART_SetConfig+0x1ba>
 8008686:	2300      	movs	r3, #0
 8008688:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800868c:	e06d      	b.n	800876a <UART_SetConfig+0x27e>
 800868e:	2302      	movs	r3, #2
 8008690:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008694:	e069      	b.n	800876a <UART_SetConfig+0x27e>
 8008696:	2304      	movs	r3, #4
 8008698:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800869c:	e065      	b.n	800876a <UART_SetConfig+0x27e>
 800869e:	2308      	movs	r3, #8
 80086a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086a4:	e061      	b.n	800876a <UART_SetConfig+0x27e>
 80086a6:	2310      	movs	r3, #16
 80086a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086ac:	e05d      	b.n	800876a <UART_SetConfig+0x27e>
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a4b      	ldr	r2, [pc, #300]	; (80087e0 <UART_SetConfig+0x2f4>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d125      	bne.n	8008704 <UART_SetConfig+0x218>
 80086b8:	4b46      	ldr	r3, [pc, #280]	; (80087d4 <UART_SetConfig+0x2e8>)
 80086ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80086c2:	2bc0      	cmp	r3, #192	; 0xc0
 80086c4:	d016      	beq.n	80086f4 <UART_SetConfig+0x208>
 80086c6:	2bc0      	cmp	r3, #192	; 0xc0
 80086c8:	d818      	bhi.n	80086fc <UART_SetConfig+0x210>
 80086ca:	2b80      	cmp	r3, #128	; 0x80
 80086cc:	d00a      	beq.n	80086e4 <UART_SetConfig+0x1f8>
 80086ce:	2b80      	cmp	r3, #128	; 0x80
 80086d0:	d814      	bhi.n	80086fc <UART_SetConfig+0x210>
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d002      	beq.n	80086dc <UART_SetConfig+0x1f0>
 80086d6:	2b40      	cmp	r3, #64	; 0x40
 80086d8:	d008      	beq.n	80086ec <UART_SetConfig+0x200>
 80086da:	e00f      	b.n	80086fc <UART_SetConfig+0x210>
 80086dc:	2300      	movs	r3, #0
 80086de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086e2:	e042      	b.n	800876a <UART_SetConfig+0x27e>
 80086e4:	2302      	movs	r3, #2
 80086e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086ea:	e03e      	b.n	800876a <UART_SetConfig+0x27e>
 80086ec:	2304      	movs	r3, #4
 80086ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086f2:	e03a      	b.n	800876a <UART_SetConfig+0x27e>
 80086f4:	2308      	movs	r3, #8
 80086f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086fa:	e036      	b.n	800876a <UART_SetConfig+0x27e>
 80086fc:	2310      	movs	r3, #16
 80086fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008702:	e032      	b.n	800876a <UART_SetConfig+0x27e>
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a30      	ldr	r2, [pc, #192]	; (80087cc <UART_SetConfig+0x2e0>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d12a      	bne.n	8008764 <UART_SetConfig+0x278>
 800870e:	4b31      	ldr	r3, [pc, #196]	; (80087d4 <UART_SetConfig+0x2e8>)
 8008710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008714:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008718:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800871c:	d01a      	beq.n	8008754 <UART_SetConfig+0x268>
 800871e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008722:	d81b      	bhi.n	800875c <UART_SetConfig+0x270>
 8008724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008728:	d00c      	beq.n	8008744 <UART_SetConfig+0x258>
 800872a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800872e:	d815      	bhi.n	800875c <UART_SetConfig+0x270>
 8008730:	2b00      	cmp	r3, #0
 8008732:	d003      	beq.n	800873c <UART_SetConfig+0x250>
 8008734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008738:	d008      	beq.n	800874c <UART_SetConfig+0x260>
 800873a:	e00f      	b.n	800875c <UART_SetConfig+0x270>
 800873c:	2300      	movs	r3, #0
 800873e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008742:	e012      	b.n	800876a <UART_SetConfig+0x27e>
 8008744:	2302      	movs	r3, #2
 8008746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800874a:	e00e      	b.n	800876a <UART_SetConfig+0x27e>
 800874c:	2304      	movs	r3, #4
 800874e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008752:	e00a      	b.n	800876a <UART_SetConfig+0x27e>
 8008754:	2308      	movs	r3, #8
 8008756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800875a:	e006      	b.n	800876a <UART_SetConfig+0x27e>
 800875c:	2310      	movs	r3, #16
 800875e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008762:	e002      	b.n	800876a <UART_SetConfig+0x27e>
 8008764:	2310      	movs	r3, #16
 8008766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a17      	ldr	r2, [pc, #92]	; (80087cc <UART_SetConfig+0x2e0>)
 8008770:	4293      	cmp	r3, r2
 8008772:	f040 80a8 	bne.w	80088c6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008776:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800877a:	2b08      	cmp	r3, #8
 800877c:	d834      	bhi.n	80087e8 <UART_SetConfig+0x2fc>
 800877e:	a201      	add	r2, pc, #4	; (adr r2, 8008784 <UART_SetConfig+0x298>)
 8008780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008784:	080087a9 	.word	0x080087a9
 8008788:	080087e9 	.word	0x080087e9
 800878c:	080087b1 	.word	0x080087b1
 8008790:	080087e9 	.word	0x080087e9
 8008794:	080087b7 	.word	0x080087b7
 8008798:	080087e9 	.word	0x080087e9
 800879c:	080087e9 	.word	0x080087e9
 80087a0:	080087e9 	.word	0x080087e9
 80087a4:	080087bf 	.word	0x080087bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087a8:	f7fc ff18 	bl	80055dc <HAL_RCC_GetPCLK1Freq>
 80087ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087ae:	e021      	b.n	80087f4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087b0:	4b0c      	ldr	r3, [pc, #48]	; (80087e4 <UART_SetConfig+0x2f8>)
 80087b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80087b4:	e01e      	b.n	80087f4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087b6:	f7fc fea3 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 80087ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087bc:	e01a      	b.n	80087f4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80087c4:	e016      	b.n	80087f4 <UART_SetConfig+0x308>
 80087c6:	bf00      	nop
 80087c8:	cfff69f3 	.word	0xcfff69f3
 80087cc:	40008000 	.word	0x40008000
 80087d0:	40013800 	.word	0x40013800
 80087d4:	40021000 	.word	0x40021000
 80087d8:	40004400 	.word	0x40004400
 80087dc:	40004800 	.word	0x40004800
 80087e0:	40004c00 	.word	0x40004c00
 80087e4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80087e8:	2300      	movs	r3, #0
 80087ea:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80087f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f000 812a 	beq.w	8008a50 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008800:	4a9e      	ldr	r2, [pc, #632]	; (8008a7c <UART_SetConfig+0x590>)
 8008802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008806:	461a      	mov	r2, r3
 8008808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880a:	fbb3 f3f2 	udiv	r3, r3, r2
 800880e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	4613      	mov	r3, r2
 8008816:	005b      	lsls	r3, r3, #1
 8008818:	4413      	add	r3, r2
 800881a:	69ba      	ldr	r2, [r7, #24]
 800881c:	429a      	cmp	r2, r3
 800881e:	d305      	bcc.n	800882c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008826:	69ba      	ldr	r2, [r7, #24]
 8008828:	429a      	cmp	r2, r3
 800882a:	d903      	bls.n	8008834 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008832:	e10d      	b.n	8008a50 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008836:	2200      	movs	r2, #0
 8008838:	60bb      	str	r3, [r7, #8]
 800883a:	60fa      	str	r2, [r7, #12]
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008840:	4a8e      	ldr	r2, [pc, #568]	; (8008a7c <UART_SetConfig+0x590>)
 8008842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008846:	b29b      	uxth	r3, r3
 8008848:	2200      	movs	r2, #0
 800884a:	603b      	str	r3, [r7, #0]
 800884c:	607a      	str	r2, [r7, #4]
 800884e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008852:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008856:	f7f8 fa3f 	bl	8000cd8 <__aeabi_uldivmod>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	4610      	mov	r0, r2
 8008860:	4619      	mov	r1, r3
 8008862:	f04f 0200 	mov.w	r2, #0
 8008866:	f04f 0300 	mov.w	r3, #0
 800886a:	020b      	lsls	r3, r1, #8
 800886c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008870:	0202      	lsls	r2, r0, #8
 8008872:	6979      	ldr	r1, [r7, #20]
 8008874:	6849      	ldr	r1, [r1, #4]
 8008876:	0849      	lsrs	r1, r1, #1
 8008878:	2000      	movs	r0, #0
 800887a:	460c      	mov	r4, r1
 800887c:	4605      	mov	r5, r0
 800887e:	eb12 0804 	adds.w	r8, r2, r4
 8008882:	eb43 0905 	adc.w	r9, r3, r5
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	469a      	mov	sl, r3
 800888e:	4693      	mov	fp, r2
 8008890:	4652      	mov	r2, sl
 8008892:	465b      	mov	r3, fp
 8008894:	4640      	mov	r0, r8
 8008896:	4649      	mov	r1, r9
 8008898:	f7f8 fa1e 	bl	8000cd8 <__aeabi_uldivmod>
 800889c:	4602      	mov	r2, r0
 800889e:	460b      	mov	r3, r1
 80088a0:	4613      	mov	r3, r2
 80088a2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088aa:	d308      	bcc.n	80088be <UART_SetConfig+0x3d2>
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088b2:	d204      	bcs.n	80088be <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6a3a      	ldr	r2, [r7, #32]
 80088ba:	60da      	str	r2, [r3, #12]
 80088bc:	e0c8      	b.n	8008a50 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80088c4:	e0c4      	b.n	8008a50 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	69db      	ldr	r3, [r3, #28]
 80088ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088ce:	d167      	bne.n	80089a0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80088d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80088d4:	2b08      	cmp	r3, #8
 80088d6:	d828      	bhi.n	800892a <UART_SetConfig+0x43e>
 80088d8:	a201      	add	r2, pc, #4	; (adr r2, 80088e0 <UART_SetConfig+0x3f4>)
 80088da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088de:	bf00      	nop
 80088e0:	08008905 	.word	0x08008905
 80088e4:	0800890d 	.word	0x0800890d
 80088e8:	08008915 	.word	0x08008915
 80088ec:	0800892b 	.word	0x0800892b
 80088f0:	0800891b 	.word	0x0800891b
 80088f4:	0800892b 	.word	0x0800892b
 80088f8:	0800892b 	.word	0x0800892b
 80088fc:	0800892b 	.word	0x0800892b
 8008900:	08008923 	.word	0x08008923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008904:	f7fc fe6a 	bl	80055dc <HAL_RCC_GetPCLK1Freq>
 8008908:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800890a:	e014      	b.n	8008936 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800890c:	f7fc fe7c 	bl	8005608 <HAL_RCC_GetPCLK2Freq>
 8008910:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008912:	e010      	b.n	8008936 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008914:	4b5a      	ldr	r3, [pc, #360]	; (8008a80 <UART_SetConfig+0x594>)
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008918:	e00d      	b.n	8008936 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800891a:	f7fc fdf1 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 800891e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008920:	e009      	b.n	8008936 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008926:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008928:	e005      	b.n	8008936 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800892a:	2300      	movs	r3, #0
 800892c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008934:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 8089 	beq.w	8008a50 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008942:	4a4e      	ldr	r2, [pc, #312]	; (8008a7c <UART_SetConfig+0x590>)
 8008944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008948:	461a      	mov	r2, r3
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008950:	005a      	lsls	r2, r3, #1
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	085b      	lsrs	r3, r3, #1
 8008958:	441a      	add	r2, r3
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008962:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008964:	6a3b      	ldr	r3, [r7, #32]
 8008966:	2b0f      	cmp	r3, #15
 8008968:	d916      	bls.n	8008998 <UART_SetConfig+0x4ac>
 800896a:	6a3b      	ldr	r3, [r7, #32]
 800896c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008970:	d212      	bcs.n	8008998 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008972:	6a3b      	ldr	r3, [r7, #32]
 8008974:	b29b      	uxth	r3, r3
 8008976:	f023 030f 	bic.w	r3, r3, #15
 800897a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800897c:	6a3b      	ldr	r3, [r7, #32]
 800897e:	085b      	lsrs	r3, r3, #1
 8008980:	b29b      	uxth	r3, r3
 8008982:	f003 0307 	and.w	r3, r3, #7
 8008986:	b29a      	uxth	r2, r3
 8008988:	8bfb      	ldrh	r3, [r7, #30]
 800898a:	4313      	orrs	r3, r2
 800898c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	8bfa      	ldrh	r2, [r7, #30]
 8008994:	60da      	str	r2, [r3, #12]
 8008996:	e05b      	b.n	8008a50 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800899e:	e057      	b.n	8008a50 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089a4:	2b08      	cmp	r3, #8
 80089a6:	d828      	bhi.n	80089fa <UART_SetConfig+0x50e>
 80089a8:	a201      	add	r2, pc, #4	; (adr r2, 80089b0 <UART_SetConfig+0x4c4>)
 80089aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ae:	bf00      	nop
 80089b0:	080089d5 	.word	0x080089d5
 80089b4:	080089dd 	.word	0x080089dd
 80089b8:	080089e5 	.word	0x080089e5
 80089bc:	080089fb 	.word	0x080089fb
 80089c0:	080089eb 	.word	0x080089eb
 80089c4:	080089fb 	.word	0x080089fb
 80089c8:	080089fb 	.word	0x080089fb
 80089cc:	080089fb 	.word	0x080089fb
 80089d0:	080089f3 	.word	0x080089f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089d4:	f7fc fe02 	bl	80055dc <HAL_RCC_GetPCLK1Freq>
 80089d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089da:	e014      	b.n	8008a06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089dc:	f7fc fe14 	bl	8005608 <HAL_RCC_GetPCLK2Freq>
 80089e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089e2:	e010      	b.n	8008a06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089e4:	4b26      	ldr	r3, [pc, #152]	; (8008a80 <UART_SetConfig+0x594>)
 80089e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089e8:	e00d      	b.n	8008a06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089ea:	f7fc fd89 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 80089ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089f0:	e009      	b.n	8008a06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089f8:	e005      	b.n	8008a06 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80089fa:	2300      	movs	r3, #0
 80089fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a04:	bf00      	nop
    }

    if (pclk != 0U)
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d021      	beq.n	8008a50 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a10:	4a1a      	ldr	r2, [pc, #104]	; (8008a7c <UART_SetConfig+0x590>)
 8008a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a16:	461a      	mov	r2, r3
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	085b      	lsrs	r3, r3, #1
 8008a24:	441a      	add	r2, r3
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	2b0f      	cmp	r3, #15
 8008a34:	d909      	bls.n	8008a4a <UART_SetConfig+0x55e>
 8008a36:	6a3b      	ldr	r3, [r7, #32]
 8008a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a3c:	d205      	bcs.n	8008a4a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	60da      	str	r2, [r3, #12]
 8008a48:	e002      	b.n	8008a50 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	2200      	movs	r2, #0
 8008a64:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008a6c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3730      	adds	r7, #48	; 0x30
 8008a74:	46bd      	mov	sp, r7
 8008a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a7a:	bf00      	nop
 8008a7c:	0800ee50 	.word	0x0800ee50
 8008a80:	00f42400 	.word	0x00f42400

08008a84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a90:	f003 0301 	and.w	r3, r3, #1
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00a      	beq.n	8008aae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab2:	f003 0302 	and.w	r3, r3, #2
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00a      	beq.n	8008ad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	430a      	orrs	r2, r1
 8008ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad4:	f003 0304 	and.w	r3, r3, #4
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00a      	beq.n	8008af2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af6:	f003 0308 	and.w	r3, r3, #8
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00a      	beq.n	8008b14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	430a      	orrs	r2, r1
 8008b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b18:	f003 0310 	and.w	r3, r3, #16
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00a      	beq.n	8008b36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	430a      	orrs	r2, r1
 8008b34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3a:	f003 0320 	and.w	r3, r3, #32
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00a      	beq.n	8008b58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	430a      	orrs	r2, r1
 8008b56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d01a      	beq.n	8008b9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b82:	d10a      	bne.n	8008b9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	430a      	orrs	r2, r1
 8008b98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00a      	beq.n	8008bbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	605a      	str	r2, [r3, #4]
  }
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b086      	sub	sp, #24
 8008bcc:	af02      	add	r7, sp, #8
 8008bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bd8:	f7f9 fd88 	bl	80026ec <HAL_GetTick>
 8008bdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 0308 	and.w	r3, r3, #8
 8008be8:	2b08      	cmp	r3, #8
 8008bea:	d10e      	bne.n	8008c0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f82f 	bl	8008c5e <UART_WaitOnFlagUntilTimeout>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c06:	2303      	movs	r3, #3
 8008c08:	e025      	b.n	8008c56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0304 	and.w	r3, r3, #4
 8008c14:	2b04      	cmp	r3, #4
 8008c16:	d10e      	bne.n	8008c36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f819 	bl	8008c5e <UART_WaitOnFlagUntilTimeout>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d001      	beq.n	8008c36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e00f      	b.n	8008c56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2220      	movs	r2, #32
 8008c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2220      	movs	r2, #32
 8008c42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b09c      	sub	sp, #112	; 0x70
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	60b9      	str	r1, [r7, #8]
 8008c68:	603b      	str	r3, [r7, #0]
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c6e:	e0a9      	b.n	8008dc4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c76:	f000 80a5 	beq.w	8008dc4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c7a:	f7f9 fd37 	bl	80026ec <HAL_GetTick>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d302      	bcc.n	8008c90 <UART_WaitOnFlagUntilTimeout+0x32>
 8008c8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d140      	bne.n	8008d12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c98:	e853 3f00 	ldrex	r3, [r3]
 8008c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ca0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ca4:	667b      	str	r3, [r7, #100]	; 0x64
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	461a      	mov	r2, r3
 8008cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cb0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008cb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008cb6:	e841 2300 	strex	r3, r2, [r1]
 8008cba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d1e6      	bne.n	8008c90 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	3308      	adds	r3, #8
 8008cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ccc:	e853 3f00 	ldrex	r3, [r3]
 8008cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd4:	f023 0301 	bic.w	r3, r3, #1
 8008cd8:	663b      	str	r3, [r7, #96]	; 0x60
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	3308      	adds	r3, #8
 8008ce0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ce2:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ce4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ce8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cea:	e841 2300 	strex	r3, r2, [r1]
 8008cee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1e5      	bne.n	8008cc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2220      	movs	r2, #32
 8008cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2220      	movs	r2, #32
 8008d02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e069      	b.n	8008de6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 0304 	and.w	r3, r3, #4
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d051      	beq.n	8008dc4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	69db      	ldr	r3, [r3, #28]
 8008d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d2e:	d149      	bne.n	8008dc4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d42:	e853 3f00 	ldrex	r3, [r3]
 8008d46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	461a      	mov	r2, r3
 8008d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d58:	637b      	str	r3, [r7, #52]	; 0x34
 8008d5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d60:	e841 2300 	strex	r3, r2, [r1]
 8008d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1e6      	bne.n	8008d3a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3308      	adds	r3, #8
 8008d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	e853 3f00 	ldrex	r3, [r3]
 8008d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	f023 0301 	bic.w	r3, r3, #1
 8008d82:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	3308      	adds	r3, #8
 8008d8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d8c:	623a      	str	r2, [r7, #32]
 8008d8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d90:	69f9      	ldr	r1, [r7, #28]
 8008d92:	6a3a      	ldr	r2, [r7, #32]
 8008d94:	e841 2300 	strex	r3, r2, [r1]
 8008d98:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1e5      	bne.n	8008d6c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2220      	movs	r2, #32
 8008da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2220      	movs	r2, #32
 8008dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2220      	movs	r2, #32
 8008db4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	e010      	b.n	8008de6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	69da      	ldr	r2, [r3, #28]
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	4013      	ands	r3, r2
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	bf0c      	ite	eq
 8008dd4:	2301      	moveq	r3, #1
 8008dd6:	2300      	movne	r3, #0
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	461a      	mov	r2, r3
 8008ddc:	79fb      	ldrb	r3, [r7, #7]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	f43f af46 	beq.w	8008c70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3770      	adds	r7, #112	; 0x70
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008dee:	b480      	push	{r7}
 8008df0:	b095      	sub	sp, #84	; 0x54
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfe:	e853 3f00 	ldrex	r3, [r3]
 8008e02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	461a      	mov	r2, r3
 8008e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e14:	643b      	str	r3, [r7, #64]	; 0x40
 8008e16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e1c:	e841 2300 	strex	r3, r2, [r1]
 8008e20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1e6      	bne.n	8008df6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3308      	adds	r3, #8
 8008e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e30:	6a3b      	ldr	r3, [r7, #32]
 8008e32:	e853 3f00 	ldrex	r3, [r3]
 8008e36:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e3e:	f023 0301 	bic.w	r3, r3, #1
 8008e42:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	3308      	adds	r3, #8
 8008e4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e54:	e841 2300 	strex	r3, r2, [r1]
 8008e58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1e3      	bne.n	8008e28 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d118      	bne.n	8008e9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	e853 3f00 	ldrex	r3, [r3]
 8008e74:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	f023 0310 	bic.w	r3, r3, #16
 8008e7c:	647b      	str	r3, [r7, #68]	; 0x44
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	461a      	mov	r2, r3
 8008e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e86:	61bb      	str	r3, [r7, #24]
 8008e88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8a:	6979      	ldr	r1, [r7, #20]
 8008e8c:	69ba      	ldr	r2, [r7, #24]
 8008e8e:	e841 2300 	strex	r3, r2, [r1]
 8008e92:	613b      	str	r3, [r7, #16]
   return(result);
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1e6      	bne.n	8008e68 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2220      	movs	r2, #32
 8008e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008eae:	bf00      	nop
 8008eb0:	3754      	adds	r7, #84	; 0x54
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f7ff faf1 	bl	80084c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ede:	bf00      	nop
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b088      	sub	sp, #32
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	e853 3f00 	ldrex	r3, [r3]
 8008efa:	60bb      	str	r3, [r7, #8]
   return(result);
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f02:	61fb      	str	r3, [r7, #28]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	61bb      	str	r3, [r7, #24]
 8008f0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f10:	6979      	ldr	r1, [r7, #20]
 8008f12:	69ba      	ldr	r2, [r7, #24]
 8008f14:	e841 2300 	strex	r3, r2, [r1]
 8008f18:	613b      	str	r3, [r7, #16]
   return(result);
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1e6      	bne.n	8008eee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2220      	movs	r2, #32
 8008f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7ff fabc 	bl	80084ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f34:	bf00      	nop
 8008f36:	3720      	adds	r7, #32
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008f6c:	bf00      	nop
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d101      	bne.n	8008f8e <HAL_UARTEx_DisableFifoMode+0x16>
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	e027      	b.n	8008fde <HAL_UARTEx_DisableFifoMode+0x66>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2224      	movs	r2, #36	; 0x24
 8008f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f022 0201 	bic.w	r2, r2, #1
 8008fb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008fbc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2220      	movs	r2, #32
 8008fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b084      	sub	sp, #16
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d101      	bne.n	8009002 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ffe:	2302      	movs	r3, #2
 8009000:	e02d      	b.n	800905e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2224      	movs	r2, #36	; 0x24
 800900e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f022 0201 	bic.w	r2, r2, #1
 8009028:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	683a      	ldr	r2, [r7, #0]
 800903a:	430a      	orrs	r2, r1
 800903c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f850 	bl	80090e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2220      	movs	r2, #32
 8009050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b084      	sub	sp, #16
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009076:	2b01      	cmp	r3, #1
 8009078:	d101      	bne.n	800907e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800907a:	2302      	movs	r3, #2
 800907c:	e02d      	b.n	80090da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2224      	movs	r2, #36	; 0x24
 800908a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f022 0201 	bic.w	r2, r2, #1
 80090a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	683a      	ldr	r2, [r7, #0]
 80090b6:	430a      	orrs	r2, r1
 80090b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f812 	bl	80090e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2220      	movs	r2, #32
 80090cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d108      	bne.n	8009106 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009104:	e031      	b.n	800916a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009106:	2308      	movs	r3, #8
 8009108:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800910a:	2308      	movs	r3, #8
 800910c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	0e5b      	lsrs	r3, r3, #25
 8009116:	b2db      	uxtb	r3, r3
 8009118:	f003 0307 	and.w	r3, r3, #7
 800911c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	0f5b      	lsrs	r3, r3, #29
 8009126:	b2db      	uxtb	r3, r3
 8009128:	f003 0307 	and.w	r3, r3, #7
 800912c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800912e:	7bbb      	ldrb	r3, [r7, #14]
 8009130:	7b3a      	ldrb	r2, [r7, #12]
 8009132:	4911      	ldr	r1, [pc, #68]	; (8009178 <UARTEx_SetNbDataToProcess+0x94>)
 8009134:	5c8a      	ldrb	r2, [r1, r2]
 8009136:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800913a:	7b3a      	ldrb	r2, [r7, #12]
 800913c:	490f      	ldr	r1, [pc, #60]	; (800917c <UARTEx_SetNbDataToProcess+0x98>)
 800913e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009140:	fb93 f3f2 	sdiv	r3, r3, r2
 8009144:	b29a      	uxth	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800914c:	7bfb      	ldrb	r3, [r7, #15]
 800914e:	7b7a      	ldrb	r2, [r7, #13]
 8009150:	4909      	ldr	r1, [pc, #36]	; (8009178 <UARTEx_SetNbDataToProcess+0x94>)
 8009152:	5c8a      	ldrb	r2, [r1, r2]
 8009154:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009158:	7b7a      	ldrb	r2, [r7, #13]
 800915a:	4908      	ldr	r1, [pc, #32]	; (800917c <UARTEx_SetNbDataToProcess+0x98>)
 800915c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800915e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009162:	b29a      	uxth	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800916a:	bf00      	nop
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	0800ee68 	.word	0x0800ee68
 800917c:	0800ee70 	.word	0x0800ee70

08009180 <__cvt>:
 8009180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009184:	ec55 4b10 	vmov	r4, r5, d0
 8009188:	2d00      	cmp	r5, #0
 800918a:	460e      	mov	r6, r1
 800918c:	4619      	mov	r1, r3
 800918e:	462b      	mov	r3, r5
 8009190:	bfbb      	ittet	lt
 8009192:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009196:	461d      	movlt	r5, r3
 8009198:	2300      	movge	r3, #0
 800919a:	232d      	movlt	r3, #45	; 0x2d
 800919c:	700b      	strb	r3, [r1, #0]
 800919e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80091a4:	4691      	mov	r9, r2
 80091a6:	f023 0820 	bic.w	r8, r3, #32
 80091aa:	bfbc      	itt	lt
 80091ac:	4622      	movlt	r2, r4
 80091ae:	4614      	movlt	r4, r2
 80091b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80091b4:	d005      	beq.n	80091c2 <__cvt+0x42>
 80091b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80091ba:	d100      	bne.n	80091be <__cvt+0x3e>
 80091bc:	3601      	adds	r6, #1
 80091be:	2102      	movs	r1, #2
 80091c0:	e000      	b.n	80091c4 <__cvt+0x44>
 80091c2:	2103      	movs	r1, #3
 80091c4:	ab03      	add	r3, sp, #12
 80091c6:	9301      	str	r3, [sp, #4]
 80091c8:	ab02      	add	r3, sp, #8
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	ec45 4b10 	vmov	d0, r4, r5
 80091d0:	4653      	mov	r3, sl
 80091d2:	4632      	mov	r2, r6
 80091d4:	f001 f880 	bl	800a2d8 <_dtoa_r>
 80091d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80091dc:	4607      	mov	r7, r0
 80091de:	d102      	bne.n	80091e6 <__cvt+0x66>
 80091e0:	f019 0f01 	tst.w	r9, #1
 80091e4:	d022      	beq.n	800922c <__cvt+0xac>
 80091e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80091ea:	eb07 0906 	add.w	r9, r7, r6
 80091ee:	d110      	bne.n	8009212 <__cvt+0x92>
 80091f0:	783b      	ldrb	r3, [r7, #0]
 80091f2:	2b30      	cmp	r3, #48	; 0x30
 80091f4:	d10a      	bne.n	800920c <__cvt+0x8c>
 80091f6:	2200      	movs	r2, #0
 80091f8:	2300      	movs	r3, #0
 80091fa:	4620      	mov	r0, r4
 80091fc:	4629      	mov	r1, r5
 80091fe:	f7f7 fc8b 	bl	8000b18 <__aeabi_dcmpeq>
 8009202:	b918      	cbnz	r0, 800920c <__cvt+0x8c>
 8009204:	f1c6 0601 	rsb	r6, r6, #1
 8009208:	f8ca 6000 	str.w	r6, [sl]
 800920c:	f8da 3000 	ldr.w	r3, [sl]
 8009210:	4499      	add	r9, r3
 8009212:	2200      	movs	r2, #0
 8009214:	2300      	movs	r3, #0
 8009216:	4620      	mov	r0, r4
 8009218:	4629      	mov	r1, r5
 800921a:	f7f7 fc7d 	bl	8000b18 <__aeabi_dcmpeq>
 800921e:	b108      	cbz	r0, 8009224 <__cvt+0xa4>
 8009220:	f8cd 900c 	str.w	r9, [sp, #12]
 8009224:	2230      	movs	r2, #48	; 0x30
 8009226:	9b03      	ldr	r3, [sp, #12]
 8009228:	454b      	cmp	r3, r9
 800922a:	d307      	bcc.n	800923c <__cvt+0xbc>
 800922c:	9b03      	ldr	r3, [sp, #12]
 800922e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009230:	1bdb      	subs	r3, r3, r7
 8009232:	4638      	mov	r0, r7
 8009234:	6013      	str	r3, [r2, #0]
 8009236:	b004      	add	sp, #16
 8009238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800923c:	1c59      	adds	r1, r3, #1
 800923e:	9103      	str	r1, [sp, #12]
 8009240:	701a      	strb	r2, [r3, #0]
 8009242:	e7f0      	b.n	8009226 <__cvt+0xa6>

08009244 <__exponent>:
 8009244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009246:	4603      	mov	r3, r0
 8009248:	2900      	cmp	r1, #0
 800924a:	bfb8      	it	lt
 800924c:	4249      	neglt	r1, r1
 800924e:	f803 2b02 	strb.w	r2, [r3], #2
 8009252:	bfb4      	ite	lt
 8009254:	222d      	movlt	r2, #45	; 0x2d
 8009256:	222b      	movge	r2, #43	; 0x2b
 8009258:	2909      	cmp	r1, #9
 800925a:	7042      	strb	r2, [r0, #1]
 800925c:	dd2a      	ble.n	80092b4 <__exponent+0x70>
 800925e:	f10d 0207 	add.w	r2, sp, #7
 8009262:	4617      	mov	r7, r2
 8009264:	260a      	movs	r6, #10
 8009266:	4694      	mov	ip, r2
 8009268:	fb91 f5f6 	sdiv	r5, r1, r6
 800926c:	fb06 1415 	mls	r4, r6, r5, r1
 8009270:	3430      	adds	r4, #48	; 0x30
 8009272:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009276:	460c      	mov	r4, r1
 8009278:	2c63      	cmp	r4, #99	; 0x63
 800927a:	f102 32ff 	add.w	r2, r2, #4294967295
 800927e:	4629      	mov	r1, r5
 8009280:	dcf1      	bgt.n	8009266 <__exponent+0x22>
 8009282:	3130      	adds	r1, #48	; 0x30
 8009284:	f1ac 0402 	sub.w	r4, ip, #2
 8009288:	f802 1c01 	strb.w	r1, [r2, #-1]
 800928c:	1c41      	adds	r1, r0, #1
 800928e:	4622      	mov	r2, r4
 8009290:	42ba      	cmp	r2, r7
 8009292:	d30a      	bcc.n	80092aa <__exponent+0x66>
 8009294:	f10d 0209 	add.w	r2, sp, #9
 8009298:	eba2 020c 	sub.w	r2, r2, ip
 800929c:	42bc      	cmp	r4, r7
 800929e:	bf88      	it	hi
 80092a0:	2200      	movhi	r2, #0
 80092a2:	4413      	add	r3, r2
 80092a4:	1a18      	subs	r0, r3, r0
 80092a6:	b003      	add	sp, #12
 80092a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092aa:	f812 5b01 	ldrb.w	r5, [r2], #1
 80092ae:	f801 5f01 	strb.w	r5, [r1, #1]!
 80092b2:	e7ed      	b.n	8009290 <__exponent+0x4c>
 80092b4:	2330      	movs	r3, #48	; 0x30
 80092b6:	3130      	adds	r1, #48	; 0x30
 80092b8:	7083      	strb	r3, [r0, #2]
 80092ba:	70c1      	strb	r1, [r0, #3]
 80092bc:	1d03      	adds	r3, r0, #4
 80092be:	e7f1      	b.n	80092a4 <__exponent+0x60>

080092c0 <_printf_float>:
 80092c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c4:	ed2d 8b02 	vpush	{d8}
 80092c8:	b08d      	sub	sp, #52	; 0x34
 80092ca:	460c      	mov	r4, r1
 80092cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80092d0:	4616      	mov	r6, r2
 80092d2:	461f      	mov	r7, r3
 80092d4:	4605      	mov	r5, r0
 80092d6:	f000 fef7 	bl	800a0c8 <_localeconv_r>
 80092da:	f8d0 a000 	ldr.w	sl, [r0]
 80092de:	4650      	mov	r0, sl
 80092e0:	f7f6 ffee 	bl	80002c0 <strlen>
 80092e4:	2300      	movs	r3, #0
 80092e6:	930a      	str	r3, [sp, #40]	; 0x28
 80092e8:	6823      	ldr	r3, [r4, #0]
 80092ea:	9305      	str	r3, [sp, #20]
 80092ec:	f8d8 3000 	ldr.w	r3, [r8]
 80092f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80092f4:	3307      	adds	r3, #7
 80092f6:	f023 0307 	bic.w	r3, r3, #7
 80092fa:	f103 0208 	add.w	r2, r3, #8
 80092fe:	f8c8 2000 	str.w	r2, [r8]
 8009302:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009306:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800930a:	9307      	str	r3, [sp, #28]
 800930c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009310:	ee08 0a10 	vmov	s16, r0
 8009314:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009318:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800931c:	4b9e      	ldr	r3, [pc, #632]	; (8009598 <_printf_float+0x2d8>)
 800931e:	f04f 32ff 	mov.w	r2, #4294967295
 8009322:	f7f7 fc2b 	bl	8000b7c <__aeabi_dcmpun>
 8009326:	bb88      	cbnz	r0, 800938c <_printf_float+0xcc>
 8009328:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800932c:	4b9a      	ldr	r3, [pc, #616]	; (8009598 <_printf_float+0x2d8>)
 800932e:	f04f 32ff 	mov.w	r2, #4294967295
 8009332:	f7f7 fc05 	bl	8000b40 <__aeabi_dcmple>
 8009336:	bb48      	cbnz	r0, 800938c <_printf_float+0xcc>
 8009338:	2200      	movs	r2, #0
 800933a:	2300      	movs	r3, #0
 800933c:	4640      	mov	r0, r8
 800933e:	4649      	mov	r1, r9
 8009340:	f7f7 fbf4 	bl	8000b2c <__aeabi_dcmplt>
 8009344:	b110      	cbz	r0, 800934c <_printf_float+0x8c>
 8009346:	232d      	movs	r3, #45	; 0x2d
 8009348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800934c:	4a93      	ldr	r2, [pc, #588]	; (800959c <_printf_float+0x2dc>)
 800934e:	4b94      	ldr	r3, [pc, #592]	; (80095a0 <_printf_float+0x2e0>)
 8009350:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009354:	bf94      	ite	ls
 8009356:	4690      	movls	r8, r2
 8009358:	4698      	movhi	r8, r3
 800935a:	2303      	movs	r3, #3
 800935c:	6123      	str	r3, [r4, #16]
 800935e:	9b05      	ldr	r3, [sp, #20]
 8009360:	f023 0304 	bic.w	r3, r3, #4
 8009364:	6023      	str	r3, [r4, #0]
 8009366:	f04f 0900 	mov.w	r9, #0
 800936a:	9700      	str	r7, [sp, #0]
 800936c:	4633      	mov	r3, r6
 800936e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009370:	4621      	mov	r1, r4
 8009372:	4628      	mov	r0, r5
 8009374:	f000 f9da 	bl	800972c <_printf_common>
 8009378:	3001      	adds	r0, #1
 800937a:	f040 8090 	bne.w	800949e <_printf_float+0x1de>
 800937e:	f04f 30ff 	mov.w	r0, #4294967295
 8009382:	b00d      	add	sp, #52	; 0x34
 8009384:	ecbd 8b02 	vpop	{d8}
 8009388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800938c:	4642      	mov	r2, r8
 800938e:	464b      	mov	r3, r9
 8009390:	4640      	mov	r0, r8
 8009392:	4649      	mov	r1, r9
 8009394:	f7f7 fbf2 	bl	8000b7c <__aeabi_dcmpun>
 8009398:	b140      	cbz	r0, 80093ac <_printf_float+0xec>
 800939a:	464b      	mov	r3, r9
 800939c:	2b00      	cmp	r3, #0
 800939e:	bfbc      	itt	lt
 80093a0:	232d      	movlt	r3, #45	; 0x2d
 80093a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80093a6:	4a7f      	ldr	r2, [pc, #508]	; (80095a4 <_printf_float+0x2e4>)
 80093a8:	4b7f      	ldr	r3, [pc, #508]	; (80095a8 <_printf_float+0x2e8>)
 80093aa:	e7d1      	b.n	8009350 <_printf_float+0x90>
 80093ac:	6863      	ldr	r3, [r4, #4]
 80093ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80093b2:	9206      	str	r2, [sp, #24]
 80093b4:	1c5a      	adds	r2, r3, #1
 80093b6:	d13f      	bne.n	8009438 <_printf_float+0x178>
 80093b8:	2306      	movs	r3, #6
 80093ba:	6063      	str	r3, [r4, #4]
 80093bc:	9b05      	ldr	r3, [sp, #20]
 80093be:	6861      	ldr	r1, [r4, #4]
 80093c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80093c4:	2300      	movs	r3, #0
 80093c6:	9303      	str	r3, [sp, #12]
 80093c8:	ab0a      	add	r3, sp, #40	; 0x28
 80093ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80093ce:	ab09      	add	r3, sp, #36	; 0x24
 80093d0:	ec49 8b10 	vmov	d0, r8, r9
 80093d4:	9300      	str	r3, [sp, #0]
 80093d6:	6022      	str	r2, [r4, #0]
 80093d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80093dc:	4628      	mov	r0, r5
 80093de:	f7ff fecf 	bl	8009180 <__cvt>
 80093e2:	9b06      	ldr	r3, [sp, #24]
 80093e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093e6:	2b47      	cmp	r3, #71	; 0x47
 80093e8:	4680      	mov	r8, r0
 80093ea:	d108      	bne.n	80093fe <_printf_float+0x13e>
 80093ec:	1cc8      	adds	r0, r1, #3
 80093ee:	db02      	blt.n	80093f6 <_printf_float+0x136>
 80093f0:	6863      	ldr	r3, [r4, #4]
 80093f2:	4299      	cmp	r1, r3
 80093f4:	dd41      	ble.n	800947a <_printf_float+0x1ba>
 80093f6:	f1ab 0302 	sub.w	r3, fp, #2
 80093fa:	fa5f fb83 	uxtb.w	fp, r3
 80093fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009402:	d820      	bhi.n	8009446 <_printf_float+0x186>
 8009404:	3901      	subs	r1, #1
 8009406:	465a      	mov	r2, fp
 8009408:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800940c:	9109      	str	r1, [sp, #36]	; 0x24
 800940e:	f7ff ff19 	bl	8009244 <__exponent>
 8009412:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009414:	1813      	adds	r3, r2, r0
 8009416:	2a01      	cmp	r2, #1
 8009418:	4681      	mov	r9, r0
 800941a:	6123      	str	r3, [r4, #16]
 800941c:	dc02      	bgt.n	8009424 <_printf_float+0x164>
 800941e:	6822      	ldr	r2, [r4, #0]
 8009420:	07d2      	lsls	r2, r2, #31
 8009422:	d501      	bpl.n	8009428 <_printf_float+0x168>
 8009424:	3301      	adds	r3, #1
 8009426:	6123      	str	r3, [r4, #16]
 8009428:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800942c:	2b00      	cmp	r3, #0
 800942e:	d09c      	beq.n	800936a <_printf_float+0xaa>
 8009430:	232d      	movs	r3, #45	; 0x2d
 8009432:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009436:	e798      	b.n	800936a <_printf_float+0xaa>
 8009438:	9a06      	ldr	r2, [sp, #24]
 800943a:	2a47      	cmp	r2, #71	; 0x47
 800943c:	d1be      	bne.n	80093bc <_printf_float+0xfc>
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1bc      	bne.n	80093bc <_printf_float+0xfc>
 8009442:	2301      	movs	r3, #1
 8009444:	e7b9      	b.n	80093ba <_printf_float+0xfa>
 8009446:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800944a:	d118      	bne.n	800947e <_printf_float+0x1be>
 800944c:	2900      	cmp	r1, #0
 800944e:	6863      	ldr	r3, [r4, #4]
 8009450:	dd0b      	ble.n	800946a <_printf_float+0x1aa>
 8009452:	6121      	str	r1, [r4, #16]
 8009454:	b913      	cbnz	r3, 800945c <_printf_float+0x19c>
 8009456:	6822      	ldr	r2, [r4, #0]
 8009458:	07d0      	lsls	r0, r2, #31
 800945a:	d502      	bpl.n	8009462 <_printf_float+0x1a2>
 800945c:	3301      	adds	r3, #1
 800945e:	440b      	add	r3, r1
 8009460:	6123      	str	r3, [r4, #16]
 8009462:	65a1      	str	r1, [r4, #88]	; 0x58
 8009464:	f04f 0900 	mov.w	r9, #0
 8009468:	e7de      	b.n	8009428 <_printf_float+0x168>
 800946a:	b913      	cbnz	r3, 8009472 <_printf_float+0x1b2>
 800946c:	6822      	ldr	r2, [r4, #0]
 800946e:	07d2      	lsls	r2, r2, #31
 8009470:	d501      	bpl.n	8009476 <_printf_float+0x1b6>
 8009472:	3302      	adds	r3, #2
 8009474:	e7f4      	b.n	8009460 <_printf_float+0x1a0>
 8009476:	2301      	movs	r3, #1
 8009478:	e7f2      	b.n	8009460 <_printf_float+0x1a0>
 800947a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800947e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009480:	4299      	cmp	r1, r3
 8009482:	db05      	blt.n	8009490 <_printf_float+0x1d0>
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	6121      	str	r1, [r4, #16]
 8009488:	07d8      	lsls	r0, r3, #31
 800948a:	d5ea      	bpl.n	8009462 <_printf_float+0x1a2>
 800948c:	1c4b      	adds	r3, r1, #1
 800948e:	e7e7      	b.n	8009460 <_printf_float+0x1a0>
 8009490:	2900      	cmp	r1, #0
 8009492:	bfd4      	ite	le
 8009494:	f1c1 0202 	rsble	r2, r1, #2
 8009498:	2201      	movgt	r2, #1
 800949a:	4413      	add	r3, r2
 800949c:	e7e0      	b.n	8009460 <_printf_float+0x1a0>
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	055a      	lsls	r2, r3, #21
 80094a2:	d407      	bmi.n	80094b4 <_printf_float+0x1f4>
 80094a4:	6923      	ldr	r3, [r4, #16]
 80094a6:	4642      	mov	r2, r8
 80094a8:	4631      	mov	r1, r6
 80094aa:	4628      	mov	r0, r5
 80094ac:	47b8      	blx	r7
 80094ae:	3001      	adds	r0, #1
 80094b0:	d12c      	bne.n	800950c <_printf_float+0x24c>
 80094b2:	e764      	b.n	800937e <_printf_float+0xbe>
 80094b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80094b8:	f240 80e0 	bls.w	800967c <_printf_float+0x3bc>
 80094bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094c0:	2200      	movs	r2, #0
 80094c2:	2300      	movs	r3, #0
 80094c4:	f7f7 fb28 	bl	8000b18 <__aeabi_dcmpeq>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	d034      	beq.n	8009536 <_printf_float+0x276>
 80094cc:	4a37      	ldr	r2, [pc, #220]	; (80095ac <_printf_float+0x2ec>)
 80094ce:	2301      	movs	r3, #1
 80094d0:	4631      	mov	r1, r6
 80094d2:	4628      	mov	r0, r5
 80094d4:	47b8      	blx	r7
 80094d6:	3001      	adds	r0, #1
 80094d8:	f43f af51 	beq.w	800937e <_printf_float+0xbe>
 80094dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094e0:	429a      	cmp	r2, r3
 80094e2:	db02      	blt.n	80094ea <_printf_float+0x22a>
 80094e4:	6823      	ldr	r3, [r4, #0]
 80094e6:	07d8      	lsls	r0, r3, #31
 80094e8:	d510      	bpl.n	800950c <_printf_float+0x24c>
 80094ea:	ee18 3a10 	vmov	r3, s16
 80094ee:	4652      	mov	r2, sl
 80094f0:	4631      	mov	r1, r6
 80094f2:	4628      	mov	r0, r5
 80094f4:	47b8      	blx	r7
 80094f6:	3001      	adds	r0, #1
 80094f8:	f43f af41 	beq.w	800937e <_printf_float+0xbe>
 80094fc:	f04f 0800 	mov.w	r8, #0
 8009500:	f104 091a 	add.w	r9, r4, #26
 8009504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009506:	3b01      	subs	r3, #1
 8009508:	4543      	cmp	r3, r8
 800950a:	dc09      	bgt.n	8009520 <_printf_float+0x260>
 800950c:	6823      	ldr	r3, [r4, #0]
 800950e:	079b      	lsls	r3, r3, #30
 8009510:	f100 8107 	bmi.w	8009722 <_printf_float+0x462>
 8009514:	68e0      	ldr	r0, [r4, #12]
 8009516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009518:	4298      	cmp	r0, r3
 800951a:	bfb8      	it	lt
 800951c:	4618      	movlt	r0, r3
 800951e:	e730      	b.n	8009382 <_printf_float+0xc2>
 8009520:	2301      	movs	r3, #1
 8009522:	464a      	mov	r2, r9
 8009524:	4631      	mov	r1, r6
 8009526:	4628      	mov	r0, r5
 8009528:	47b8      	blx	r7
 800952a:	3001      	adds	r0, #1
 800952c:	f43f af27 	beq.w	800937e <_printf_float+0xbe>
 8009530:	f108 0801 	add.w	r8, r8, #1
 8009534:	e7e6      	b.n	8009504 <_printf_float+0x244>
 8009536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009538:	2b00      	cmp	r3, #0
 800953a:	dc39      	bgt.n	80095b0 <_printf_float+0x2f0>
 800953c:	4a1b      	ldr	r2, [pc, #108]	; (80095ac <_printf_float+0x2ec>)
 800953e:	2301      	movs	r3, #1
 8009540:	4631      	mov	r1, r6
 8009542:	4628      	mov	r0, r5
 8009544:	47b8      	blx	r7
 8009546:	3001      	adds	r0, #1
 8009548:	f43f af19 	beq.w	800937e <_printf_float+0xbe>
 800954c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009550:	4313      	orrs	r3, r2
 8009552:	d102      	bne.n	800955a <_printf_float+0x29a>
 8009554:	6823      	ldr	r3, [r4, #0]
 8009556:	07d9      	lsls	r1, r3, #31
 8009558:	d5d8      	bpl.n	800950c <_printf_float+0x24c>
 800955a:	ee18 3a10 	vmov	r3, s16
 800955e:	4652      	mov	r2, sl
 8009560:	4631      	mov	r1, r6
 8009562:	4628      	mov	r0, r5
 8009564:	47b8      	blx	r7
 8009566:	3001      	adds	r0, #1
 8009568:	f43f af09 	beq.w	800937e <_printf_float+0xbe>
 800956c:	f04f 0900 	mov.w	r9, #0
 8009570:	f104 0a1a 	add.w	sl, r4, #26
 8009574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009576:	425b      	negs	r3, r3
 8009578:	454b      	cmp	r3, r9
 800957a:	dc01      	bgt.n	8009580 <_printf_float+0x2c0>
 800957c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800957e:	e792      	b.n	80094a6 <_printf_float+0x1e6>
 8009580:	2301      	movs	r3, #1
 8009582:	4652      	mov	r2, sl
 8009584:	4631      	mov	r1, r6
 8009586:	4628      	mov	r0, r5
 8009588:	47b8      	blx	r7
 800958a:	3001      	adds	r0, #1
 800958c:	f43f aef7 	beq.w	800937e <_printf_float+0xbe>
 8009590:	f109 0901 	add.w	r9, r9, #1
 8009594:	e7ee      	b.n	8009574 <_printf_float+0x2b4>
 8009596:	bf00      	nop
 8009598:	7fefffff 	.word	0x7fefffff
 800959c:	0800ee78 	.word	0x0800ee78
 80095a0:	0800ee7c 	.word	0x0800ee7c
 80095a4:	0800ee80 	.word	0x0800ee80
 80095a8:	0800ee84 	.word	0x0800ee84
 80095ac:	0800ee88 	.word	0x0800ee88
 80095b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80095b4:	429a      	cmp	r2, r3
 80095b6:	bfa8      	it	ge
 80095b8:	461a      	movge	r2, r3
 80095ba:	2a00      	cmp	r2, #0
 80095bc:	4691      	mov	r9, r2
 80095be:	dc37      	bgt.n	8009630 <_printf_float+0x370>
 80095c0:	f04f 0b00 	mov.w	fp, #0
 80095c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095c8:	f104 021a 	add.w	r2, r4, #26
 80095cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80095ce:	9305      	str	r3, [sp, #20]
 80095d0:	eba3 0309 	sub.w	r3, r3, r9
 80095d4:	455b      	cmp	r3, fp
 80095d6:	dc33      	bgt.n	8009640 <_printf_float+0x380>
 80095d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095dc:	429a      	cmp	r2, r3
 80095de:	db3b      	blt.n	8009658 <_printf_float+0x398>
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	07da      	lsls	r2, r3, #31
 80095e4:	d438      	bmi.n	8009658 <_printf_float+0x398>
 80095e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80095ea:	eba2 0903 	sub.w	r9, r2, r3
 80095ee:	9b05      	ldr	r3, [sp, #20]
 80095f0:	1ad2      	subs	r2, r2, r3
 80095f2:	4591      	cmp	r9, r2
 80095f4:	bfa8      	it	ge
 80095f6:	4691      	movge	r9, r2
 80095f8:	f1b9 0f00 	cmp.w	r9, #0
 80095fc:	dc35      	bgt.n	800966a <_printf_float+0x3aa>
 80095fe:	f04f 0800 	mov.w	r8, #0
 8009602:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009606:	f104 0a1a 	add.w	sl, r4, #26
 800960a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800960e:	1a9b      	subs	r3, r3, r2
 8009610:	eba3 0309 	sub.w	r3, r3, r9
 8009614:	4543      	cmp	r3, r8
 8009616:	f77f af79 	ble.w	800950c <_printf_float+0x24c>
 800961a:	2301      	movs	r3, #1
 800961c:	4652      	mov	r2, sl
 800961e:	4631      	mov	r1, r6
 8009620:	4628      	mov	r0, r5
 8009622:	47b8      	blx	r7
 8009624:	3001      	adds	r0, #1
 8009626:	f43f aeaa 	beq.w	800937e <_printf_float+0xbe>
 800962a:	f108 0801 	add.w	r8, r8, #1
 800962e:	e7ec      	b.n	800960a <_printf_float+0x34a>
 8009630:	4613      	mov	r3, r2
 8009632:	4631      	mov	r1, r6
 8009634:	4642      	mov	r2, r8
 8009636:	4628      	mov	r0, r5
 8009638:	47b8      	blx	r7
 800963a:	3001      	adds	r0, #1
 800963c:	d1c0      	bne.n	80095c0 <_printf_float+0x300>
 800963e:	e69e      	b.n	800937e <_printf_float+0xbe>
 8009640:	2301      	movs	r3, #1
 8009642:	4631      	mov	r1, r6
 8009644:	4628      	mov	r0, r5
 8009646:	9205      	str	r2, [sp, #20]
 8009648:	47b8      	blx	r7
 800964a:	3001      	adds	r0, #1
 800964c:	f43f ae97 	beq.w	800937e <_printf_float+0xbe>
 8009650:	9a05      	ldr	r2, [sp, #20]
 8009652:	f10b 0b01 	add.w	fp, fp, #1
 8009656:	e7b9      	b.n	80095cc <_printf_float+0x30c>
 8009658:	ee18 3a10 	vmov	r3, s16
 800965c:	4652      	mov	r2, sl
 800965e:	4631      	mov	r1, r6
 8009660:	4628      	mov	r0, r5
 8009662:	47b8      	blx	r7
 8009664:	3001      	adds	r0, #1
 8009666:	d1be      	bne.n	80095e6 <_printf_float+0x326>
 8009668:	e689      	b.n	800937e <_printf_float+0xbe>
 800966a:	9a05      	ldr	r2, [sp, #20]
 800966c:	464b      	mov	r3, r9
 800966e:	4442      	add	r2, r8
 8009670:	4631      	mov	r1, r6
 8009672:	4628      	mov	r0, r5
 8009674:	47b8      	blx	r7
 8009676:	3001      	adds	r0, #1
 8009678:	d1c1      	bne.n	80095fe <_printf_float+0x33e>
 800967a:	e680      	b.n	800937e <_printf_float+0xbe>
 800967c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800967e:	2a01      	cmp	r2, #1
 8009680:	dc01      	bgt.n	8009686 <_printf_float+0x3c6>
 8009682:	07db      	lsls	r3, r3, #31
 8009684:	d53a      	bpl.n	80096fc <_printf_float+0x43c>
 8009686:	2301      	movs	r3, #1
 8009688:	4642      	mov	r2, r8
 800968a:	4631      	mov	r1, r6
 800968c:	4628      	mov	r0, r5
 800968e:	47b8      	blx	r7
 8009690:	3001      	adds	r0, #1
 8009692:	f43f ae74 	beq.w	800937e <_printf_float+0xbe>
 8009696:	ee18 3a10 	vmov	r3, s16
 800969a:	4652      	mov	r2, sl
 800969c:	4631      	mov	r1, r6
 800969e:	4628      	mov	r0, r5
 80096a0:	47b8      	blx	r7
 80096a2:	3001      	adds	r0, #1
 80096a4:	f43f ae6b 	beq.w	800937e <_printf_float+0xbe>
 80096a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80096ac:	2200      	movs	r2, #0
 80096ae:	2300      	movs	r3, #0
 80096b0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80096b4:	f7f7 fa30 	bl	8000b18 <__aeabi_dcmpeq>
 80096b8:	b9d8      	cbnz	r0, 80096f2 <_printf_float+0x432>
 80096ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 80096be:	f108 0201 	add.w	r2, r8, #1
 80096c2:	4631      	mov	r1, r6
 80096c4:	4628      	mov	r0, r5
 80096c6:	47b8      	blx	r7
 80096c8:	3001      	adds	r0, #1
 80096ca:	d10e      	bne.n	80096ea <_printf_float+0x42a>
 80096cc:	e657      	b.n	800937e <_printf_float+0xbe>
 80096ce:	2301      	movs	r3, #1
 80096d0:	4652      	mov	r2, sl
 80096d2:	4631      	mov	r1, r6
 80096d4:	4628      	mov	r0, r5
 80096d6:	47b8      	blx	r7
 80096d8:	3001      	adds	r0, #1
 80096da:	f43f ae50 	beq.w	800937e <_printf_float+0xbe>
 80096de:	f108 0801 	add.w	r8, r8, #1
 80096e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096e4:	3b01      	subs	r3, #1
 80096e6:	4543      	cmp	r3, r8
 80096e8:	dcf1      	bgt.n	80096ce <_printf_float+0x40e>
 80096ea:	464b      	mov	r3, r9
 80096ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80096f0:	e6da      	b.n	80094a8 <_printf_float+0x1e8>
 80096f2:	f04f 0800 	mov.w	r8, #0
 80096f6:	f104 0a1a 	add.w	sl, r4, #26
 80096fa:	e7f2      	b.n	80096e2 <_printf_float+0x422>
 80096fc:	2301      	movs	r3, #1
 80096fe:	4642      	mov	r2, r8
 8009700:	e7df      	b.n	80096c2 <_printf_float+0x402>
 8009702:	2301      	movs	r3, #1
 8009704:	464a      	mov	r2, r9
 8009706:	4631      	mov	r1, r6
 8009708:	4628      	mov	r0, r5
 800970a:	47b8      	blx	r7
 800970c:	3001      	adds	r0, #1
 800970e:	f43f ae36 	beq.w	800937e <_printf_float+0xbe>
 8009712:	f108 0801 	add.w	r8, r8, #1
 8009716:	68e3      	ldr	r3, [r4, #12]
 8009718:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800971a:	1a5b      	subs	r3, r3, r1
 800971c:	4543      	cmp	r3, r8
 800971e:	dcf0      	bgt.n	8009702 <_printf_float+0x442>
 8009720:	e6f8      	b.n	8009514 <_printf_float+0x254>
 8009722:	f04f 0800 	mov.w	r8, #0
 8009726:	f104 0919 	add.w	r9, r4, #25
 800972a:	e7f4      	b.n	8009716 <_printf_float+0x456>

0800972c <_printf_common>:
 800972c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009730:	4616      	mov	r6, r2
 8009732:	4699      	mov	r9, r3
 8009734:	688a      	ldr	r2, [r1, #8]
 8009736:	690b      	ldr	r3, [r1, #16]
 8009738:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800973c:	4293      	cmp	r3, r2
 800973e:	bfb8      	it	lt
 8009740:	4613      	movlt	r3, r2
 8009742:	6033      	str	r3, [r6, #0]
 8009744:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009748:	4607      	mov	r7, r0
 800974a:	460c      	mov	r4, r1
 800974c:	b10a      	cbz	r2, 8009752 <_printf_common+0x26>
 800974e:	3301      	adds	r3, #1
 8009750:	6033      	str	r3, [r6, #0]
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	0699      	lsls	r1, r3, #26
 8009756:	bf42      	ittt	mi
 8009758:	6833      	ldrmi	r3, [r6, #0]
 800975a:	3302      	addmi	r3, #2
 800975c:	6033      	strmi	r3, [r6, #0]
 800975e:	6825      	ldr	r5, [r4, #0]
 8009760:	f015 0506 	ands.w	r5, r5, #6
 8009764:	d106      	bne.n	8009774 <_printf_common+0x48>
 8009766:	f104 0a19 	add.w	sl, r4, #25
 800976a:	68e3      	ldr	r3, [r4, #12]
 800976c:	6832      	ldr	r2, [r6, #0]
 800976e:	1a9b      	subs	r3, r3, r2
 8009770:	42ab      	cmp	r3, r5
 8009772:	dc26      	bgt.n	80097c2 <_printf_common+0x96>
 8009774:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009778:	1e13      	subs	r3, r2, #0
 800977a:	6822      	ldr	r2, [r4, #0]
 800977c:	bf18      	it	ne
 800977e:	2301      	movne	r3, #1
 8009780:	0692      	lsls	r2, r2, #26
 8009782:	d42b      	bmi.n	80097dc <_printf_common+0xb0>
 8009784:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009788:	4649      	mov	r1, r9
 800978a:	4638      	mov	r0, r7
 800978c:	47c0      	blx	r8
 800978e:	3001      	adds	r0, #1
 8009790:	d01e      	beq.n	80097d0 <_printf_common+0xa4>
 8009792:	6823      	ldr	r3, [r4, #0]
 8009794:	6922      	ldr	r2, [r4, #16]
 8009796:	f003 0306 	and.w	r3, r3, #6
 800979a:	2b04      	cmp	r3, #4
 800979c:	bf02      	ittt	eq
 800979e:	68e5      	ldreq	r5, [r4, #12]
 80097a0:	6833      	ldreq	r3, [r6, #0]
 80097a2:	1aed      	subeq	r5, r5, r3
 80097a4:	68a3      	ldr	r3, [r4, #8]
 80097a6:	bf0c      	ite	eq
 80097a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097ac:	2500      	movne	r5, #0
 80097ae:	4293      	cmp	r3, r2
 80097b0:	bfc4      	itt	gt
 80097b2:	1a9b      	subgt	r3, r3, r2
 80097b4:	18ed      	addgt	r5, r5, r3
 80097b6:	2600      	movs	r6, #0
 80097b8:	341a      	adds	r4, #26
 80097ba:	42b5      	cmp	r5, r6
 80097bc:	d11a      	bne.n	80097f4 <_printf_common+0xc8>
 80097be:	2000      	movs	r0, #0
 80097c0:	e008      	b.n	80097d4 <_printf_common+0xa8>
 80097c2:	2301      	movs	r3, #1
 80097c4:	4652      	mov	r2, sl
 80097c6:	4649      	mov	r1, r9
 80097c8:	4638      	mov	r0, r7
 80097ca:	47c0      	blx	r8
 80097cc:	3001      	adds	r0, #1
 80097ce:	d103      	bne.n	80097d8 <_printf_common+0xac>
 80097d0:	f04f 30ff 	mov.w	r0, #4294967295
 80097d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d8:	3501      	adds	r5, #1
 80097da:	e7c6      	b.n	800976a <_printf_common+0x3e>
 80097dc:	18e1      	adds	r1, r4, r3
 80097de:	1c5a      	adds	r2, r3, #1
 80097e0:	2030      	movs	r0, #48	; 0x30
 80097e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097e6:	4422      	add	r2, r4
 80097e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097f0:	3302      	adds	r3, #2
 80097f2:	e7c7      	b.n	8009784 <_printf_common+0x58>
 80097f4:	2301      	movs	r3, #1
 80097f6:	4622      	mov	r2, r4
 80097f8:	4649      	mov	r1, r9
 80097fa:	4638      	mov	r0, r7
 80097fc:	47c0      	blx	r8
 80097fe:	3001      	adds	r0, #1
 8009800:	d0e6      	beq.n	80097d0 <_printf_common+0xa4>
 8009802:	3601      	adds	r6, #1
 8009804:	e7d9      	b.n	80097ba <_printf_common+0x8e>
	...

08009808 <_printf_i>:
 8009808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800980c:	7e0f      	ldrb	r7, [r1, #24]
 800980e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009810:	2f78      	cmp	r7, #120	; 0x78
 8009812:	4691      	mov	r9, r2
 8009814:	4680      	mov	r8, r0
 8009816:	460c      	mov	r4, r1
 8009818:	469a      	mov	sl, r3
 800981a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800981e:	d807      	bhi.n	8009830 <_printf_i+0x28>
 8009820:	2f62      	cmp	r7, #98	; 0x62
 8009822:	d80a      	bhi.n	800983a <_printf_i+0x32>
 8009824:	2f00      	cmp	r7, #0
 8009826:	f000 80d4 	beq.w	80099d2 <_printf_i+0x1ca>
 800982a:	2f58      	cmp	r7, #88	; 0x58
 800982c:	f000 80c0 	beq.w	80099b0 <_printf_i+0x1a8>
 8009830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009834:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009838:	e03a      	b.n	80098b0 <_printf_i+0xa8>
 800983a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800983e:	2b15      	cmp	r3, #21
 8009840:	d8f6      	bhi.n	8009830 <_printf_i+0x28>
 8009842:	a101      	add	r1, pc, #4	; (adr r1, 8009848 <_printf_i+0x40>)
 8009844:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009848:	080098a1 	.word	0x080098a1
 800984c:	080098b5 	.word	0x080098b5
 8009850:	08009831 	.word	0x08009831
 8009854:	08009831 	.word	0x08009831
 8009858:	08009831 	.word	0x08009831
 800985c:	08009831 	.word	0x08009831
 8009860:	080098b5 	.word	0x080098b5
 8009864:	08009831 	.word	0x08009831
 8009868:	08009831 	.word	0x08009831
 800986c:	08009831 	.word	0x08009831
 8009870:	08009831 	.word	0x08009831
 8009874:	080099b9 	.word	0x080099b9
 8009878:	080098e1 	.word	0x080098e1
 800987c:	08009973 	.word	0x08009973
 8009880:	08009831 	.word	0x08009831
 8009884:	08009831 	.word	0x08009831
 8009888:	080099db 	.word	0x080099db
 800988c:	08009831 	.word	0x08009831
 8009890:	080098e1 	.word	0x080098e1
 8009894:	08009831 	.word	0x08009831
 8009898:	08009831 	.word	0x08009831
 800989c:	0800997b 	.word	0x0800997b
 80098a0:	682b      	ldr	r3, [r5, #0]
 80098a2:	1d1a      	adds	r2, r3, #4
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	602a      	str	r2, [r5, #0]
 80098a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098b0:	2301      	movs	r3, #1
 80098b2:	e09f      	b.n	80099f4 <_printf_i+0x1ec>
 80098b4:	6820      	ldr	r0, [r4, #0]
 80098b6:	682b      	ldr	r3, [r5, #0]
 80098b8:	0607      	lsls	r7, r0, #24
 80098ba:	f103 0104 	add.w	r1, r3, #4
 80098be:	6029      	str	r1, [r5, #0]
 80098c0:	d501      	bpl.n	80098c6 <_printf_i+0xbe>
 80098c2:	681e      	ldr	r6, [r3, #0]
 80098c4:	e003      	b.n	80098ce <_printf_i+0xc6>
 80098c6:	0646      	lsls	r6, r0, #25
 80098c8:	d5fb      	bpl.n	80098c2 <_printf_i+0xba>
 80098ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80098ce:	2e00      	cmp	r6, #0
 80098d0:	da03      	bge.n	80098da <_printf_i+0xd2>
 80098d2:	232d      	movs	r3, #45	; 0x2d
 80098d4:	4276      	negs	r6, r6
 80098d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098da:	485a      	ldr	r0, [pc, #360]	; (8009a44 <_printf_i+0x23c>)
 80098dc:	230a      	movs	r3, #10
 80098de:	e012      	b.n	8009906 <_printf_i+0xfe>
 80098e0:	682b      	ldr	r3, [r5, #0]
 80098e2:	6820      	ldr	r0, [r4, #0]
 80098e4:	1d19      	adds	r1, r3, #4
 80098e6:	6029      	str	r1, [r5, #0]
 80098e8:	0605      	lsls	r5, r0, #24
 80098ea:	d501      	bpl.n	80098f0 <_printf_i+0xe8>
 80098ec:	681e      	ldr	r6, [r3, #0]
 80098ee:	e002      	b.n	80098f6 <_printf_i+0xee>
 80098f0:	0641      	lsls	r1, r0, #25
 80098f2:	d5fb      	bpl.n	80098ec <_printf_i+0xe4>
 80098f4:	881e      	ldrh	r6, [r3, #0]
 80098f6:	4853      	ldr	r0, [pc, #332]	; (8009a44 <_printf_i+0x23c>)
 80098f8:	2f6f      	cmp	r7, #111	; 0x6f
 80098fa:	bf0c      	ite	eq
 80098fc:	2308      	moveq	r3, #8
 80098fe:	230a      	movne	r3, #10
 8009900:	2100      	movs	r1, #0
 8009902:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009906:	6865      	ldr	r5, [r4, #4]
 8009908:	60a5      	str	r5, [r4, #8]
 800990a:	2d00      	cmp	r5, #0
 800990c:	bfa2      	ittt	ge
 800990e:	6821      	ldrge	r1, [r4, #0]
 8009910:	f021 0104 	bicge.w	r1, r1, #4
 8009914:	6021      	strge	r1, [r4, #0]
 8009916:	b90e      	cbnz	r6, 800991c <_printf_i+0x114>
 8009918:	2d00      	cmp	r5, #0
 800991a:	d04b      	beq.n	80099b4 <_printf_i+0x1ac>
 800991c:	4615      	mov	r5, r2
 800991e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009922:	fb03 6711 	mls	r7, r3, r1, r6
 8009926:	5dc7      	ldrb	r7, [r0, r7]
 8009928:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800992c:	4637      	mov	r7, r6
 800992e:	42bb      	cmp	r3, r7
 8009930:	460e      	mov	r6, r1
 8009932:	d9f4      	bls.n	800991e <_printf_i+0x116>
 8009934:	2b08      	cmp	r3, #8
 8009936:	d10b      	bne.n	8009950 <_printf_i+0x148>
 8009938:	6823      	ldr	r3, [r4, #0]
 800993a:	07de      	lsls	r6, r3, #31
 800993c:	d508      	bpl.n	8009950 <_printf_i+0x148>
 800993e:	6923      	ldr	r3, [r4, #16]
 8009940:	6861      	ldr	r1, [r4, #4]
 8009942:	4299      	cmp	r1, r3
 8009944:	bfde      	ittt	le
 8009946:	2330      	movle	r3, #48	; 0x30
 8009948:	f805 3c01 	strble.w	r3, [r5, #-1]
 800994c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009950:	1b52      	subs	r2, r2, r5
 8009952:	6122      	str	r2, [r4, #16]
 8009954:	f8cd a000 	str.w	sl, [sp]
 8009958:	464b      	mov	r3, r9
 800995a:	aa03      	add	r2, sp, #12
 800995c:	4621      	mov	r1, r4
 800995e:	4640      	mov	r0, r8
 8009960:	f7ff fee4 	bl	800972c <_printf_common>
 8009964:	3001      	adds	r0, #1
 8009966:	d14a      	bne.n	80099fe <_printf_i+0x1f6>
 8009968:	f04f 30ff 	mov.w	r0, #4294967295
 800996c:	b004      	add	sp, #16
 800996e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	f043 0320 	orr.w	r3, r3, #32
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	4833      	ldr	r0, [pc, #204]	; (8009a48 <_printf_i+0x240>)
 800997c:	2778      	movs	r7, #120	; 0x78
 800997e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	6829      	ldr	r1, [r5, #0]
 8009986:	061f      	lsls	r7, r3, #24
 8009988:	f851 6b04 	ldr.w	r6, [r1], #4
 800998c:	d402      	bmi.n	8009994 <_printf_i+0x18c>
 800998e:	065f      	lsls	r7, r3, #25
 8009990:	bf48      	it	mi
 8009992:	b2b6      	uxthmi	r6, r6
 8009994:	07df      	lsls	r7, r3, #31
 8009996:	bf48      	it	mi
 8009998:	f043 0320 	orrmi.w	r3, r3, #32
 800999c:	6029      	str	r1, [r5, #0]
 800999e:	bf48      	it	mi
 80099a0:	6023      	strmi	r3, [r4, #0]
 80099a2:	b91e      	cbnz	r6, 80099ac <_printf_i+0x1a4>
 80099a4:	6823      	ldr	r3, [r4, #0]
 80099a6:	f023 0320 	bic.w	r3, r3, #32
 80099aa:	6023      	str	r3, [r4, #0]
 80099ac:	2310      	movs	r3, #16
 80099ae:	e7a7      	b.n	8009900 <_printf_i+0xf8>
 80099b0:	4824      	ldr	r0, [pc, #144]	; (8009a44 <_printf_i+0x23c>)
 80099b2:	e7e4      	b.n	800997e <_printf_i+0x176>
 80099b4:	4615      	mov	r5, r2
 80099b6:	e7bd      	b.n	8009934 <_printf_i+0x12c>
 80099b8:	682b      	ldr	r3, [r5, #0]
 80099ba:	6826      	ldr	r6, [r4, #0]
 80099bc:	6961      	ldr	r1, [r4, #20]
 80099be:	1d18      	adds	r0, r3, #4
 80099c0:	6028      	str	r0, [r5, #0]
 80099c2:	0635      	lsls	r5, r6, #24
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	d501      	bpl.n	80099cc <_printf_i+0x1c4>
 80099c8:	6019      	str	r1, [r3, #0]
 80099ca:	e002      	b.n	80099d2 <_printf_i+0x1ca>
 80099cc:	0670      	lsls	r0, r6, #25
 80099ce:	d5fb      	bpl.n	80099c8 <_printf_i+0x1c0>
 80099d0:	8019      	strh	r1, [r3, #0]
 80099d2:	2300      	movs	r3, #0
 80099d4:	6123      	str	r3, [r4, #16]
 80099d6:	4615      	mov	r5, r2
 80099d8:	e7bc      	b.n	8009954 <_printf_i+0x14c>
 80099da:	682b      	ldr	r3, [r5, #0]
 80099dc:	1d1a      	adds	r2, r3, #4
 80099de:	602a      	str	r2, [r5, #0]
 80099e0:	681d      	ldr	r5, [r3, #0]
 80099e2:	6862      	ldr	r2, [r4, #4]
 80099e4:	2100      	movs	r1, #0
 80099e6:	4628      	mov	r0, r5
 80099e8:	f7f6 fc1a 	bl	8000220 <memchr>
 80099ec:	b108      	cbz	r0, 80099f2 <_printf_i+0x1ea>
 80099ee:	1b40      	subs	r0, r0, r5
 80099f0:	6060      	str	r0, [r4, #4]
 80099f2:	6863      	ldr	r3, [r4, #4]
 80099f4:	6123      	str	r3, [r4, #16]
 80099f6:	2300      	movs	r3, #0
 80099f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099fc:	e7aa      	b.n	8009954 <_printf_i+0x14c>
 80099fe:	6923      	ldr	r3, [r4, #16]
 8009a00:	462a      	mov	r2, r5
 8009a02:	4649      	mov	r1, r9
 8009a04:	4640      	mov	r0, r8
 8009a06:	47d0      	blx	sl
 8009a08:	3001      	adds	r0, #1
 8009a0a:	d0ad      	beq.n	8009968 <_printf_i+0x160>
 8009a0c:	6823      	ldr	r3, [r4, #0]
 8009a0e:	079b      	lsls	r3, r3, #30
 8009a10:	d413      	bmi.n	8009a3a <_printf_i+0x232>
 8009a12:	68e0      	ldr	r0, [r4, #12]
 8009a14:	9b03      	ldr	r3, [sp, #12]
 8009a16:	4298      	cmp	r0, r3
 8009a18:	bfb8      	it	lt
 8009a1a:	4618      	movlt	r0, r3
 8009a1c:	e7a6      	b.n	800996c <_printf_i+0x164>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	4632      	mov	r2, r6
 8009a22:	4649      	mov	r1, r9
 8009a24:	4640      	mov	r0, r8
 8009a26:	47d0      	blx	sl
 8009a28:	3001      	adds	r0, #1
 8009a2a:	d09d      	beq.n	8009968 <_printf_i+0x160>
 8009a2c:	3501      	adds	r5, #1
 8009a2e:	68e3      	ldr	r3, [r4, #12]
 8009a30:	9903      	ldr	r1, [sp, #12]
 8009a32:	1a5b      	subs	r3, r3, r1
 8009a34:	42ab      	cmp	r3, r5
 8009a36:	dcf2      	bgt.n	8009a1e <_printf_i+0x216>
 8009a38:	e7eb      	b.n	8009a12 <_printf_i+0x20a>
 8009a3a:	2500      	movs	r5, #0
 8009a3c:	f104 0619 	add.w	r6, r4, #25
 8009a40:	e7f5      	b.n	8009a2e <_printf_i+0x226>
 8009a42:	bf00      	nop
 8009a44:	0800ee8a 	.word	0x0800ee8a
 8009a48:	0800ee9b 	.word	0x0800ee9b

08009a4c <_scanf_float>:
 8009a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a50:	b087      	sub	sp, #28
 8009a52:	4617      	mov	r7, r2
 8009a54:	9303      	str	r3, [sp, #12]
 8009a56:	688b      	ldr	r3, [r1, #8]
 8009a58:	1e5a      	subs	r2, r3, #1
 8009a5a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009a5e:	bf83      	ittte	hi
 8009a60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009a64:	195b      	addhi	r3, r3, r5
 8009a66:	9302      	strhi	r3, [sp, #8]
 8009a68:	2300      	movls	r3, #0
 8009a6a:	bf86      	itte	hi
 8009a6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009a70:	608b      	strhi	r3, [r1, #8]
 8009a72:	9302      	strls	r3, [sp, #8]
 8009a74:	680b      	ldr	r3, [r1, #0]
 8009a76:	468b      	mov	fp, r1
 8009a78:	2500      	movs	r5, #0
 8009a7a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009a7e:	f84b 3b1c 	str.w	r3, [fp], #28
 8009a82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009a86:	4680      	mov	r8, r0
 8009a88:	460c      	mov	r4, r1
 8009a8a:	465e      	mov	r6, fp
 8009a8c:	46aa      	mov	sl, r5
 8009a8e:	46a9      	mov	r9, r5
 8009a90:	9501      	str	r5, [sp, #4]
 8009a92:	68a2      	ldr	r2, [r4, #8]
 8009a94:	b152      	cbz	r2, 8009aac <_scanf_float+0x60>
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	2b4e      	cmp	r3, #78	; 0x4e
 8009a9c:	d864      	bhi.n	8009b68 <_scanf_float+0x11c>
 8009a9e:	2b40      	cmp	r3, #64	; 0x40
 8009aa0:	d83c      	bhi.n	8009b1c <_scanf_float+0xd0>
 8009aa2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009aa6:	b2c8      	uxtb	r0, r1
 8009aa8:	280e      	cmp	r0, #14
 8009aaa:	d93a      	bls.n	8009b22 <_scanf_float+0xd6>
 8009aac:	f1b9 0f00 	cmp.w	r9, #0
 8009ab0:	d003      	beq.n	8009aba <_scanf_float+0x6e>
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ab8:	6023      	str	r3, [r4, #0]
 8009aba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009abe:	f1ba 0f01 	cmp.w	sl, #1
 8009ac2:	f200 8113 	bhi.w	8009cec <_scanf_float+0x2a0>
 8009ac6:	455e      	cmp	r6, fp
 8009ac8:	f200 8105 	bhi.w	8009cd6 <_scanf_float+0x28a>
 8009acc:	2501      	movs	r5, #1
 8009ace:	4628      	mov	r0, r5
 8009ad0:	b007      	add	sp, #28
 8009ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009ada:	2a0d      	cmp	r2, #13
 8009adc:	d8e6      	bhi.n	8009aac <_scanf_float+0x60>
 8009ade:	a101      	add	r1, pc, #4	; (adr r1, 8009ae4 <_scanf_float+0x98>)
 8009ae0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009ae4:	08009c23 	.word	0x08009c23
 8009ae8:	08009aad 	.word	0x08009aad
 8009aec:	08009aad 	.word	0x08009aad
 8009af0:	08009aad 	.word	0x08009aad
 8009af4:	08009c83 	.word	0x08009c83
 8009af8:	08009c5b 	.word	0x08009c5b
 8009afc:	08009aad 	.word	0x08009aad
 8009b00:	08009aad 	.word	0x08009aad
 8009b04:	08009c31 	.word	0x08009c31
 8009b08:	08009aad 	.word	0x08009aad
 8009b0c:	08009aad 	.word	0x08009aad
 8009b10:	08009aad 	.word	0x08009aad
 8009b14:	08009aad 	.word	0x08009aad
 8009b18:	08009be9 	.word	0x08009be9
 8009b1c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009b20:	e7db      	b.n	8009ada <_scanf_float+0x8e>
 8009b22:	290e      	cmp	r1, #14
 8009b24:	d8c2      	bhi.n	8009aac <_scanf_float+0x60>
 8009b26:	a001      	add	r0, pc, #4	; (adr r0, 8009b2c <_scanf_float+0xe0>)
 8009b28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009b2c:	08009bdb 	.word	0x08009bdb
 8009b30:	08009aad 	.word	0x08009aad
 8009b34:	08009bdb 	.word	0x08009bdb
 8009b38:	08009c6f 	.word	0x08009c6f
 8009b3c:	08009aad 	.word	0x08009aad
 8009b40:	08009b89 	.word	0x08009b89
 8009b44:	08009bc5 	.word	0x08009bc5
 8009b48:	08009bc5 	.word	0x08009bc5
 8009b4c:	08009bc5 	.word	0x08009bc5
 8009b50:	08009bc5 	.word	0x08009bc5
 8009b54:	08009bc5 	.word	0x08009bc5
 8009b58:	08009bc5 	.word	0x08009bc5
 8009b5c:	08009bc5 	.word	0x08009bc5
 8009b60:	08009bc5 	.word	0x08009bc5
 8009b64:	08009bc5 	.word	0x08009bc5
 8009b68:	2b6e      	cmp	r3, #110	; 0x6e
 8009b6a:	d809      	bhi.n	8009b80 <_scanf_float+0x134>
 8009b6c:	2b60      	cmp	r3, #96	; 0x60
 8009b6e:	d8b2      	bhi.n	8009ad6 <_scanf_float+0x8a>
 8009b70:	2b54      	cmp	r3, #84	; 0x54
 8009b72:	d077      	beq.n	8009c64 <_scanf_float+0x218>
 8009b74:	2b59      	cmp	r3, #89	; 0x59
 8009b76:	d199      	bne.n	8009aac <_scanf_float+0x60>
 8009b78:	2d07      	cmp	r5, #7
 8009b7a:	d197      	bne.n	8009aac <_scanf_float+0x60>
 8009b7c:	2508      	movs	r5, #8
 8009b7e:	e029      	b.n	8009bd4 <_scanf_float+0x188>
 8009b80:	2b74      	cmp	r3, #116	; 0x74
 8009b82:	d06f      	beq.n	8009c64 <_scanf_float+0x218>
 8009b84:	2b79      	cmp	r3, #121	; 0x79
 8009b86:	e7f6      	b.n	8009b76 <_scanf_float+0x12a>
 8009b88:	6821      	ldr	r1, [r4, #0]
 8009b8a:	05c8      	lsls	r0, r1, #23
 8009b8c:	d51a      	bpl.n	8009bc4 <_scanf_float+0x178>
 8009b8e:	9b02      	ldr	r3, [sp, #8]
 8009b90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009b94:	6021      	str	r1, [r4, #0]
 8009b96:	f109 0901 	add.w	r9, r9, #1
 8009b9a:	b11b      	cbz	r3, 8009ba4 <_scanf_float+0x158>
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	3201      	adds	r2, #1
 8009ba0:	9302      	str	r3, [sp, #8]
 8009ba2:	60a2      	str	r2, [r4, #8]
 8009ba4:	68a3      	ldr	r3, [r4, #8]
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	60a3      	str	r3, [r4, #8]
 8009baa:	6923      	ldr	r3, [r4, #16]
 8009bac:	3301      	adds	r3, #1
 8009bae:	6123      	str	r3, [r4, #16]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	607b      	str	r3, [r7, #4]
 8009bb8:	f340 8084 	ble.w	8009cc4 <_scanf_float+0x278>
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	603b      	str	r3, [r7, #0]
 8009bc2:	e766      	b.n	8009a92 <_scanf_float+0x46>
 8009bc4:	eb1a 0f05 	cmn.w	sl, r5
 8009bc8:	f47f af70 	bne.w	8009aac <_scanf_float+0x60>
 8009bcc:	6822      	ldr	r2, [r4, #0]
 8009bce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009bd2:	6022      	str	r2, [r4, #0]
 8009bd4:	f806 3b01 	strb.w	r3, [r6], #1
 8009bd8:	e7e4      	b.n	8009ba4 <_scanf_float+0x158>
 8009bda:	6822      	ldr	r2, [r4, #0]
 8009bdc:	0610      	lsls	r0, r2, #24
 8009bde:	f57f af65 	bpl.w	8009aac <_scanf_float+0x60>
 8009be2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009be6:	e7f4      	b.n	8009bd2 <_scanf_float+0x186>
 8009be8:	f1ba 0f00 	cmp.w	sl, #0
 8009bec:	d10e      	bne.n	8009c0c <_scanf_float+0x1c0>
 8009bee:	f1b9 0f00 	cmp.w	r9, #0
 8009bf2:	d10e      	bne.n	8009c12 <_scanf_float+0x1c6>
 8009bf4:	6822      	ldr	r2, [r4, #0]
 8009bf6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009bfa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009bfe:	d108      	bne.n	8009c12 <_scanf_float+0x1c6>
 8009c00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009c04:	6022      	str	r2, [r4, #0]
 8009c06:	f04f 0a01 	mov.w	sl, #1
 8009c0a:	e7e3      	b.n	8009bd4 <_scanf_float+0x188>
 8009c0c:	f1ba 0f02 	cmp.w	sl, #2
 8009c10:	d055      	beq.n	8009cbe <_scanf_float+0x272>
 8009c12:	2d01      	cmp	r5, #1
 8009c14:	d002      	beq.n	8009c1c <_scanf_float+0x1d0>
 8009c16:	2d04      	cmp	r5, #4
 8009c18:	f47f af48 	bne.w	8009aac <_scanf_float+0x60>
 8009c1c:	3501      	adds	r5, #1
 8009c1e:	b2ed      	uxtb	r5, r5
 8009c20:	e7d8      	b.n	8009bd4 <_scanf_float+0x188>
 8009c22:	f1ba 0f01 	cmp.w	sl, #1
 8009c26:	f47f af41 	bne.w	8009aac <_scanf_float+0x60>
 8009c2a:	f04f 0a02 	mov.w	sl, #2
 8009c2e:	e7d1      	b.n	8009bd4 <_scanf_float+0x188>
 8009c30:	b97d      	cbnz	r5, 8009c52 <_scanf_float+0x206>
 8009c32:	f1b9 0f00 	cmp.w	r9, #0
 8009c36:	f47f af3c 	bne.w	8009ab2 <_scanf_float+0x66>
 8009c3a:	6822      	ldr	r2, [r4, #0]
 8009c3c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009c40:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009c44:	f47f af39 	bne.w	8009aba <_scanf_float+0x6e>
 8009c48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009c4c:	6022      	str	r2, [r4, #0]
 8009c4e:	2501      	movs	r5, #1
 8009c50:	e7c0      	b.n	8009bd4 <_scanf_float+0x188>
 8009c52:	2d03      	cmp	r5, #3
 8009c54:	d0e2      	beq.n	8009c1c <_scanf_float+0x1d0>
 8009c56:	2d05      	cmp	r5, #5
 8009c58:	e7de      	b.n	8009c18 <_scanf_float+0x1cc>
 8009c5a:	2d02      	cmp	r5, #2
 8009c5c:	f47f af26 	bne.w	8009aac <_scanf_float+0x60>
 8009c60:	2503      	movs	r5, #3
 8009c62:	e7b7      	b.n	8009bd4 <_scanf_float+0x188>
 8009c64:	2d06      	cmp	r5, #6
 8009c66:	f47f af21 	bne.w	8009aac <_scanf_float+0x60>
 8009c6a:	2507      	movs	r5, #7
 8009c6c:	e7b2      	b.n	8009bd4 <_scanf_float+0x188>
 8009c6e:	6822      	ldr	r2, [r4, #0]
 8009c70:	0591      	lsls	r1, r2, #22
 8009c72:	f57f af1b 	bpl.w	8009aac <_scanf_float+0x60>
 8009c76:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009c7a:	6022      	str	r2, [r4, #0]
 8009c7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009c80:	e7a8      	b.n	8009bd4 <_scanf_float+0x188>
 8009c82:	6822      	ldr	r2, [r4, #0]
 8009c84:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009c88:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009c8c:	d006      	beq.n	8009c9c <_scanf_float+0x250>
 8009c8e:	0550      	lsls	r0, r2, #21
 8009c90:	f57f af0c 	bpl.w	8009aac <_scanf_float+0x60>
 8009c94:	f1b9 0f00 	cmp.w	r9, #0
 8009c98:	f43f af0f 	beq.w	8009aba <_scanf_float+0x6e>
 8009c9c:	0591      	lsls	r1, r2, #22
 8009c9e:	bf58      	it	pl
 8009ca0:	9901      	ldrpl	r1, [sp, #4]
 8009ca2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009ca6:	bf58      	it	pl
 8009ca8:	eba9 0101 	subpl.w	r1, r9, r1
 8009cac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009cb0:	bf58      	it	pl
 8009cb2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009cb6:	6022      	str	r2, [r4, #0]
 8009cb8:	f04f 0900 	mov.w	r9, #0
 8009cbc:	e78a      	b.n	8009bd4 <_scanf_float+0x188>
 8009cbe:	f04f 0a03 	mov.w	sl, #3
 8009cc2:	e787      	b.n	8009bd4 <_scanf_float+0x188>
 8009cc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009cc8:	4639      	mov	r1, r7
 8009cca:	4640      	mov	r0, r8
 8009ccc:	4798      	blx	r3
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	f43f aedf 	beq.w	8009a92 <_scanf_float+0x46>
 8009cd4:	e6ea      	b.n	8009aac <_scanf_float+0x60>
 8009cd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009cda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009cde:	463a      	mov	r2, r7
 8009ce0:	4640      	mov	r0, r8
 8009ce2:	4798      	blx	r3
 8009ce4:	6923      	ldr	r3, [r4, #16]
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	6123      	str	r3, [r4, #16]
 8009cea:	e6ec      	b.n	8009ac6 <_scanf_float+0x7a>
 8009cec:	1e6b      	subs	r3, r5, #1
 8009cee:	2b06      	cmp	r3, #6
 8009cf0:	d825      	bhi.n	8009d3e <_scanf_float+0x2f2>
 8009cf2:	2d02      	cmp	r5, #2
 8009cf4:	d836      	bhi.n	8009d64 <_scanf_float+0x318>
 8009cf6:	455e      	cmp	r6, fp
 8009cf8:	f67f aee8 	bls.w	8009acc <_scanf_float+0x80>
 8009cfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009d04:	463a      	mov	r2, r7
 8009d06:	4640      	mov	r0, r8
 8009d08:	4798      	blx	r3
 8009d0a:	6923      	ldr	r3, [r4, #16]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	6123      	str	r3, [r4, #16]
 8009d10:	e7f1      	b.n	8009cf6 <_scanf_float+0x2aa>
 8009d12:	9802      	ldr	r0, [sp, #8]
 8009d14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d18:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009d1c:	9002      	str	r0, [sp, #8]
 8009d1e:	463a      	mov	r2, r7
 8009d20:	4640      	mov	r0, r8
 8009d22:	4798      	blx	r3
 8009d24:	6923      	ldr	r3, [r4, #16]
 8009d26:	3b01      	subs	r3, #1
 8009d28:	6123      	str	r3, [r4, #16]
 8009d2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d2e:	fa5f fa8a 	uxtb.w	sl, sl
 8009d32:	f1ba 0f02 	cmp.w	sl, #2
 8009d36:	d1ec      	bne.n	8009d12 <_scanf_float+0x2c6>
 8009d38:	3d03      	subs	r5, #3
 8009d3a:	b2ed      	uxtb	r5, r5
 8009d3c:	1b76      	subs	r6, r6, r5
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	05da      	lsls	r2, r3, #23
 8009d42:	d52f      	bpl.n	8009da4 <_scanf_float+0x358>
 8009d44:	055b      	lsls	r3, r3, #21
 8009d46:	d510      	bpl.n	8009d6a <_scanf_float+0x31e>
 8009d48:	455e      	cmp	r6, fp
 8009d4a:	f67f aebf 	bls.w	8009acc <_scanf_float+0x80>
 8009d4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009d56:	463a      	mov	r2, r7
 8009d58:	4640      	mov	r0, r8
 8009d5a:	4798      	blx	r3
 8009d5c:	6923      	ldr	r3, [r4, #16]
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	6123      	str	r3, [r4, #16]
 8009d62:	e7f1      	b.n	8009d48 <_scanf_float+0x2fc>
 8009d64:	46aa      	mov	sl, r5
 8009d66:	9602      	str	r6, [sp, #8]
 8009d68:	e7df      	b.n	8009d2a <_scanf_float+0x2de>
 8009d6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009d6e:	6923      	ldr	r3, [r4, #16]
 8009d70:	2965      	cmp	r1, #101	; 0x65
 8009d72:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d76:	f106 35ff 	add.w	r5, r6, #4294967295
 8009d7a:	6123      	str	r3, [r4, #16]
 8009d7c:	d00c      	beq.n	8009d98 <_scanf_float+0x34c>
 8009d7e:	2945      	cmp	r1, #69	; 0x45
 8009d80:	d00a      	beq.n	8009d98 <_scanf_float+0x34c>
 8009d82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d86:	463a      	mov	r2, r7
 8009d88:	4640      	mov	r0, r8
 8009d8a:	4798      	blx	r3
 8009d8c:	6923      	ldr	r3, [r4, #16]
 8009d8e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009d92:	3b01      	subs	r3, #1
 8009d94:	1eb5      	subs	r5, r6, #2
 8009d96:	6123      	str	r3, [r4, #16]
 8009d98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d9c:	463a      	mov	r2, r7
 8009d9e:	4640      	mov	r0, r8
 8009da0:	4798      	blx	r3
 8009da2:	462e      	mov	r6, r5
 8009da4:	6825      	ldr	r5, [r4, #0]
 8009da6:	f015 0510 	ands.w	r5, r5, #16
 8009daa:	d158      	bne.n	8009e5e <_scanf_float+0x412>
 8009dac:	7035      	strb	r5, [r6, #0]
 8009dae:	6823      	ldr	r3, [r4, #0]
 8009db0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009db8:	d11c      	bne.n	8009df4 <_scanf_float+0x3a8>
 8009dba:	9b01      	ldr	r3, [sp, #4]
 8009dbc:	454b      	cmp	r3, r9
 8009dbe:	eba3 0209 	sub.w	r2, r3, r9
 8009dc2:	d124      	bne.n	8009e0e <_scanf_float+0x3c2>
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	4659      	mov	r1, fp
 8009dc8:	4640      	mov	r0, r8
 8009dca:	f002 fc31 	bl	800c630 <_strtod_r>
 8009dce:	9b03      	ldr	r3, [sp, #12]
 8009dd0:	6821      	ldr	r1, [r4, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f011 0f02 	tst.w	r1, #2
 8009dd8:	ec57 6b10 	vmov	r6, r7, d0
 8009ddc:	f103 0204 	add.w	r2, r3, #4
 8009de0:	d020      	beq.n	8009e24 <_scanf_float+0x3d8>
 8009de2:	9903      	ldr	r1, [sp, #12]
 8009de4:	600a      	str	r2, [r1, #0]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	e9c3 6700 	strd	r6, r7, [r3]
 8009dec:	68e3      	ldr	r3, [r4, #12]
 8009dee:	3301      	adds	r3, #1
 8009df0:	60e3      	str	r3, [r4, #12]
 8009df2:	e66c      	b.n	8009ace <_scanf_float+0x82>
 8009df4:	9b04      	ldr	r3, [sp, #16]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d0e4      	beq.n	8009dc4 <_scanf_float+0x378>
 8009dfa:	9905      	ldr	r1, [sp, #20]
 8009dfc:	230a      	movs	r3, #10
 8009dfe:	462a      	mov	r2, r5
 8009e00:	3101      	adds	r1, #1
 8009e02:	4640      	mov	r0, r8
 8009e04:	f002 fc9c 	bl	800c740 <_strtol_r>
 8009e08:	9b04      	ldr	r3, [sp, #16]
 8009e0a:	9e05      	ldr	r6, [sp, #20]
 8009e0c:	1ac2      	subs	r2, r0, r3
 8009e0e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009e12:	429e      	cmp	r6, r3
 8009e14:	bf28      	it	cs
 8009e16:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009e1a:	4912      	ldr	r1, [pc, #72]	; (8009e64 <_scanf_float+0x418>)
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	f000 f8e7 	bl	8009ff0 <siprintf>
 8009e22:	e7cf      	b.n	8009dc4 <_scanf_float+0x378>
 8009e24:	f011 0f04 	tst.w	r1, #4
 8009e28:	9903      	ldr	r1, [sp, #12]
 8009e2a:	600a      	str	r2, [r1, #0]
 8009e2c:	d1db      	bne.n	8009de6 <_scanf_float+0x39a>
 8009e2e:	f8d3 8000 	ldr.w	r8, [r3]
 8009e32:	ee10 2a10 	vmov	r2, s0
 8009e36:	ee10 0a10 	vmov	r0, s0
 8009e3a:	463b      	mov	r3, r7
 8009e3c:	4639      	mov	r1, r7
 8009e3e:	f7f6 fe9d 	bl	8000b7c <__aeabi_dcmpun>
 8009e42:	b128      	cbz	r0, 8009e50 <_scanf_float+0x404>
 8009e44:	4808      	ldr	r0, [pc, #32]	; (8009e68 <_scanf_float+0x41c>)
 8009e46:	f000 f9b7 	bl	800a1b8 <nanf>
 8009e4a:	ed88 0a00 	vstr	s0, [r8]
 8009e4e:	e7cd      	b.n	8009dec <_scanf_float+0x3a0>
 8009e50:	4630      	mov	r0, r6
 8009e52:	4639      	mov	r1, r7
 8009e54:	f7f6 fef0 	bl	8000c38 <__aeabi_d2f>
 8009e58:	f8c8 0000 	str.w	r0, [r8]
 8009e5c:	e7c6      	b.n	8009dec <_scanf_float+0x3a0>
 8009e5e:	2500      	movs	r5, #0
 8009e60:	e635      	b.n	8009ace <_scanf_float+0x82>
 8009e62:	bf00      	nop
 8009e64:	0800eeac 	.word	0x0800eeac
 8009e68:	0800f23d 	.word	0x0800f23d

08009e6c <std>:
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	b510      	push	{r4, lr}
 8009e70:	4604      	mov	r4, r0
 8009e72:	e9c0 3300 	strd	r3, r3, [r0]
 8009e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e7a:	6083      	str	r3, [r0, #8]
 8009e7c:	8181      	strh	r1, [r0, #12]
 8009e7e:	6643      	str	r3, [r0, #100]	; 0x64
 8009e80:	81c2      	strh	r2, [r0, #14]
 8009e82:	6183      	str	r3, [r0, #24]
 8009e84:	4619      	mov	r1, r3
 8009e86:	2208      	movs	r2, #8
 8009e88:	305c      	adds	r0, #92	; 0x5c
 8009e8a:	f000 f914 	bl	800a0b6 <memset>
 8009e8e:	4b0d      	ldr	r3, [pc, #52]	; (8009ec4 <std+0x58>)
 8009e90:	6263      	str	r3, [r4, #36]	; 0x24
 8009e92:	4b0d      	ldr	r3, [pc, #52]	; (8009ec8 <std+0x5c>)
 8009e94:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e96:	4b0d      	ldr	r3, [pc, #52]	; (8009ecc <std+0x60>)
 8009e98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e9a:	4b0d      	ldr	r3, [pc, #52]	; (8009ed0 <std+0x64>)
 8009e9c:	6323      	str	r3, [r4, #48]	; 0x30
 8009e9e:	4b0d      	ldr	r3, [pc, #52]	; (8009ed4 <std+0x68>)
 8009ea0:	6224      	str	r4, [r4, #32]
 8009ea2:	429c      	cmp	r4, r3
 8009ea4:	d006      	beq.n	8009eb4 <std+0x48>
 8009ea6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009eaa:	4294      	cmp	r4, r2
 8009eac:	d002      	beq.n	8009eb4 <std+0x48>
 8009eae:	33d0      	adds	r3, #208	; 0xd0
 8009eb0:	429c      	cmp	r4, r3
 8009eb2:	d105      	bne.n	8009ec0 <std+0x54>
 8009eb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ebc:	f000 b978 	b.w	800a1b0 <__retarget_lock_init_recursive>
 8009ec0:	bd10      	pop	{r4, pc}
 8009ec2:	bf00      	nop
 8009ec4:	0800a031 	.word	0x0800a031
 8009ec8:	0800a053 	.word	0x0800a053
 8009ecc:	0800a08b 	.word	0x0800a08b
 8009ed0:	0800a0af 	.word	0x0800a0af
 8009ed4:	2000092c 	.word	0x2000092c

08009ed8 <stdio_exit_handler>:
 8009ed8:	4a02      	ldr	r2, [pc, #8]	; (8009ee4 <stdio_exit_handler+0xc>)
 8009eda:	4903      	ldr	r1, [pc, #12]	; (8009ee8 <stdio_exit_handler+0x10>)
 8009edc:	4803      	ldr	r0, [pc, #12]	; (8009eec <stdio_exit_handler+0x14>)
 8009ede:	f000 b869 	b.w	8009fb4 <_fwalk_sglue>
 8009ee2:	bf00      	nop
 8009ee4:	2000001c 	.word	0x2000001c
 8009ee8:	0800cb01 	.word	0x0800cb01
 8009eec:	20000028 	.word	0x20000028

08009ef0 <cleanup_stdio>:
 8009ef0:	6841      	ldr	r1, [r0, #4]
 8009ef2:	4b0c      	ldr	r3, [pc, #48]	; (8009f24 <cleanup_stdio+0x34>)
 8009ef4:	4299      	cmp	r1, r3
 8009ef6:	b510      	push	{r4, lr}
 8009ef8:	4604      	mov	r4, r0
 8009efa:	d001      	beq.n	8009f00 <cleanup_stdio+0x10>
 8009efc:	f002 fe00 	bl	800cb00 <_fflush_r>
 8009f00:	68a1      	ldr	r1, [r4, #8]
 8009f02:	4b09      	ldr	r3, [pc, #36]	; (8009f28 <cleanup_stdio+0x38>)
 8009f04:	4299      	cmp	r1, r3
 8009f06:	d002      	beq.n	8009f0e <cleanup_stdio+0x1e>
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f002 fdf9 	bl	800cb00 <_fflush_r>
 8009f0e:	68e1      	ldr	r1, [r4, #12]
 8009f10:	4b06      	ldr	r3, [pc, #24]	; (8009f2c <cleanup_stdio+0x3c>)
 8009f12:	4299      	cmp	r1, r3
 8009f14:	d004      	beq.n	8009f20 <cleanup_stdio+0x30>
 8009f16:	4620      	mov	r0, r4
 8009f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f1c:	f002 bdf0 	b.w	800cb00 <_fflush_r>
 8009f20:	bd10      	pop	{r4, pc}
 8009f22:	bf00      	nop
 8009f24:	2000092c 	.word	0x2000092c
 8009f28:	20000994 	.word	0x20000994
 8009f2c:	200009fc 	.word	0x200009fc

08009f30 <global_stdio_init.part.0>:
 8009f30:	b510      	push	{r4, lr}
 8009f32:	4b0b      	ldr	r3, [pc, #44]	; (8009f60 <global_stdio_init.part.0+0x30>)
 8009f34:	4c0b      	ldr	r4, [pc, #44]	; (8009f64 <global_stdio_init.part.0+0x34>)
 8009f36:	4a0c      	ldr	r2, [pc, #48]	; (8009f68 <global_stdio_init.part.0+0x38>)
 8009f38:	601a      	str	r2, [r3, #0]
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	2104      	movs	r1, #4
 8009f40:	f7ff ff94 	bl	8009e6c <std>
 8009f44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009f48:	2201      	movs	r2, #1
 8009f4a:	2109      	movs	r1, #9
 8009f4c:	f7ff ff8e 	bl	8009e6c <std>
 8009f50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009f54:	2202      	movs	r2, #2
 8009f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f5a:	2112      	movs	r1, #18
 8009f5c:	f7ff bf86 	b.w	8009e6c <std>
 8009f60:	20000a64 	.word	0x20000a64
 8009f64:	2000092c 	.word	0x2000092c
 8009f68:	08009ed9 	.word	0x08009ed9

08009f6c <__sfp_lock_acquire>:
 8009f6c:	4801      	ldr	r0, [pc, #4]	; (8009f74 <__sfp_lock_acquire+0x8>)
 8009f6e:	f000 b920 	b.w	800a1b2 <__retarget_lock_acquire_recursive>
 8009f72:	bf00      	nop
 8009f74:	20000a6d 	.word	0x20000a6d

08009f78 <__sfp_lock_release>:
 8009f78:	4801      	ldr	r0, [pc, #4]	; (8009f80 <__sfp_lock_release+0x8>)
 8009f7a:	f000 b91b 	b.w	800a1b4 <__retarget_lock_release_recursive>
 8009f7e:	bf00      	nop
 8009f80:	20000a6d 	.word	0x20000a6d

08009f84 <__sinit>:
 8009f84:	b510      	push	{r4, lr}
 8009f86:	4604      	mov	r4, r0
 8009f88:	f7ff fff0 	bl	8009f6c <__sfp_lock_acquire>
 8009f8c:	6a23      	ldr	r3, [r4, #32]
 8009f8e:	b11b      	cbz	r3, 8009f98 <__sinit+0x14>
 8009f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f94:	f7ff bff0 	b.w	8009f78 <__sfp_lock_release>
 8009f98:	4b04      	ldr	r3, [pc, #16]	; (8009fac <__sinit+0x28>)
 8009f9a:	6223      	str	r3, [r4, #32]
 8009f9c:	4b04      	ldr	r3, [pc, #16]	; (8009fb0 <__sinit+0x2c>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d1f5      	bne.n	8009f90 <__sinit+0xc>
 8009fa4:	f7ff ffc4 	bl	8009f30 <global_stdio_init.part.0>
 8009fa8:	e7f2      	b.n	8009f90 <__sinit+0xc>
 8009faa:	bf00      	nop
 8009fac:	08009ef1 	.word	0x08009ef1
 8009fb0:	20000a64 	.word	0x20000a64

08009fb4 <_fwalk_sglue>:
 8009fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fb8:	4607      	mov	r7, r0
 8009fba:	4688      	mov	r8, r1
 8009fbc:	4614      	mov	r4, r2
 8009fbe:	2600      	movs	r6, #0
 8009fc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fc4:	f1b9 0901 	subs.w	r9, r9, #1
 8009fc8:	d505      	bpl.n	8009fd6 <_fwalk_sglue+0x22>
 8009fca:	6824      	ldr	r4, [r4, #0]
 8009fcc:	2c00      	cmp	r4, #0
 8009fce:	d1f7      	bne.n	8009fc0 <_fwalk_sglue+0xc>
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fd6:	89ab      	ldrh	r3, [r5, #12]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d907      	bls.n	8009fec <_fwalk_sglue+0x38>
 8009fdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	d003      	beq.n	8009fec <_fwalk_sglue+0x38>
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	4638      	mov	r0, r7
 8009fe8:	47c0      	blx	r8
 8009fea:	4306      	orrs	r6, r0
 8009fec:	3568      	adds	r5, #104	; 0x68
 8009fee:	e7e9      	b.n	8009fc4 <_fwalk_sglue+0x10>

08009ff0 <siprintf>:
 8009ff0:	b40e      	push	{r1, r2, r3}
 8009ff2:	b500      	push	{lr}
 8009ff4:	b09c      	sub	sp, #112	; 0x70
 8009ff6:	ab1d      	add	r3, sp, #116	; 0x74
 8009ff8:	9002      	str	r0, [sp, #8]
 8009ffa:	9006      	str	r0, [sp, #24]
 8009ffc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a000:	4809      	ldr	r0, [pc, #36]	; (800a028 <siprintf+0x38>)
 800a002:	9107      	str	r1, [sp, #28]
 800a004:	9104      	str	r1, [sp, #16]
 800a006:	4909      	ldr	r1, [pc, #36]	; (800a02c <siprintf+0x3c>)
 800a008:	f853 2b04 	ldr.w	r2, [r3], #4
 800a00c:	9105      	str	r1, [sp, #20]
 800a00e:	6800      	ldr	r0, [r0, #0]
 800a010:	9301      	str	r3, [sp, #4]
 800a012:	a902      	add	r1, sp, #8
 800a014:	f002 fbf0 	bl	800c7f8 <_svfiprintf_r>
 800a018:	9b02      	ldr	r3, [sp, #8]
 800a01a:	2200      	movs	r2, #0
 800a01c:	701a      	strb	r2, [r3, #0]
 800a01e:	b01c      	add	sp, #112	; 0x70
 800a020:	f85d eb04 	ldr.w	lr, [sp], #4
 800a024:	b003      	add	sp, #12
 800a026:	4770      	bx	lr
 800a028:	20000074 	.word	0x20000074
 800a02c:	ffff0208 	.word	0xffff0208

0800a030 <__sread>:
 800a030:	b510      	push	{r4, lr}
 800a032:	460c      	mov	r4, r1
 800a034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a038:	f000 f86c 	bl	800a114 <_read_r>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	bfab      	itete	ge
 800a040:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a042:	89a3      	ldrhlt	r3, [r4, #12]
 800a044:	181b      	addge	r3, r3, r0
 800a046:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a04a:	bfac      	ite	ge
 800a04c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a04e:	81a3      	strhlt	r3, [r4, #12]
 800a050:	bd10      	pop	{r4, pc}

0800a052 <__swrite>:
 800a052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a056:	461f      	mov	r7, r3
 800a058:	898b      	ldrh	r3, [r1, #12]
 800a05a:	05db      	lsls	r3, r3, #23
 800a05c:	4605      	mov	r5, r0
 800a05e:	460c      	mov	r4, r1
 800a060:	4616      	mov	r6, r2
 800a062:	d505      	bpl.n	800a070 <__swrite+0x1e>
 800a064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a068:	2302      	movs	r3, #2
 800a06a:	2200      	movs	r2, #0
 800a06c:	f000 f840 	bl	800a0f0 <_lseek_r>
 800a070:	89a3      	ldrh	r3, [r4, #12]
 800a072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a07a:	81a3      	strh	r3, [r4, #12]
 800a07c:	4632      	mov	r2, r6
 800a07e:	463b      	mov	r3, r7
 800a080:	4628      	mov	r0, r5
 800a082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a086:	f000 b857 	b.w	800a138 <_write_r>

0800a08a <__sseek>:
 800a08a:	b510      	push	{r4, lr}
 800a08c:	460c      	mov	r4, r1
 800a08e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a092:	f000 f82d 	bl	800a0f0 <_lseek_r>
 800a096:	1c43      	adds	r3, r0, #1
 800a098:	89a3      	ldrh	r3, [r4, #12]
 800a09a:	bf15      	itete	ne
 800a09c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a09e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0a6:	81a3      	strheq	r3, [r4, #12]
 800a0a8:	bf18      	it	ne
 800a0aa:	81a3      	strhne	r3, [r4, #12]
 800a0ac:	bd10      	pop	{r4, pc}

0800a0ae <__sclose>:
 800a0ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0b2:	f000 b80d 	b.w	800a0d0 <_close_r>

0800a0b6 <memset>:
 800a0b6:	4402      	add	r2, r0
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d100      	bne.n	800a0c0 <memset+0xa>
 800a0be:	4770      	bx	lr
 800a0c0:	f803 1b01 	strb.w	r1, [r3], #1
 800a0c4:	e7f9      	b.n	800a0ba <memset+0x4>
	...

0800a0c8 <_localeconv_r>:
 800a0c8:	4800      	ldr	r0, [pc, #0]	; (800a0cc <_localeconv_r+0x4>)
 800a0ca:	4770      	bx	lr
 800a0cc:	20000168 	.word	0x20000168

0800a0d0 <_close_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	4d06      	ldr	r5, [pc, #24]	; (800a0ec <_close_r+0x1c>)
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	4608      	mov	r0, r1
 800a0da:	602b      	str	r3, [r5, #0]
 800a0dc:	f7f7 fec7 	bl	8001e6e <_close>
 800a0e0:	1c43      	adds	r3, r0, #1
 800a0e2:	d102      	bne.n	800a0ea <_close_r+0x1a>
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	b103      	cbz	r3, 800a0ea <_close_r+0x1a>
 800a0e8:	6023      	str	r3, [r4, #0]
 800a0ea:	bd38      	pop	{r3, r4, r5, pc}
 800a0ec:	20000a68 	.word	0x20000a68

0800a0f0 <_lseek_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	4d07      	ldr	r5, [pc, #28]	; (800a110 <_lseek_r+0x20>)
 800a0f4:	4604      	mov	r4, r0
 800a0f6:	4608      	mov	r0, r1
 800a0f8:	4611      	mov	r1, r2
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	602a      	str	r2, [r5, #0]
 800a0fe:	461a      	mov	r2, r3
 800a100:	f7f7 fedc 	bl	8001ebc <_lseek>
 800a104:	1c43      	adds	r3, r0, #1
 800a106:	d102      	bne.n	800a10e <_lseek_r+0x1e>
 800a108:	682b      	ldr	r3, [r5, #0]
 800a10a:	b103      	cbz	r3, 800a10e <_lseek_r+0x1e>
 800a10c:	6023      	str	r3, [r4, #0]
 800a10e:	bd38      	pop	{r3, r4, r5, pc}
 800a110:	20000a68 	.word	0x20000a68

0800a114 <_read_r>:
 800a114:	b538      	push	{r3, r4, r5, lr}
 800a116:	4d07      	ldr	r5, [pc, #28]	; (800a134 <_read_r+0x20>)
 800a118:	4604      	mov	r4, r0
 800a11a:	4608      	mov	r0, r1
 800a11c:	4611      	mov	r1, r2
 800a11e:	2200      	movs	r2, #0
 800a120:	602a      	str	r2, [r5, #0]
 800a122:	461a      	mov	r2, r3
 800a124:	f7f7 fe6a 	bl	8001dfc <_read>
 800a128:	1c43      	adds	r3, r0, #1
 800a12a:	d102      	bne.n	800a132 <_read_r+0x1e>
 800a12c:	682b      	ldr	r3, [r5, #0]
 800a12e:	b103      	cbz	r3, 800a132 <_read_r+0x1e>
 800a130:	6023      	str	r3, [r4, #0]
 800a132:	bd38      	pop	{r3, r4, r5, pc}
 800a134:	20000a68 	.word	0x20000a68

0800a138 <_write_r>:
 800a138:	b538      	push	{r3, r4, r5, lr}
 800a13a:	4d07      	ldr	r5, [pc, #28]	; (800a158 <_write_r+0x20>)
 800a13c:	4604      	mov	r4, r0
 800a13e:	4608      	mov	r0, r1
 800a140:	4611      	mov	r1, r2
 800a142:	2200      	movs	r2, #0
 800a144:	602a      	str	r2, [r5, #0]
 800a146:	461a      	mov	r2, r3
 800a148:	f7f7 fe75 	bl	8001e36 <_write>
 800a14c:	1c43      	adds	r3, r0, #1
 800a14e:	d102      	bne.n	800a156 <_write_r+0x1e>
 800a150:	682b      	ldr	r3, [r5, #0]
 800a152:	b103      	cbz	r3, 800a156 <_write_r+0x1e>
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	bd38      	pop	{r3, r4, r5, pc}
 800a158:	20000a68 	.word	0x20000a68

0800a15c <__errno>:
 800a15c:	4b01      	ldr	r3, [pc, #4]	; (800a164 <__errno+0x8>)
 800a15e:	6818      	ldr	r0, [r3, #0]
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	20000074 	.word	0x20000074

0800a168 <__libc_init_array>:
 800a168:	b570      	push	{r4, r5, r6, lr}
 800a16a:	4d0d      	ldr	r5, [pc, #52]	; (800a1a0 <__libc_init_array+0x38>)
 800a16c:	4c0d      	ldr	r4, [pc, #52]	; (800a1a4 <__libc_init_array+0x3c>)
 800a16e:	1b64      	subs	r4, r4, r5
 800a170:	10a4      	asrs	r4, r4, #2
 800a172:	2600      	movs	r6, #0
 800a174:	42a6      	cmp	r6, r4
 800a176:	d109      	bne.n	800a18c <__libc_init_array+0x24>
 800a178:	4d0b      	ldr	r5, [pc, #44]	; (800a1a8 <__libc_init_array+0x40>)
 800a17a:	4c0c      	ldr	r4, [pc, #48]	; (800a1ac <__libc_init_array+0x44>)
 800a17c:	f003 fbd8 	bl	800d930 <_init>
 800a180:	1b64      	subs	r4, r4, r5
 800a182:	10a4      	asrs	r4, r4, #2
 800a184:	2600      	movs	r6, #0
 800a186:	42a6      	cmp	r6, r4
 800a188:	d105      	bne.n	800a196 <__libc_init_array+0x2e>
 800a18a:	bd70      	pop	{r4, r5, r6, pc}
 800a18c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a190:	4798      	blx	r3
 800a192:	3601      	adds	r6, #1
 800a194:	e7ee      	b.n	800a174 <__libc_init_array+0xc>
 800a196:	f855 3b04 	ldr.w	r3, [r5], #4
 800a19a:	4798      	blx	r3
 800a19c:	3601      	adds	r6, #1
 800a19e:	e7f2      	b.n	800a186 <__libc_init_array+0x1e>
 800a1a0:	0800f2a8 	.word	0x0800f2a8
 800a1a4:	0800f2a8 	.word	0x0800f2a8
 800a1a8:	0800f2a8 	.word	0x0800f2a8
 800a1ac:	0800f2ac 	.word	0x0800f2ac

0800a1b0 <__retarget_lock_init_recursive>:
 800a1b0:	4770      	bx	lr

0800a1b2 <__retarget_lock_acquire_recursive>:
 800a1b2:	4770      	bx	lr

0800a1b4 <__retarget_lock_release_recursive>:
 800a1b4:	4770      	bx	lr
	...

0800a1b8 <nanf>:
 800a1b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a1c0 <nanf+0x8>
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	7fc00000 	.word	0x7fc00000

0800a1c4 <quorem>:
 800a1c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c8:	6903      	ldr	r3, [r0, #16]
 800a1ca:	690c      	ldr	r4, [r1, #16]
 800a1cc:	42a3      	cmp	r3, r4
 800a1ce:	4607      	mov	r7, r0
 800a1d0:	db7e      	blt.n	800a2d0 <quorem+0x10c>
 800a1d2:	3c01      	subs	r4, #1
 800a1d4:	f101 0814 	add.w	r8, r1, #20
 800a1d8:	f100 0514 	add.w	r5, r0, #20
 800a1dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1e0:	9301      	str	r3, [sp, #4]
 800a1e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a1f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1f6:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1fa:	d331      	bcc.n	800a260 <quorem+0x9c>
 800a1fc:	f04f 0e00 	mov.w	lr, #0
 800a200:	4640      	mov	r0, r8
 800a202:	46ac      	mov	ip, r5
 800a204:	46f2      	mov	sl, lr
 800a206:	f850 2b04 	ldr.w	r2, [r0], #4
 800a20a:	b293      	uxth	r3, r2
 800a20c:	fb06 e303 	mla	r3, r6, r3, lr
 800a210:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a214:	0c1a      	lsrs	r2, r3, #16
 800a216:	b29b      	uxth	r3, r3
 800a218:	ebaa 0303 	sub.w	r3, sl, r3
 800a21c:	f8dc a000 	ldr.w	sl, [ip]
 800a220:	fa13 f38a 	uxtah	r3, r3, sl
 800a224:	fb06 220e 	mla	r2, r6, lr, r2
 800a228:	9300      	str	r3, [sp, #0]
 800a22a:	9b00      	ldr	r3, [sp, #0]
 800a22c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a230:	b292      	uxth	r2, r2
 800a232:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a236:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a23a:	f8bd 3000 	ldrh.w	r3, [sp]
 800a23e:	4581      	cmp	r9, r0
 800a240:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a244:	f84c 3b04 	str.w	r3, [ip], #4
 800a248:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a24c:	d2db      	bcs.n	800a206 <quorem+0x42>
 800a24e:	f855 300b 	ldr.w	r3, [r5, fp]
 800a252:	b92b      	cbnz	r3, 800a260 <quorem+0x9c>
 800a254:	9b01      	ldr	r3, [sp, #4]
 800a256:	3b04      	subs	r3, #4
 800a258:	429d      	cmp	r5, r3
 800a25a:	461a      	mov	r2, r3
 800a25c:	d32c      	bcc.n	800a2b8 <quorem+0xf4>
 800a25e:	613c      	str	r4, [r7, #16]
 800a260:	4638      	mov	r0, r7
 800a262:	f001 f9f1 	bl	800b648 <__mcmp>
 800a266:	2800      	cmp	r0, #0
 800a268:	db22      	blt.n	800a2b0 <quorem+0xec>
 800a26a:	3601      	adds	r6, #1
 800a26c:	4629      	mov	r1, r5
 800a26e:	2000      	movs	r0, #0
 800a270:	f858 2b04 	ldr.w	r2, [r8], #4
 800a274:	f8d1 c000 	ldr.w	ip, [r1]
 800a278:	b293      	uxth	r3, r2
 800a27a:	1ac3      	subs	r3, r0, r3
 800a27c:	0c12      	lsrs	r2, r2, #16
 800a27e:	fa13 f38c 	uxtah	r3, r3, ip
 800a282:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a286:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a290:	45c1      	cmp	r9, r8
 800a292:	f841 3b04 	str.w	r3, [r1], #4
 800a296:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a29a:	d2e9      	bcs.n	800a270 <quorem+0xac>
 800a29c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2a4:	b922      	cbnz	r2, 800a2b0 <quorem+0xec>
 800a2a6:	3b04      	subs	r3, #4
 800a2a8:	429d      	cmp	r5, r3
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	d30a      	bcc.n	800a2c4 <quorem+0x100>
 800a2ae:	613c      	str	r4, [r7, #16]
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	b003      	add	sp, #12
 800a2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b8:	6812      	ldr	r2, [r2, #0]
 800a2ba:	3b04      	subs	r3, #4
 800a2bc:	2a00      	cmp	r2, #0
 800a2be:	d1ce      	bne.n	800a25e <quorem+0x9a>
 800a2c0:	3c01      	subs	r4, #1
 800a2c2:	e7c9      	b.n	800a258 <quorem+0x94>
 800a2c4:	6812      	ldr	r2, [r2, #0]
 800a2c6:	3b04      	subs	r3, #4
 800a2c8:	2a00      	cmp	r2, #0
 800a2ca:	d1f0      	bne.n	800a2ae <quorem+0xea>
 800a2cc:	3c01      	subs	r4, #1
 800a2ce:	e7eb      	b.n	800a2a8 <quorem+0xe4>
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	e7ee      	b.n	800a2b2 <quorem+0xee>
 800a2d4:	0000      	movs	r0, r0
	...

0800a2d8 <_dtoa_r>:
 800a2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2dc:	ed2d 8b04 	vpush	{d8-d9}
 800a2e0:	69c5      	ldr	r5, [r0, #28]
 800a2e2:	b093      	sub	sp, #76	; 0x4c
 800a2e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a2e8:	ec57 6b10 	vmov	r6, r7, d0
 800a2ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a2f0:	9107      	str	r1, [sp, #28]
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	920a      	str	r2, [sp, #40]	; 0x28
 800a2f6:	930d      	str	r3, [sp, #52]	; 0x34
 800a2f8:	b975      	cbnz	r5, 800a318 <_dtoa_r+0x40>
 800a2fa:	2010      	movs	r0, #16
 800a2fc:	f000 fe2a 	bl	800af54 <malloc>
 800a300:	4602      	mov	r2, r0
 800a302:	61e0      	str	r0, [r4, #28]
 800a304:	b920      	cbnz	r0, 800a310 <_dtoa_r+0x38>
 800a306:	4bae      	ldr	r3, [pc, #696]	; (800a5c0 <_dtoa_r+0x2e8>)
 800a308:	21ef      	movs	r1, #239	; 0xef
 800a30a:	48ae      	ldr	r0, [pc, #696]	; (800a5c4 <_dtoa_r+0x2ec>)
 800a30c:	f002 fc74 	bl	800cbf8 <__assert_func>
 800a310:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a314:	6005      	str	r5, [r0, #0]
 800a316:	60c5      	str	r5, [r0, #12]
 800a318:	69e3      	ldr	r3, [r4, #28]
 800a31a:	6819      	ldr	r1, [r3, #0]
 800a31c:	b151      	cbz	r1, 800a334 <_dtoa_r+0x5c>
 800a31e:	685a      	ldr	r2, [r3, #4]
 800a320:	604a      	str	r2, [r1, #4]
 800a322:	2301      	movs	r3, #1
 800a324:	4093      	lsls	r3, r2
 800a326:	608b      	str	r3, [r1, #8]
 800a328:	4620      	mov	r0, r4
 800a32a:	f000 ff07 	bl	800b13c <_Bfree>
 800a32e:	69e3      	ldr	r3, [r4, #28]
 800a330:	2200      	movs	r2, #0
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	1e3b      	subs	r3, r7, #0
 800a336:	bfbb      	ittet	lt
 800a338:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a33c:	9303      	strlt	r3, [sp, #12]
 800a33e:	2300      	movge	r3, #0
 800a340:	2201      	movlt	r2, #1
 800a342:	bfac      	ite	ge
 800a344:	f8c8 3000 	strge.w	r3, [r8]
 800a348:	f8c8 2000 	strlt.w	r2, [r8]
 800a34c:	4b9e      	ldr	r3, [pc, #632]	; (800a5c8 <_dtoa_r+0x2f0>)
 800a34e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a352:	ea33 0308 	bics.w	r3, r3, r8
 800a356:	d11b      	bne.n	800a390 <_dtoa_r+0xb8>
 800a358:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a35a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a35e:	6013      	str	r3, [r2, #0]
 800a360:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a364:	4333      	orrs	r3, r6
 800a366:	f000 8593 	beq.w	800ae90 <_dtoa_r+0xbb8>
 800a36a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a36c:	b963      	cbnz	r3, 800a388 <_dtoa_r+0xb0>
 800a36e:	4b97      	ldr	r3, [pc, #604]	; (800a5cc <_dtoa_r+0x2f4>)
 800a370:	e027      	b.n	800a3c2 <_dtoa_r+0xea>
 800a372:	4b97      	ldr	r3, [pc, #604]	; (800a5d0 <_dtoa_r+0x2f8>)
 800a374:	9300      	str	r3, [sp, #0]
 800a376:	3308      	adds	r3, #8
 800a378:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a37a:	6013      	str	r3, [r2, #0]
 800a37c:	9800      	ldr	r0, [sp, #0]
 800a37e:	b013      	add	sp, #76	; 0x4c
 800a380:	ecbd 8b04 	vpop	{d8-d9}
 800a384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a388:	4b90      	ldr	r3, [pc, #576]	; (800a5cc <_dtoa_r+0x2f4>)
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	3303      	adds	r3, #3
 800a38e:	e7f3      	b.n	800a378 <_dtoa_r+0xa0>
 800a390:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a394:	2200      	movs	r2, #0
 800a396:	ec51 0b17 	vmov	r0, r1, d7
 800a39a:	eeb0 8a47 	vmov.f32	s16, s14
 800a39e:	eef0 8a67 	vmov.f32	s17, s15
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	f7f6 fbb8 	bl	8000b18 <__aeabi_dcmpeq>
 800a3a8:	4681      	mov	r9, r0
 800a3aa:	b160      	cbz	r0, 800a3c6 <_dtoa_r+0xee>
 800a3ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	6013      	str	r3, [r2, #0]
 800a3b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f000 8568 	beq.w	800ae8a <_dtoa_r+0xbb2>
 800a3ba:	4b86      	ldr	r3, [pc, #536]	; (800a5d4 <_dtoa_r+0x2fc>)
 800a3bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a3be:	6013      	str	r3, [r2, #0]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	e7da      	b.n	800a37c <_dtoa_r+0xa4>
 800a3c6:	aa10      	add	r2, sp, #64	; 0x40
 800a3c8:	a911      	add	r1, sp, #68	; 0x44
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	eeb0 0a48 	vmov.f32	s0, s16
 800a3d0:	eef0 0a68 	vmov.f32	s1, s17
 800a3d4:	f001 fa4e 	bl	800b874 <__d2b>
 800a3d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a3dc:	4682      	mov	sl, r0
 800a3de:	2d00      	cmp	r5, #0
 800a3e0:	d07f      	beq.n	800a4e2 <_dtoa_r+0x20a>
 800a3e2:	ee18 3a90 	vmov	r3, s17
 800a3e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a3ee:	ec51 0b18 	vmov	r0, r1, d8
 800a3f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a3f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a3fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a3fe:	4619      	mov	r1, r3
 800a400:	2200      	movs	r2, #0
 800a402:	4b75      	ldr	r3, [pc, #468]	; (800a5d8 <_dtoa_r+0x300>)
 800a404:	f7f5 ff68 	bl	80002d8 <__aeabi_dsub>
 800a408:	a367      	add	r3, pc, #412	; (adr r3, 800a5a8 <_dtoa_r+0x2d0>)
 800a40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40e:	f7f6 f91b 	bl	8000648 <__aeabi_dmul>
 800a412:	a367      	add	r3, pc, #412	; (adr r3, 800a5b0 <_dtoa_r+0x2d8>)
 800a414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a418:	f7f5 ff60 	bl	80002dc <__adddf3>
 800a41c:	4606      	mov	r6, r0
 800a41e:	4628      	mov	r0, r5
 800a420:	460f      	mov	r7, r1
 800a422:	f7f6 f8a7 	bl	8000574 <__aeabi_i2d>
 800a426:	a364      	add	r3, pc, #400	; (adr r3, 800a5b8 <_dtoa_r+0x2e0>)
 800a428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42c:	f7f6 f90c 	bl	8000648 <__aeabi_dmul>
 800a430:	4602      	mov	r2, r0
 800a432:	460b      	mov	r3, r1
 800a434:	4630      	mov	r0, r6
 800a436:	4639      	mov	r1, r7
 800a438:	f7f5 ff50 	bl	80002dc <__adddf3>
 800a43c:	4606      	mov	r6, r0
 800a43e:	460f      	mov	r7, r1
 800a440:	f7f6 fbb2 	bl	8000ba8 <__aeabi_d2iz>
 800a444:	2200      	movs	r2, #0
 800a446:	4683      	mov	fp, r0
 800a448:	2300      	movs	r3, #0
 800a44a:	4630      	mov	r0, r6
 800a44c:	4639      	mov	r1, r7
 800a44e:	f7f6 fb6d 	bl	8000b2c <__aeabi_dcmplt>
 800a452:	b148      	cbz	r0, 800a468 <_dtoa_r+0x190>
 800a454:	4658      	mov	r0, fp
 800a456:	f7f6 f88d 	bl	8000574 <__aeabi_i2d>
 800a45a:	4632      	mov	r2, r6
 800a45c:	463b      	mov	r3, r7
 800a45e:	f7f6 fb5b 	bl	8000b18 <__aeabi_dcmpeq>
 800a462:	b908      	cbnz	r0, 800a468 <_dtoa_r+0x190>
 800a464:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a468:	f1bb 0f16 	cmp.w	fp, #22
 800a46c:	d857      	bhi.n	800a51e <_dtoa_r+0x246>
 800a46e:	4b5b      	ldr	r3, [pc, #364]	; (800a5dc <_dtoa_r+0x304>)
 800a470:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a478:	ec51 0b18 	vmov	r0, r1, d8
 800a47c:	f7f6 fb56 	bl	8000b2c <__aeabi_dcmplt>
 800a480:	2800      	cmp	r0, #0
 800a482:	d04e      	beq.n	800a522 <_dtoa_r+0x24a>
 800a484:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a488:	2300      	movs	r3, #0
 800a48a:	930c      	str	r3, [sp, #48]	; 0x30
 800a48c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a48e:	1b5b      	subs	r3, r3, r5
 800a490:	1e5a      	subs	r2, r3, #1
 800a492:	bf45      	ittet	mi
 800a494:	f1c3 0301 	rsbmi	r3, r3, #1
 800a498:	9305      	strmi	r3, [sp, #20]
 800a49a:	2300      	movpl	r3, #0
 800a49c:	2300      	movmi	r3, #0
 800a49e:	9206      	str	r2, [sp, #24]
 800a4a0:	bf54      	ite	pl
 800a4a2:	9305      	strpl	r3, [sp, #20]
 800a4a4:	9306      	strmi	r3, [sp, #24]
 800a4a6:	f1bb 0f00 	cmp.w	fp, #0
 800a4aa:	db3c      	blt.n	800a526 <_dtoa_r+0x24e>
 800a4ac:	9b06      	ldr	r3, [sp, #24]
 800a4ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a4b2:	445b      	add	r3, fp
 800a4b4:	9306      	str	r3, [sp, #24]
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	9308      	str	r3, [sp, #32]
 800a4ba:	9b07      	ldr	r3, [sp, #28]
 800a4bc:	2b09      	cmp	r3, #9
 800a4be:	d868      	bhi.n	800a592 <_dtoa_r+0x2ba>
 800a4c0:	2b05      	cmp	r3, #5
 800a4c2:	bfc4      	itt	gt
 800a4c4:	3b04      	subgt	r3, #4
 800a4c6:	9307      	strgt	r3, [sp, #28]
 800a4c8:	9b07      	ldr	r3, [sp, #28]
 800a4ca:	f1a3 0302 	sub.w	r3, r3, #2
 800a4ce:	bfcc      	ite	gt
 800a4d0:	2500      	movgt	r5, #0
 800a4d2:	2501      	movle	r5, #1
 800a4d4:	2b03      	cmp	r3, #3
 800a4d6:	f200 8085 	bhi.w	800a5e4 <_dtoa_r+0x30c>
 800a4da:	e8df f003 	tbb	[pc, r3]
 800a4de:	3b2e      	.short	0x3b2e
 800a4e0:	5839      	.short	0x5839
 800a4e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a4e6:	441d      	add	r5, r3
 800a4e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a4ec:	2b20      	cmp	r3, #32
 800a4ee:	bfc1      	itttt	gt
 800a4f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a4f4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a4f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a4fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a500:	bfd6      	itet	le
 800a502:	f1c3 0320 	rsble	r3, r3, #32
 800a506:	ea48 0003 	orrgt.w	r0, r8, r3
 800a50a:	fa06 f003 	lslle.w	r0, r6, r3
 800a50e:	f7f6 f821 	bl	8000554 <__aeabi_ui2d>
 800a512:	2201      	movs	r2, #1
 800a514:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a518:	3d01      	subs	r5, #1
 800a51a:	920e      	str	r2, [sp, #56]	; 0x38
 800a51c:	e76f      	b.n	800a3fe <_dtoa_r+0x126>
 800a51e:	2301      	movs	r3, #1
 800a520:	e7b3      	b.n	800a48a <_dtoa_r+0x1b2>
 800a522:	900c      	str	r0, [sp, #48]	; 0x30
 800a524:	e7b2      	b.n	800a48c <_dtoa_r+0x1b4>
 800a526:	9b05      	ldr	r3, [sp, #20]
 800a528:	eba3 030b 	sub.w	r3, r3, fp
 800a52c:	9305      	str	r3, [sp, #20]
 800a52e:	f1cb 0300 	rsb	r3, fp, #0
 800a532:	9308      	str	r3, [sp, #32]
 800a534:	2300      	movs	r3, #0
 800a536:	930b      	str	r3, [sp, #44]	; 0x2c
 800a538:	e7bf      	b.n	800a4ba <_dtoa_r+0x1e2>
 800a53a:	2300      	movs	r3, #0
 800a53c:	9309      	str	r3, [sp, #36]	; 0x24
 800a53e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a540:	2b00      	cmp	r3, #0
 800a542:	dc52      	bgt.n	800a5ea <_dtoa_r+0x312>
 800a544:	2301      	movs	r3, #1
 800a546:	9301      	str	r3, [sp, #4]
 800a548:	9304      	str	r3, [sp, #16]
 800a54a:	461a      	mov	r2, r3
 800a54c:	920a      	str	r2, [sp, #40]	; 0x28
 800a54e:	e00b      	b.n	800a568 <_dtoa_r+0x290>
 800a550:	2301      	movs	r3, #1
 800a552:	e7f3      	b.n	800a53c <_dtoa_r+0x264>
 800a554:	2300      	movs	r3, #0
 800a556:	9309      	str	r3, [sp, #36]	; 0x24
 800a558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a55a:	445b      	add	r3, fp
 800a55c:	9301      	str	r3, [sp, #4]
 800a55e:	3301      	adds	r3, #1
 800a560:	2b01      	cmp	r3, #1
 800a562:	9304      	str	r3, [sp, #16]
 800a564:	bfb8      	it	lt
 800a566:	2301      	movlt	r3, #1
 800a568:	69e0      	ldr	r0, [r4, #28]
 800a56a:	2100      	movs	r1, #0
 800a56c:	2204      	movs	r2, #4
 800a56e:	f102 0614 	add.w	r6, r2, #20
 800a572:	429e      	cmp	r6, r3
 800a574:	d93d      	bls.n	800a5f2 <_dtoa_r+0x31a>
 800a576:	6041      	str	r1, [r0, #4]
 800a578:	4620      	mov	r0, r4
 800a57a:	f000 fd9f 	bl	800b0bc <_Balloc>
 800a57e:	9000      	str	r0, [sp, #0]
 800a580:	2800      	cmp	r0, #0
 800a582:	d139      	bne.n	800a5f8 <_dtoa_r+0x320>
 800a584:	4b16      	ldr	r3, [pc, #88]	; (800a5e0 <_dtoa_r+0x308>)
 800a586:	4602      	mov	r2, r0
 800a588:	f240 11af 	movw	r1, #431	; 0x1af
 800a58c:	e6bd      	b.n	800a30a <_dtoa_r+0x32>
 800a58e:	2301      	movs	r3, #1
 800a590:	e7e1      	b.n	800a556 <_dtoa_r+0x27e>
 800a592:	2501      	movs	r5, #1
 800a594:	2300      	movs	r3, #0
 800a596:	9307      	str	r3, [sp, #28]
 800a598:	9509      	str	r5, [sp, #36]	; 0x24
 800a59a:	f04f 33ff 	mov.w	r3, #4294967295
 800a59e:	9301      	str	r3, [sp, #4]
 800a5a0:	9304      	str	r3, [sp, #16]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	2312      	movs	r3, #18
 800a5a6:	e7d1      	b.n	800a54c <_dtoa_r+0x274>
 800a5a8:	636f4361 	.word	0x636f4361
 800a5ac:	3fd287a7 	.word	0x3fd287a7
 800a5b0:	8b60c8b3 	.word	0x8b60c8b3
 800a5b4:	3fc68a28 	.word	0x3fc68a28
 800a5b8:	509f79fb 	.word	0x509f79fb
 800a5bc:	3fd34413 	.word	0x3fd34413
 800a5c0:	0800eebe 	.word	0x0800eebe
 800a5c4:	0800eed5 	.word	0x0800eed5
 800a5c8:	7ff00000 	.word	0x7ff00000
 800a5cc:	0800eeba 	.word	0x0800eeba
 800a5d0:	0800eeb1 	.word	0x0800eeb1
 800a5d4:	0800ee89 	.word	0x0800ee89
 800a5d8:	3ff80000 	.word	0x3ff80000
 800a5dc:	0800efc0 	.word	0x0800efc0
 800a5e0:	0800ef2d 	.word	0x0800ef2d
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a5e8:	e7d7      	b.n	800a59a <_dtoa_r+0x2c2>
 800a5ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ec:	9301      	str	r3, [sp, #4]
 800a5ee:	9304      	str	r3, [sp, #16]
 800a5f0:	e7ba      	b.n	800a568 <_dtoa_r+0x290>
 800a5f2:	3101      	adds	r1, #1
 800a5f4:	0052      	lsls	r2, r2, #1
 800a5f6:	e7ba      	b.n	800a56e <_dtoa_r+0x296>
 800a5f8:	69e3      	ldr	r3, [r4, #28]
 800a5fa:	9a00      	ldr	r2, [sp, #0]
 800a5fc:	601a      	str	r2, [r3, #0]
 800a5fe:	9b04      	ldr	r3, [sp, #16]
 800a600:	2b0e      	cmp	r3, #14
 800a602:	f200 80a8 	bhi.w	800a756 <_dtoa_r+0x47e>
 800a606:	2d00      	cmp	r5, #0
 800a608:	f000 80a5 	beq.w	800a756 <_dtoa_r+0x47e>
 800a60c:	f1bb 0f00 	cmp.w	fp, #0
 800a610:	dd38      	ble.n	800a684 <_dtoa_r+0x3ac>
 800a612:	4bc0      	ldr	r3, [pc, #768]	; (800a914 <_dtoa_r+0x63c>)
 800a614:	f00b 020f 	and.w	r2, fp, #15
 800a618:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a61c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a620:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a624:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a628:	d019      	beq.n	800a65e <_dtoa_r+0x386>
 800a62a:	4bbb      	ldr	r3, [pc, #748]	; (800a918 <_dtoa_r+0x640>)
 800a62c:	ec51 0b18 	vmov	r0, r1, d8
 800a630:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a634:	f7f6 f932 	bl	800089c <__aeabi_ddiv>
 800a638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a63c:	f008 080f 	and.w	r8, r8, #15
 800a640:	2503      	movs	r5, #3
 800a642:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a918 <_dtoa_r+0x640>
 800a646:	f1b8 0f00 	cmp.w	r8, #0
 800a64a:	d10a      	bne.n	800a662 <_dtoa_r+0x38a>
 800a64c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a650:	4632      	mov	r2, r6
 800a652:	463b      	mov	r3, r7
 800a654:	f7f6 f922 	bl	800089c <__aeabi_ddiv>
 800a658:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a65c:	e02b      	b.n	800a6b6 <_dtoa_r+0x3de>
 800a65e:	2502      	movs	r5, #2
 800a660:	e7ef      	b.n	800a642 <_dtoa_r+0x36a>
 800a662:	f018 0f01 	tst.w	r8, #1
 800a666:	d008      	beq.n	800a67a <_dtoa_r+0x3a2>
 800a668:	4630      	mov	r0, r6
 800a66a:	4639      	mov	r1, r7
 800a66c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a670:	f7f5 ffea 	bl	8000648 <__aeabi_dmul>
 800a674:	3501      	adds	r5, #1
 800a676:	4606      	mov	r6, r0
 800a678:	460f      	mov	r7, r1
 800a67a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a67e:	f109 0908 	add.w	r9, r9, #8
 800a682:	e7e0      	b.n	800a646 <_dtoa_r+0x36e>
 800a684:	f000 809f 	beq.w	800a7c6 <_dtoa_r+0x4ee>
 800a688:	f1cb 0600 	rsb	r6, fp, #0
 800a68c:	4ba1      	ldr	r3, [pc, #644]	; (800a914 <_dtoa_r+0x63c>)
 800a68e:	4fa2      	ldr	r7, [pc, #648]	; (800a918 <_dtoa_r+0x640>)
 800a690:	f006 020f 	and.w	r2, r6, #15
 800a694:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69c:	ec51 0b18 	vmov	r0, r1, d8
 800a6a0:	f7f5 ffd2 	bl	8000648 <__aeabi_dmul>
 800a6a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6a8:	1136      	asrs	r6, r6, #4
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	2502      	movs	r5, #2
 800a6ae:	2e00      	cmp	r6, #0
 800a6b0:	d17e      	bne.n	800a7b0 <_dtoa_r+0x4d8>
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d1d0      	bne.n	800a658 <_dtoa_r+0x380>
 800a6b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	f000 8084 	beq.w	800a7ca <_dtoa_r+0x4f2>
 800a6c2:	4b96      	ldr	r3, [pc, #600]	; (800a91c <_dtoa_r+0x644>)
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	4640      	mov	r0, r8
 800a6c8:	4649      	mov	r1, r9
 800a6ca:	f7f6 fa2f 	bl	8000b2c <__aeabi_dcmplt>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	d07b      	beq.n	800a7ca <_dtoa_r+0x4f2>
 800a6d2:	9b04      	ldr	r3, [sp, #16]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d078      	beq.n	800a7ca <_dtoa_r+0x4f2>
 800a6d8:	9b01      	ldr	r3, [sp, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	dd39      	ble.n	800a752 <_dtoa_r+0x47a>
 800a6de:	4b90      	ldr	r3, [pc, #576]	; (800a920 <_dtoa_r+0x648>)
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	4640      	mov	r0, r8
 800a6e4:	4649      	mov	r1, r9
 800a6e6:	f7f5 ffaf 	bl	8000648 <__aeabi_dmul>
 800a6ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6ee:	9e01      	ldr	r6, [sp, #4]
 800a6f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a6f4:	3501      	adds	r5, #1
 800a6f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	f7f5 ff3a 	bl	8000574 <__aeabi_i2d>
 800a700:	4642      	mov	r2, r8
 800a702:	464b      	mov	r3, r9
 800a704:	f7f5 ffa0 	bl	8000648 <__aeabi_dmul>
 800a708:	4b86      	ldr	r3, [pc, #536]	; (800a924 <_dtoa_r+0x64c>)
 800a70a:	2200      	movs	r2, #0
 800a70c:	f7f5 fde6 	bl	80002dc <__adddf3>
 800a710:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a718:	9303      	str	r3, [sp, #12]
 800a71a:	2e00      	cmp	r6, #0
 800a71c:	d158      	bne.n	800a7d0 <_dtoa_r+0x4f8>
 800a71e:	4b82      	ldr	r3, [pc, #520]	; (800a928 <_dtoa_r+0x650>)
 800a720:	2200      	movs	r2, #0
 800a722:	4640      	mov	r0, r8
 800a724:	4649      	mov	r1, r9
 800a726:	f7f5 fdd7 	bl	80002d8 <__aeabi_dsub>
 800a72a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a72e:	4680      	mov	r8, r0
 800a730:	4689      	mov	r9, r1
 800a732:	f7f6 fa19 	bl	8000b68 <__aeabi_dcmpgt>
 800a736:	2800      	cmp	r0, #0
 800a738:	f040 8296 	bne.w	800ac68 <_dtoa_r+0x990>
 800a73c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a740:	4640      	mov	r0, r8
 800a742:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a746:	4649      	mov	r1, r9
 800a748:	f7f6 f9f0 	bl	8000b2c <__aeabi_dcmplt>
 800a74c:	2800      	cmp	r0, #0
 800a74e:	f040 8289 	bne.w	800ac64 <_dtoa_r+0x98c>
 800a752:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a756:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f2c0 814e 	blt.w	800a9fa <_dtoa_r+0x722>
 800a75e:	f1bb 0f0e 	cmp.w	fp, #14
 800a762:	f300 814a 	bgt.w	800a9fa <_dtoa_r+0x722>
 800a766:	4b6b      	ldr	r3, [pc, #428]	; (800a914 <_dtoa_r+0x63c>)
 800a768:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a76c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a772:	2b00      	cmp	r3, #0
 800a774:	f280 80dc 	bge.w	800a930 <_dtoa_r+0x658>
 800a778:	9b04      	ldr	r3, [sp, #16]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f300 80d8 	bgt.w	800a930 <_dtoa_r+0x658>
 800a780:	f040 826f 	bne.w	800ac62 <_dtoa_r+0x98a>
 800a784:	4b68      	ldr	r3, [pc, #416]	; (800a928 <_dtoa_r+0x650>)
 800a786:	2200      	movs	r2, #0
 800a788:	4640      	mov	r0, r8
 800a78a:	4649      	mov	r1, r9
 800a78c:	f7f5 ff5c 	bl	8000648 <__aeabi_dmul>
 800a790:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a794:	f7f6 f9de 	bl	8000b54 <__aeabi_dcmpge>
 800a798:	9e04      	ldr	r6, [sp, #16]
 800a79a:	4637      	mov	r7, r6
 800a79c:	2800      	cmp	r0, #0
 800a79e:	f040 8245 	bne.w	800ac2c <_dtoa_r+0x954>
 800a7a2:	9d00      	ldr	r5, [sp, #0]
 800a7a4:	2331      	movs	r3, #49	; 0x31
 800a7a6:	f805 3b01 	strb.w	r3, [r5], #1
 800a7aa:	f10b 0b01 	add.w	fp, fp, #1
 800a7ae:	e241      	b.n	800ac34 <_dtoa_r+0x95c>
 800a7b0:	07f2      	lsls	r2, r6, #31
 800a7b2:	d505      	bpl.n	800a7c0 <_dtoa_r+0x4e8>
 800a7b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7b8:	f7f5 ff46 	bl	8000648 <__aeabi_dmul>
 800a7bc:	3501      	adds	r5, #1
 800a7be:	2301      	movs	r3, #1
 800a7c0:	1076      	asrs	r6, r6, #1
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	e773      	b.n	800a6ae <_dtoa_r+0x3d6>
 800a7c6:	2502      	movs	r5, #2
 800a7c8:	e775      	b.n	800a6b6 <_dtoa_r+0x3de>
 800a7ca:	9e04      	ldr	r6, [sp, #16]
 800a7cc:	465f      	mov	r7, fp
 800a7ce:	e792      	b.n	800a6f6 <_dtoa_r+0x41e>
 800a7d0:	9900      	ldr	r1, [sp, #0]
 800a7d2:	4b50      	ldr	r3, [pc, #320]	; (800a914 <_dtoa_r+0x63c>)
 800a7d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7d8:	4431      	add	r1, r6
 800a7da:	9102      	str	r1, [sp, #8]
 800a7dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7de:	eeb0 9a47 	vmov.f32	s18, s14
 800a7e2:	eef0 9a67 	vmov.f32	s19, s15
 800a7e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a7ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7ee:	2900      	cmp	r1, #0
 800a7f0:	d044      	beq.n	800a87c <_dtoa_r+0x5a4>
 800a7f2:	494e      	ldr	r1, [pc, #312]	; (800a92c <_dtoa_r+0x654>)
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	f7f6 f851 	bl	800089c <__aeabi_ddiv>
 800a7fa:	ec53 2b19 	vmov	r2, r3, d9
 800a7fe:	f7f5 fd6b 	bl	80002d8 <__aeabi_dsub>
 800a802:	9d00      	ldr	r5, [sp, #0]
 800a804:	ec41 0b19 	vmov	d9, r0, r1
 800a808:	4649      	mov	r1, r9
 800a80a:	4640      	mov	r0, r8
 800a80c:	f7f6 f9cc 	bl	8000ba8 <__aeabi_d2iz>
 800a810:	4606      	mov	r6, r0
 800a812:	f7f5 feaf 	bl	8000574 <__aeabi_i2d>
 800a816:	4602      	mov	r2, r0
 800a818:	460b      	mov	r3, r1
 800a81a:	4640      	mov	r0, r8
 800a81c:	4649      	mov	r1, r9
 800a81e:	f7f5 fd5b 	bl	80002d8 <__aeabi_dsub>
 800a822:	3630      	adds	r6, #48	; 0x30
 800a824:	f805 6b01 	strb.w	r6, [r5], #1
 800a828:	ec53 2b19 	vmov	r2, r3, d9
 800a82c:	4680      	mov	r8, r0
 800a82e:	4689      	mov	r9, r1
 800a830:	f7f6 f97c 	bl	8000b2c <__aeabi_dcmplt>
 800a834:	2800      	cmp	r0, #0
 800a836:	d164      	bne.n	800a902 <_dtoa_r+0x62a>
 800a838:	4642      	mov	r2, r8
 800a83a:	464b      	mov	r3, r9
 800a83c:	4937      	ldr	r1, [pc, #220]	; (800a91c <_dtoa_r+0x644>)
 800a83e:	2000      	movs	r0, #0
 800a840:	f7f5 fd4a 	bl	80002d8 <__aeabi_dsub>
 800a844:	ec53 2b19 	vmov	r2, r3, d9
 800a848:	f7f6 f970 	bl	8000b2c <__aeabi_dcmplt>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	f040 80b6 	bne.w	800a9be <_dtoa_r+0x6e6>
 800a852:	9b02      	ldr	r3, [sp, #8]
 800a854:	429d      	cmp	r5, r3
 800a856:	f43f af7c 	beq.w	800a752 <_dtoa_r+0x47a>
 800a85a:	4b31      	ldr	r3, [pc, #196]	; (800a920 <_dtoa_r+0x648>)
 800a85c:	ec51 0b19 	vmov	r0, r1, d9
 800a860:	2200      	movs	r2, #0
 800a862:	f7f5 fef1 	bl	8000648 <__aeabi_dmul>
 800a866:	4b2e      	ldr	r3, [pc, #184]	; (800a920 <_dtoa_r+0x648>)
 800a868:	ec41 0b19 	vmov	d9, r0, r1
 800a86c:	2200      	movs	r2, #0
 800a86e:	4640      	mov	r0, r8
 800a870:	4649      	mov	r1, r9
 800a872:	f7f5 fee9 	bl	8000648 <__aeabi_dmul>
 800a876:	4680      	mov	r8, r0
 800a878:	4689      	mov	r9, r1
 800a87a:	e7c5      	b.n	800a808 <_dtoa_r+0x530>
 800a87c:	ec51 0b17 	vmov	r0, r1, d7
 800a880:	f7f5 fee2 	bl	8000648 <__aeabi_dmul>
 800a884:	9b02      	ldr	r3, [sp, #8]
 800a886:	9d00      	ldr	r5, [sp, #0]
 800a888:	930f      	str	r3, [sp, #60]	; 0x3c
 800a88a:	ec41 0b19 	vmov	d9, r0, r1
 800a88e:	4649      	mov	r1, r9
 800a890:	4640      	mov	r0, r8
 800a892:	f7f6 f989 	bl	8000ba8 <__aeabi_d2iz>
 800a896:	4606      	mov	r6, r0
 800a898:	f7f5 fe6c 	bl	8000574 <__aeabi_i2d>
 800a89c:	3630      	adds	r6, #48	; 0x30
 800a89e:	4602      	mov	r2, r0
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	4640      	mov	r0, r8
 800a8a4:	4649      	mov	r1, r9
 800a8a6:	f7f5 fd17 	bl	80002d8 <__aeabi_dsub>
 800a8aa:	f805 6b01 	strb.w	r6, [r5], #1
 800a8ae:	9b02      	ldr	r3, [sp, #8]
 800a8b0:	429d      	cmp	r5, r3
 800a8b2:	4680      	mov	r8, r0
 800a8b4:	4689      	mov	r9, r1
 800a8b6:	f04f 0200 	mov.w	r2, #0
 800a8ba:	d124      	bne.n	800a906 <_dtoa_r+0x62e>
 800a8bc:	4b1b      	ldr	r3, [pc, #108]	; (800a92c <_dtoa_r+0x654>)
 800a8be:	ec51 0b19 	vmov	r0, r1, d9
 800a8c2:	f7f5 fd0b 	bl	80002dc <__adddf3>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	4640      	mov	r0, r8
 800a8cc:	4649      	mov	r1, r9
 800a8ce:	f7f6 f94b 	bl	8000b68 <__aeabi_dcmpgt>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	d173      	bne.n	800a9be <_dtoa_r+0x6e6>
 800a8d6:	ec53 2b19 	vmov	r2, r3, d9
 800a8da:	4914      	ldr	r1, [pc, #80]	; (800a92c <_dtoa_r+0x654>)
 800a8dc:	2000      	movs	r0, #0
 800a8de:	f7f5 fcfb 	bl	80002d8 <__aeabi_dsub>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	4640      	mov	r0, r8
 800a8e8:	4649      	mov	r1, r9
 800a8ea:	f7f6 f91f 	bl	8000b2c <__aeabi_dcmplt>
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	f43f af2f 	beq.w	800a752 <_dtoa_r+0x47a>
 800a8f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a8f6:	1e6b      	subs	r3, r5, #1
 800a8f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8fe:	2b30      	cmp	r3, #48	; 0x30
 800a900:	d0f8      	beq.n	800a8f4 <_dtoa_r+0x61c>
 800a902:	46bb      	mov	fp, r7
 800a904:	e04a      	b.n	800a99c <_dtoa_r+0x6c4>
 800a906:	4b06      	ldr	r3, [pc, #24]	; (800a920 <_dtoa_r+0x648>)
 800a908:	f7f5 fe9e 	bl	8000648 <__aeabi_dmul>
 800a90c:	4680      	mov	r8, r0
 800a90e:	4689      	mov	r9, r1
 800a910:	e7bd      	b.n	800a88e <_dtoa_r+0x5b6>
 800a912:	bf00      	nop
 800a914:	0800efc0 	.word	0x0800efc0
 800a918:	0800ef98 	.word	0x0800ef98
 800a91c:	3ff00000 	.word	0x3ff00000
 800a920:	40240000 	.word	0x40240000
 800a924:	401c0000 	.word	0x401c0000
 800a928:	40140000 	.word	0x40140000
 800a92c:	3fe00000 	.word	0x3fe00000
 800a930:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a934:	9d00      	ldr	r5, [sp, #0]
 800a936:	4642      	mov	r2, r8
 800a938:	464b      	mov	r3, r9
 800a93a:	4630      	mov	r0, r6
 800a93c:	4639      	mov	r1, r7
 800a93e:	f7f5 ffad 	bl	800089c <__aeabi_ddiv>
 800a942:	f7f6 f931 	bl	8000ba8 <__aeabi_d2iz>
 800a946:	9001      	str	r0, [sp, #4]
 800a948:	f7f5 fe14 	bl	8000574 <__aeabi_i2d>
 800a94c:	4642      	mov	r2, r8
 800a94e:	464b      	mov	r3, r9
 800a950:	f7f5 fe7a 	bl	8000648 <__aeabi_dmul>
 800a954:	4602      	mov	r2, r0
 800a956:	460b      	mov	r3, r1
 800a958:	4630      	mov	r0, r6
 800a95a:	4639      	mov	r1, r7
 800a95c:	f7f5 fcbc 	bl	80002d8 <__aeabi_dsub>
 800a960:	9e01      	ldr	r6, [sp, #4]
 800a962:	9f04      	ldr	r7, [sp, #16]
 800a964:	3630      	adds	r6, #48	; 0x30
 800a966:	f805 6b01 	strb.w	r6, [r5], #1
 800a96a:	9e00      	ldr	r6, [sp, #0]
 800a96c:	1bae      	subs	r6, r5, r6
 800a96e:	42b7      	cmp	r7, r6
 800a970:	4602      	mov	r2, r0
 800a972:	460b      	mov	r3, r1
 800a974:	d134      	bne.n	800a9e0 <_dtoa_r+0x708>
 800a976:	f7f5 fcb1 	bl	80002dc <__adddf3>
 800a97a:	4642      	mov	r2, r8
 800a97c:	464b      	mov	r3, r9
 800a97e:	4606      	mov	r6, r0
 800a980:	460f      	mov	r7, r1
 800a982:	f7f6 f8f1 	bl	8000b68 <__aeabi_dcmpgt>
 800a986:	b9c8      	cbnz	r0, 800a9bc <_dtoa_r+0x6e4>
 800a988:	4642      	mov	r2, r8
 800a98a:	464b      	mov	r3, r9
 800a98c:	4630      	mov	r0, r6
 800a98e:	4639      	mov	r1, r7
 800a990:	f7f6 f8c2 	bl	8000b18 <__aeabi_dcmpeq>
 800a994:	b110      	cbz	r0, 800a99c <_dtoa_r+0x6c4>
 800a996:	9b01      	ldr	r3, [sp, #4]
 800a998:	07db      	lsls	r3, r3, #31
 800a99a:	d40f      	bmi.n	800a9bc <_dtoa_r+0x6e4>
 800a99c:	4651      	mov	r1, sl
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f000 fbcc 	bl	800b13c <_Bfree>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9a8:	702b      	strb	r3, [r5, #0]
 800a9aa:	f10b 0301 	add.w	r3, fp, #1
 800a9ae:	6013      	str	r3, [r2, #0]
 800a9b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f43f ace2 	beq.w	800a37c <_dtoa_r+0xa4>
 800a9b8:	601d      	str	r5, [r3, #0]
 800a9ba:	e4df      	b.n	800a37c <_dtoa_r+0xa4>
 800a9bc:	465f      	mov	r7, fp
 800a9be:	462b      	mov	r3, r5
 800a9c0:	461d      	mov	r5, r3
 800a9c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9c6:	2a39      	cmp	r2, #57	; 0x39
 800a9c8:	d106      	bne.n	800a9d8 <_dtoa_r+0x700>
 800a9ca:	9a00      	ldr	r2, [sp, #0]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d1f7      	bne.n	800a9c0 <_dtoa_r+0x6e8>
 800a9d0:	9900      	ldr	r1, [sp, #0]
 800a9d2:	2230      	movs	r2, #48	; 0x30
 800a9d4:	3701      	adds	r7, #1
 800a9d6:	700a      	strb	r2, [r1, #0]
 800a9d8:	781a      	ldrb	r2, [r3, #0]
 800a9da:	3201      	adds	r2, #1
 800a9dc:	701a      	strb	r2, [r3, #0]
 800a9de:	e790      	b.n	800a902 <_dtoa_r+0x62a>
 800a9e0:	4ba3      	ldr	r3, [pc, #652]	; (800ac70 <_dtoa_r+0x998>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f7f5 fe30 	bl	8000648 <__aeabi_dmul>
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	4606      	mov	r6, r0
 800a9ee:	460f      	mov	r7, r1
 800a9f0:	f7f6 f892 	bl	8000b18 <__aeabi_dcmpeq>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d09e      	beq.n	800a936 <_dtoa_r+0x65e>
 800a9f8:	e7d0      	b.n	800a99c <_dtoa_r+0x6c4>
 800a9fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9fc:	2a00      	cmp	r2, #0
 800a9fe:	f000 80ca 	beq.w	800ab96 <_dtoa_r+0x8be>
 800aa02:	9a07      	ldr	r2, [sp, #28]
 800aa04:	2a01      	cmp	r2, #1
 800aa06:	f300 80ad 	bgt.w	800ab64 <_dtoa_r+0x88c>
 800aa0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa0c:	2a00      	cmp	r2, #0
 800aa0e:	f000 80a5 	beq.w	800ab5c <_dtoa_r+0x884>
 800aa12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa16:	9e08      	ldr	r6, [sp, #32]
 800aa18:	9d05      	ldr	r5, [sp, #20]
 800aa1a:	9a05      	ldr	r2, [sp, #20]
 800aa1c:	441a      	add	r2, r3
 800aa1e:	9205      	str	r2, [sp, #20]
 800aa20:	9a06      	ldr	r2, [sp, #24]
 800aa22:	2101      	movs	r1, #1
 800aa24:	441a      	add	r2, r3
 800aa26:	4620      	mov	r0, r4
 800aa28:	9206      	str	r2, [sp, #24]
 800aa2a:	f000 fc87 	bl	800b33c <__i2b>
 800aa2e:	4607      	mov	r7, r0
 800aa30:	b165      	cbz	r5, 800aa4c <_dtoa_r+0x774>
 800aa32:	9b06      	ldr	r3, [sp, #24]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	dd09      	ble.n	800aa4c <_dtoa_r+0x774>
 800aa38:	42ab      	cmp	r3, r5
 800aa3a:	9a05      	ldr	r2, [sp, #20]
 800aa3c:	bfa8      	it	ge
 800aa3e:	462b      	movge	r3, r5
 800aa40:	1ad2      	subs	r2, r2, r3
 800aa42:	9205      	str	r2, [sp, #20]
 800aa44:	9a06      	ldr	r2, [sp, #24]
 800aa46:	1aed      	subs	r5, r5, r3
 800aa48:	1ad3      	subs	r3, r2, r3
 800aa4a:	9306      	str	r3, [sp, #24]
 800aa4c:	9b08      	ldr	r3, [sp, #32]
 800aa4e:	b1f3      	cbz	r3, 800aa8e <_dtoa_r+0x7b6>
 800aa50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f000 80a3 	beq.w	800ab9e <_dtoa_r+0x8c6>
 800aa58:	2e00      	cmp	r6, #0
 800aa5a:	dd10      	ble.n	800aa7e <_dtoa_r+0x7a6>
 800aa5c:	4639      	mov	r1, r7
 800aa5e:	4632      	mov	r2, r6
 800aa60:	4620      	mov	r0, r4
 800aa62:	f000 fd2b 	bl	800b4bc <__pow5mult>
 800aa66:	4652      	mov	r2, sl
 800aa68:	4601      	mov	r1, r0
 800aa6a:	4607      	mov	r7, r0
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f000 fc7b 	bl	800b368 <__multiply>
 800aa72:	4651      	mov	r1, sl
 800aa74:	4680      	mov	r8, r0
 800aa76:	4620      	mov	r0, r4
 800aa78:	f000 fb60 	bl	800b13c <_Bfree>
 800aa7c:	46c2      	mov	sl, r8
 800aa7e:	9b08      	ldr	r3, [sp, #32]
 800aa80:	1b9a      	subs	r2, r3, r6
 800aa82:	d004      	beq.n	800aa8e <_dtoa_r+0x7b6>
 800aa84:	4651      	mov	r1, sl
 800aa86:	4620      	mov	r0, r4
 800aa88:	f000 fd18 	bl	800b4bc <__pow5mult>
 800aa8c:	4682      	mov	sl, r0
 800aa8e:	2101      	movs	r1, #1
 800aa90:	4620      	mov	r0, r4
 800aa92:	f000 fc53 	bl	800b33c <__i2b>
 800aa96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	4606      	mov	r6, r0
 800aa9c:	f340 8081 	ble.w	800aba2 <_dtoa_r+0x8ca>
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	4601      	mov	r1, r0
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f000 fd09 	bl	800b4bc <__pow5mult>
 800aaaa:	9b07      	ldr	r3, [sp, #28]
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	4606      	mov	r6, r0
 800aab0:	dd7a      	ble.n	800aba8 <_dtoa_r+0x8d0>
 800aab2:	f04f 0800 	mov.w	r8, #0
 800aab6:	6933      	ldr	r3, [r6, #16]
 800aab8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aabc:	6918      	ldr	r0, [r3, #16]
 800aabe:	f000 fbef 	bl	800b2a0 <__hi0bits>
 800aac2:	f1c0 0020 	rsb	r0, r0, #32
 800aac6:	9b06      	ldr	r3, [sp, #24]
 800aac8:	4418      	add	r0, r3
 800aaca:	f010 001f 	ands.w	r0, r0, #31
 800aace:	f000 8094 	beq.w	800abfa <_dtoa_r+0x922>
 800aad2:	f1c0 0320 	rsb	r3, r0, #32
 800aad6:	2b04      	cmp	r3, #4
 800aad8:	f340 8085 	ble.w	800abe6 <_dtoa_r+0x90e>
 800aadc:	9b05      	ldr	r3, [sp, #20]
 800aade:	f1c0 001c 	rsb	r0, r0, #28
 800aae2:	4403      	add	r3, r0
 800aae4:	9305      	str	r3, [sp, #20]
 800aae6:	9b06      	ldr	r3, [sp, #24]
 800aae8:	4403      	add	r3, r0
 800aaea:	4405      	add	r5, r0
 800aaec:	9306      	str	r3, [sp, #24]
 800aaee:	9b05      	ldr	r3, [sp, #20]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	dd05      	ble.n	800ab00 <_dtoa_r+0x828>
 800aaf4:	4651      	mov	r1, sl
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f000 fd39 	bl	800b570 <__lshift>
 800aafe:	4682      	mov	sl, r0
 800ab00:	9b06      	ldr	r3, [sp, #24]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	dd05      	ble.n	800ab12 <_dtoa_r+0x83a>
 800ab06:	4631      	mov	r1, r6
 800ab08:	461a      	mov	r2, r3
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f000 fd30 	bl	800b570 <__lshift>
 800ab10:	4606      	mov	r6, r0
 800ab12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d072      	beq.n	800abfe <_dtoa_r+0x926>
 800ab18:	4631      	mov	r1, r6
 800ab1a:	4650      	mov	r0, sl
 800ab1c:	f000 fd94 	bl	800b648 <__mcmp>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	da6c      	bge.n	800abfe <_dtoa_r+0x926>
 800ab24:	2300      	movs	r3, #0
 800ab26:	4651      	mov	r1, sl
 800ab28:	220a      	movs	r2, #10
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f000 fb28 	bl	800b180 <__multadd>
 800ab30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab32:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab36:	4682      	mov	sl, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	f000 81b0 	beq.w	800ae9e <_dtoa_r+0xbc6>
 800ab3e:	2300      	movs	r3, #0
 800ab40:	4639      	mov	r1, r7
 800ab42:	220a      	movs	r2, #10
 800ab44:	4620      	mov	r0, r4
 800ab46:	f000 fb1b 	bl	800b180 <__multadd>
 800ab4a:	9b01      	ldr	r3, [sp, #4]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	4607      	mov	r7, r0
 800ab50:	f300 8096 	bgt.w	800ac80 <_dtoa_r+0x9a8>
 800ab54:	9b07      	ldr	r3, [sp, #28]
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	dc59      	bgt.n	800ac0e <_dtoa_r+0x936>
 800ab5a:	e091      	b.n	800ac80 <_dtoa_r+0x9a8>
 800ab5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab62:	e758      	b.n	800aa16 <_dtoa_r+0x73e>
 800ab64:	9b04      	ldr	r3, [sp, #16]
 800ab66:	1e5e      	subs	r6, r3, #1
 800ab68:	9b08      	ldr	r3, [sp, #32]
 800ab6a:	42b3      	cmp	r3, r6
 800ab6c:	bfbf      	itttt	lt
 800ab6e:	9b08      	ldrlt	r3, [sp, #32]
 800ab70:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ab72:	9608      	strlt	r6, [sp, #32]
 800ab74:	1af3      	sublt	r3, r6, r3
 800ab76:	bfb4      	ite	lt
 800ab78:	18d2      	addlt	r2, r2, r3
 800ab7a:	1b9e      	subge	r6, r3, r6
 800ab7c:	9b04      	ldr	r3, [sp, #16]
 800ab7e:	bfbc      	itt	lt
 800ab80:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ab82:	2600      	movlt	r6, #0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	bfb7      	itett	lt
 800ab88:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ab8c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ab90:	1a9d      	sublt	r5, r3, r2
 800ab92:	2300      	movlt	r3, #0
 800ab94:	e741      	b.n	800aa1a <_dtoa_r+0x742>
 800ab96:	9e08      	ldr	r6, [sp, #32]
 800ab98:	9d05      	ldr	r5, [sp, #20]
 800ab9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ab9c:	e748      	b.n	800aa30 <_dtoa_r+0x758>
 800ab9e:	9a08      	ldr	r2, [sp, #32]
 800aba0:	e770      	b.n	800aa84 <_dtoa_r+0x7ac>
 800aba2:	9b07      	ldr	r3, [sp, #28]
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	dc19      	bgt.n	800abdc <_dtoa_r+0x904>
 800aba8:	9b02      	ldr	r3, [sp, #8]
 800abaa:	b9bb      	cbnz	r3, 800abdc <_dtoa_r+0x904>
 800abac:	9b03      	ldr	r3, [sp, #12]
 800abae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abb2:	b99b      	cbnz	r3, 800abdc <_dtoa_r+0x904>
 800abb4:	9b03      	ldr	r3, [sp, #12]
 800abb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abba:	0d1b      	lsrs	r3, r3, #20
 800abbc:	051b      	lsls	r3, r3, #20
 800abbe:	b183      	cbz	r3, 800abe2 <_dtoa_r+0x90a>
 800abc0:	9b05      	ldr	r3, [sp, #20]
 800abc2:	3301      	adds	r3, #1
 800abc4:	9305      	str	r3, [sp, #20]
 800abc6:	9b06      	ldr	r3, [sp, #24]
 800abc8:	3301      	adds	r3, #1
 800abca:	9306      	str	r3, [sp, #24]
 800abcc:	f04f 0801 	mov.w	r8, #1
 800abd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	f47f af6f 	bne.w	800aab6 <_dtoa_r+0x7de>
 800abd8:	2001      	movs	r0, #1
 800abda:	e774      	b.n	800aac6 <_dtoa_r+0x7ee>
 800abdc:	f04f 0800 	mov.w	r8, #0
 800abe0:	e7f6      	b.n	800abd0 <_dtoa_r+0x8f8>
 800abe2:	4698      	mov	r8, r3
 800abe4:	e7f4      	b.n	800abd0 <_dtoa_r+0x8f8>
 800abe6:	d082      	beq.n	800aaee <_dtoa_r+0x816>
 800abe8:	9a05      	ldr	r2, [sp, #20]
 800abea:	331c      	adds	r3, #28
 800abec:	441a      	add	r2, r3
 800abee:	9205      	str	r2, [sp, #20]
 800abf0:	9a06      	ldr	r2, [sp, #24]
 800abf2:	441a      	add	r2, r3
 800abf4:	441d      	add	r5, r3
 800abf6:	9206      	str	r2, [sp, #24]
 800abf8:	e779      	b.n	800aaee <_dtoa_r+0x816>
 800abfa:	4603      	mov	r3, r0
 800abfc:	e7f4      	b.n	800abe8 <_dtoa_r+0x910>
 800abfe:	9b04      	ldr	r3, [sp, #16]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	dc37      	bgt.n	800ac74 <_dtoa_r+0x99c>
 800ac04:	9b07      	ldr	r3, [sp, #28]
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	dd34      	ble.n	800ac74 <_dtoa_r+0x99c>
 800ac0a:	9b04      	ldr	r3, [sp, #16]
 800ac0c:	9301      	str	r3, [sp, #4]
 800ac0e:	9b01      	ldr	r3, [sp, #4]
 800ac10:	b963      	cbnz	r3, 800ac2c <_dtoa_r+0x954>
 800ac12:	4631      	mov	r1, r6
 800ac14:	2205      	movs	r2, #5
 800ac16:	4620      	mov	r0, r4
 800ac18:	f000 fab2 	bl	800b180 <__multadd>
 800ac1c:	4601      	mov	r1, r0
 800ac1e:	4606      	mov	r6, r0
 800ac20:	4650      	mov	r0, sl
 800ac22:	f000 fd11 	bl	800b648 <__mcmp>
 800ac26:	2800      	cmp	r0, #0
 800ac28:	f73f adbb 	bgt.w	800a7a2 <_dtoa_r+0x4ca>
 800ac2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac2e:	9d00      	ldr	r5, [sp, #0]
 800ac30:	ea6f 0b03 	mvn.w	fp, r3
 800ac34:	f04f 0800 	mov.w	r8, #0
 800ac38:	4631      	mov	r1, r6
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	f000 fa7e 	bl	800b13c <_Bfree>
 800ac40:	2f00      	cmp	r7, #0
 800ac42:	f43f aeab 	beq.w	800a99c <_dtoa_r+0x6c4>
 800ac46:	f1b8 0f00 	cmp.w	r8, #0
 800ac4a:	d005      	beq.n	800ac58 <_dtoa_r+0x980>
 800ac4c:	45b8      	cmp	r8, r7
 800ac4e:	d003      	beq.n	800ac58 <_dtoa_r+0x980>
 800ac50:	4641      	mov	r1, r8
 800ac52:	4620      	mov	r0, r4
 800ac54:	f000 fa72 	bl	800b13c <_Bfree>
 800ac58:	4639      	mov	r1, r7
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	f000 fa6e 	bl	800b13c <_Bfree>
 800ac60:	e69c      	b.n	800a99c <_dtoa_r+0x6c4>
 800ac62:	2600      	movs	r6, #0
 800ac64:	4637      	mov	r7, r6
 800ac66:	e7e1      	b.n	800ac2c <_dtoa_r+0x954>
 800ac68:	46bb      	mov	fp, r7
 800ac6a:	4637      	mov	r7, r6
 800ac6c:	e599      	b.n	800a7a2 <_dtoa_r+0x4ca>
 800ac6e:	bf00      	nop
 800ac70:	40240000 	.word	0x40240000
 800ac74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	f000 80c8 	beq.w	800ae0c <_dtoa_r+0xb34>
 800ac7c:	9b04      	ldr	r3, [sp, #16]
 800ac7e:	9301      	str	r3, [sp, #4]
 800ac80:	2d00      	cmp	r5, #0
 800ac82:	dd05      	ble.n	800ac90 <_dtoa_r+0x9b8>
 800ac84:	4639      	mov	r1, r7
 800ac86:	462a      	mov	r2, r5
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f000 fc71 	bl	800b570 <__lshift>
 800ac8e:	4607      	mov	r7, r0
 800ac90:	f1b8 0f00 	cmp.w	r8, #0
 800ac94:	d05b      	beq.n	800ad4e <_dtoa_r+0xa76>
 800ac96:	6879      	ldr	r1, [r7, #4]
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f000 fa0f 	bl	800b0bc <_Balloc>
 800ac9e:	4605      	mov	r5, r0
 800aca0:	b928      	cbnz	r0, 800acae <_dtoa_r+0x9d6>
 800aca2:	4b83      	ldr	r3, [pc, #524]	; (800aeb0 <_dtoa_r+0xbd8>)
 800aca4:	4602      	mov	r2, r0
 800aca6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800acaa:	f7ff bb2e 	b.w	800a30a <_dtoa_r+0x32>
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	3202      	adds	r2, #2
 800acb2:	0092      	lsls	r2, r2, #2
 800acb4:	f107 010c 	add.w	r1, r7, #12
 800acb8:	300c      	adds	r0, #12
 800acba:	f001 ff85 	bl	800cbc8 <memcpy>
 800acbe:	2201      	movs	r2, #1
 800acc0:	4629      	mov	r1, r5
 800acc2:	4620      	mov	r0, r4
 800acc4:	f000 fc54 	bl	800b570 <__lshift>
 800acc8:	9b00      	ldr	r3, [sp, #0]
 800acca:	3301      	adds	r3, #1
 800accc:	9304      	str	r3, [sp, #16]
 800acce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acd2:	4413      	add	r3, r2
 800acd4:	9308      	str	r3, [sp, #32]
 800acd6:	9b02      	ldr	r3, [sp, #8]
 800acd8:	f003 0301 	and.w	r3, r3, #1
 800acdc:	46b8      	mov	r8, r7
 800acde:	9306      	str	r3, [sp, #24]
 800ace0:	4607      	mov	r7, r0
 800ace2:	9b04      	ldr	r3, [sp, #16]
 800ace4:	4631      	mov	r1, r6
 800ace6:	3b01      	subs	r3, #1
 800ace8:	4650      	mov	r0, sl
 800acea:	9301      	str	r3, [sp, #4]
 800acec:	f7ff fa6a 	bl	800a1c4 <quorem>
 800acf0:	4641      	mov	r1, r8
 800acf2:	9002      	str	r0, [sp, #8]
 800acf4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800acf8:	4650      	mov	r0, sl
 800acfa:	f000 fca5 	bl	800b648 <__mcmp>
 800acfe:	463a      	mov	r2, r7
 800ad00:	9005      	str	r0, [sp, #20]
 800ad02:	4631      	mov	r1, r6
 800ad04:	4620      	mov	r0, r4
 800ad06:	f000 fcbb 	bl	800b680 <__mdiff>
 800ad0a:	68c2      	ldr	r2, [r0, #12]
 800ad0c:	4605      	mov	r5, r0
 800ad0e:	bb02      	cbnz	r2, 800ad52 <_dtoa_r+0xa7a>
 800ad10:	4601      	mov	r1, r0
 800ad12:	4650      	mov	r0, sl
 800ad14:	f000 fc98 	bl	800b648 <__mcmp>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	4629      	mov	r1, r5
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	9209      	str	r2, [sp, #36]	; 0x24
 800ad20:	f000 fa0c 	bl	800b13c <_Bfree>
 800ad24:	9b07      	ldr	r3, [sp, #28]
 800ad26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad28:	9d04      	ldr	r5, [sp, #16]
 800ad2a:	ea43 0102 	orr.w	r1, r3, r2
 800ad2e:	9b06      	ldr	r3, [sp, #24]
 800ad30:	4319      	orrs	r1, r3
 800ad32:	d110      	bne.n	800ad56 <_dtoa_r+0xa7e>
 800ad34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ad38:	d029      	beq.n	800ad8e <_dtoa_r+0xab6>
 800ad3a:	9b05      	ldr	r3, [sp, #20]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	dd02      	ble.n	800ad46 <_dtoa_r+0xa6e>
 800ad40:	9b02      	ldr	r3, [sp, #8]
 800ad42:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ad46:	9b01      	ldr	r3, [sp, #4]
 800ad48:	f883 9000 	strb.w	r9, [r3]
 800ad4c:	e774      	b.n	800ac38 <_dtoa_r+0x960>
 800ad4e:	4638      	mov	r0, r7
 800ad50:	e7ba      	b.n	800acc8 <_dtoa_r+0x9f0>
 800ad52:	2201      	movs	r2, #1
 800ad54:	e7e1      	b.n	800ad1a <_dtoa_r+0xa42>
 800ad56:	9b05      	ldr	r3, [sp, #20]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	db04      	blt.n	800ad66 <_dtoa_r+0xa8e>
 800ad5c:	9907      	ldr	r1, [sp, #28]
 800ad5e:	430b      	orrs	r3, r1
 800ad60:	9906      	ldr	r1, [sp, #24]
 800ad62:	430b      	orrs	r3, r1
 800ad64:	d120      	bne.n	800ada8 <_dtoa_r+0xad0>
 800ad66:	2a00      	cmp	r2, #0
 800ad68:	dded      	ble.n	800ad46 <_dtoa_r+0xa6e>
 800ad6a:	4651      	mov	r1, sl
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 fbfe 	bl	800b570 <__lshift>
 800ad74:	4631      	mov	r1, r6
 800ad76:	4682      	mov	sl, r0
 800ad78:	f000 fc66 	bl	800b648 <__mcmp>
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	dc03      	bgt.n	800ad88 <_dtoa_r+0xab0>
 800ad80:	d1e1      	bne.n	800ad46 <_dtoa_r+0xa6e>
 800ad82:	f019 0f01 	tst.w	r9, #1
 800ad86:	d0de      	beq.n	800ad46 <_dtoa_r+0xa6e>
 800ad88:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ad8c:	d1d8      	bne.n	800ad40 <_dtoa_r+0xa68>
 800ad8e:	9a01      	ldr	r2, [sp, #4]
 800ad90:	2339      	movs	r3, #57	; 0x39
 800ad92:	7013      	strb	r3, [r2, #0]
 800ad94:	462b      	mov	r3, r5
 800ad96:	461d      	mov	r5, r3
 800ad98:	3b01      	subs	r3, #1
 800ad9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad9e:	2a39      	cmp	r2, #57	; 0x39
 800ada0:	d06c      	beq.n	800ae7c <_dtoa_r+0xba4>
 800ada2:	3201      	adds	r2, #1
 800ada4:	701a      	strb	r2, [r3, #0]
 800ada6:	e747      	b.n	800ac38 <_dtoa_r+0x960>
 800ada8:	2a00      	cmp	r2, #0
 800adaa:	dd07      	ble.n	800adbc <_dtoa_r+0xae4>
 800adac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800adb0:	d0ed      	beq.n	800ad8e <_dtoa_r+0xab6>
 800adb2:	9a01      	ldr	r2, [sp, #4]
 800adb4:	f109 0301 	add.w	r3, r9, #1
 800adb8:	7013      	strb	r3, [r2, #0]
 800adba:	e73d      	b.n	800ac38 <_dtoa_r+0x960>
 800adbc:	9b04      	ldr	r3, [sp, #16]
 800adbe:	9a08      	ldr	r2, [sp, #32]
 800adc0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d043      	beq.n	800ae50 <_dtoa_r+0xb78>
 800adc8:	4651      	mov	r1, sl
 800adca:	2300      	movs	r3, #0
 800adcc:	220a      	movs	r2, #10
 800adce:	4620      	mov	r0, r4
 800add0:	f000 f9d6 	bl	800b180 <__multadd>
 800add4:	45b8      	cmp	r8, r7
 800add6:	4682      	mov	sl, r0
 800add8:	f04f 0300 	mov.w	r3, #0
 800addc:	f04f 020a 	mov.w	r2, #10
 800ade0:	4641      	mov	r1, r8
 800ade2:	4620      	mov	r0, r4
 800ade4:	d107      	bne.n	800adf6 <_dtoa_r+0xb1e>
 800ade6:	f000 f9cb 	bl	800b180 <__multadd>
 800adea:	4680      	mov	r8, r0
 800adec:	4607      	mov	r7, r0
 800adee:	9b04      	ldr	r3, [sp, #16]
 800adf0:	3301      	adds	r3, #1
 800adf2:	9304      	str	r3, [sp, #16]
 800adf4:	e775      	b.n	800ace2 <_dtoa_r+0xa0a>
 800adf6:	f000 f9c3 	bl	800b180 <__multadd>
 800adfa:	4639      	mov	r1, r7
 800adfc:	4680      	mov	r8, r0
 800adfe:	2300      	movs	r3, #0
 800ae00:	220a      	movs	r2, #10
 800ae02:	4620      	mov	r0, r4
 800ae04:	f000 f9bc 	bl	800b180 <__multadd>
 800ae08:	4607      	mov	r7, r0
 800ae0a:	e7f0      	b.n	800adee <_dtoa_r+0xb16>
 800ae0c:	9b04      	ldr	r3, [sp, #16]
 800ae0e:	9301      	str	r3, [sp, #4]
 800ae10:	9d00      	ldr	r5, [sp, #0]
 800ae12:	4631      	mov	r1, r6
 800ae14:	4650      	mov	r0, sl
 800ae16:	f7ff f9d5 	bl	800a1c4 <quorem>
 800ae1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ae1e:	9b00      	ldr	r3, [sp, #0]
 800ae20:	f805 9b01 	strb.w	r9, [r5], #1
 800ae24:	1aea      	subs	r2, r5, r3
 800ae26:	9b01      	ldr	r3, [sp, #4]
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	dd07      	ble.n	800ae3c <_dtoa_r+0xb64>
 800ae2c:	4651      	mov	r1, sl
 800ae2e:	2300      	movs	r3, #0
 800ae30:	220a      	movs	r2, #10
 800ae32:	4620      	mov	r0, r4
 800ae34:	f000 f9a4 	bl	800b180 <__multadd>
 800ae38:	4682      	mov	sl, r0
 800ae3a:	e7ea      	b.n	800ae12 <_dtoa_r+0xb3a>
 800ae3c:	9b01      	ldr	r3, [sp, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	bfc8      	it	gt
 800ae42:	461d      	movgt	r5, r3
 800ae44:	9b00      	ldr	r3, [sp, #0]
 800ae46:	bfd8      	it	le
 800ae48:	2501      	movle	r5, #1
 800ae4a:	441d      	add	r5, r3
 800ae4c:	f04f 0800 	mov.w	r8, #0
 800ae50:	4651      	mov	r1, sl
 800ae52:	2201      	movs	r2, #1
 800ae54:	4620      	mov	r0, r4
 800ae56:	f000 fb8b 	bl	800b570 <__lshift>
 800ae5a:	4631      	mov	r1, r6
 800ae5c:	4682      	mov	sl, r0
 800ae5e:	f000 fbf3 	bl	800b648 <__mcmp>
 800ae62:	2800      	cmp	r0, #0
 800ae64:	dc96      	bgt.n	800ad94 <_dtoa_r+0xabc>
 800ae66:	d102      	bne.n	800ae6e <_dtoa_r+0xb96>
 800ae68:	f019 0f01 	tst.w	r9, #1
 800ae6c:	d192      	bne.n	800ad94 <_dtoa_r+0xabc>
 800ae6e:	462b      	mov	r3, r5
 800ae70:	461d      	mov	r5, r3
 800ae72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae76:	2a30      	cmp	r2, #48	; 0x30
 800ae78:	d0fa      	beq.n	800ae70 <_dtoa_r+0xb98>
 800ae7a:	e6dd      	b.n	800ac38 <_dtoa_r+0x960>
 800ae7c:	9a00      	ldr	r2, [sp, #0]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d189      	bne.n	800ad96 <_dtoa_r+0xabe>
 800ae82:	f10b 0b01 	add.w	fp, fp, #1
 800ae86:	2331      	movs	r3, #49	; 0x31
 800ae88:	e796      	b.n	800adb8 <_dtoa_r+0xae0>
 800ae8a:	4b0a      	ldr	r3, [pc, #40]	; (800aeb4 <_dtoa_r+0xbdc>)
 800ae8c:	f7ff ba99 	b.w	800a3c2 <_dtoa_r+0xea>
 800ae90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f47f aa6d 	bne.w	800a372 <_dtoa_r+0x9a>
 800ae98:	4b07      	ldr	r3, [pc, #28]	; (800aeb8 <_dtoa_r+0xbe0>)
 800ae9a:	f7ff ba92 	b.w	800a3c2 <_dtoa_r+0xea>
 800ae9e:	9b01      	ldr	r3, [sp, #4]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	dcb5      	bgt.n	800ae10 <_dtoa_r+0xb38>
 800aea4:	9b07      	ldr	r3, [sp, #28]
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	f73f aeb1 	bgt.w	800ac0e <_dtoa_r+0x936>
 800aeac:	e7b0      	b.n	800ae10 <_dtoa_r+0xb38>
 800aeae:	bf00      	nop
 800aeb0:	0800ef2d 	.word	0x0800ef2d
 800aeb4:	0800ee88 	.word	0x0800ee88
 800aeb8:	0800eeb1 	.word	0x0800eeb1

0800aebc <_free_r>:
 800aebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aebe:	2900      	cmp	r1, #0
 800aec0:	d044      	beq.n	800af4c <_free_r+0x90>
 800aec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aec6:	9001      	str	r0, [sp, #4]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	f1a1 0404 	sub.w	r4, r1, #4
 800aece:	bfb8      	it	lt
 800aed0:	18e4      	addlt	r4, r4, r3
 800aed2:	f000 f8e7 	bl	800b0a4 <__malloc_lock>
 800aed6:	4a1e      	ldr	r2, [pc, #120]	; (800af50 <_free_r+0x94>)
 800aed8:	9801      	ldr	r0, [sp, #4]
 800aeda:	6813      	ldr	r3, [r2, #0]
 800aedc:	b933      	cbnz	r3, 800aeec <_free_r+0x30>
 800aede:	6063      	str	r3, [r4, #4]
 800aee0:	6014      	str	r4, [r2, #0]
 800aee2:	b003      	add	sp, #12
 800aee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aee8:	f000 b8e2 	b.w	800b0b0 <__malloc_unlock>
 800aeec:	42a3      	cmp	r3, r4
 800aeee:	d908      	bls.n	800af02 <_free_r+0x46>
 800aef0:	6825      	ldr	r5, [r4, #0]
 800aef2:	1961      	adds	r1, r4, r5
 800aef4:	428b      	cmp	r3, r1
 800aef6:	bf01      	itttt	eq
 800aef8:	6819      	ldreq	r1, [r3, #0]
 800aefa:	685b      	ldreq	r3, [r3, #4]
 800aefc:	1949      	addeq	r1, r1, r5
 800aefe:	6021      	streq	r1, [r4, #0]
 800af00:	e7ed      	b.n	800aede <_free_r+0x22>
 800af02:	461a      	mov	r2, r3
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	b10b      	cbz	r3, 800af0c <_free_r+0x50>
 800af08:	42a3      	cmp	r3, r4
 800af0a:	d9fa      	bls.n	800af02 <_free_r+0x46>
 800af0c:	6811      	ldr	r1, [r2, #0]
 800af0e:	1855      	adds	r5, r2, r1
 800af10:	42a5      	cmp	r5, r4
 800af12:	d10b      	bne.n	800af2c <_free_r+0x70>
 800af14:	6824      	ldr	r4, [r4, #0]
 800af16:	4421      	add	r1, r4
 800af18:	1854      	adds	r4, r2, r1
 800af1a:	42a3      	cmp	r3, r4
 800af1c:	6011      	str	r1, [r2, #0]
 800af1e:	d1e0      	bne.n	800aee2 <_free_r+0x26>
 800af20:	681c      	ldr	r4, [r3, #0]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	6053      	str	r3, [r2, #4]
 800af26:	440c      	add	r4, r1
 800af28:	6014      	str	r4, [r2, #0]
 800af2a:	e7da      	b.n	800aee2 <_free_r+0x26>
 800af2c:	d902      	bls.n	800af34 <_free_r+0x78>
 800af2e:	230c      	movs	r3, #12
 800af30:	6003      	str	r3, [r0, #0]
 800af32:	e7d6      	b.n	800aee2 <_free_r+0x26>
 800af34:	6825      	ldr	r5, [r4, #0]
 800af36:	1961      	adds	r1, r4, r5
 800af38:	428b      	cmp	r3, r1
 800af3a:	bf04      	itt	eq
 800af3c:	6819      	ldreq	r1, [r3, #0]
 800af3e:	685b      	ldreq	r3, [r3, #4]
 800af40:	6063      	str	r3, [r4, #4]
 800af42:	bf04      	itt	eq
 800af44:	1949      	addeq	r1, r1, r5
 800af46:	6021      	streq	r1, [r4, #0]
 800af48:	6054      	str	r4, [r2, #4]
 800af4a:	e7ca      	b.n	800aee2 <_free_r+0x26>
 800af4c:	b003      	add	sp, #12
 800af4e:	bd30      	pop	{r4, r5, pc}
 800af50:	20000a70 	.word	0x20000a70

0800af54 <malloc>:
 800af54:	4b02      	ldr	r3, [pc, #8]	; (800af60 <malloc+0xc>)
 800af56:	4601      	mov	r1, r0
 800af58:	6818      	ldr	r0, [r3, #0]
 800af5a:	f000 b823 	b.w	800afa4 <_malloc_r>
 800af5e:	bf00      	nop
 800af60:	20000074 	.word	0x20000074

0800af64 <sbrk_aligned>:
 800af64:	b570      	push	{r4, r5, r6, lr}
 800af66:	4e0e      	ldr	r6, [pc, #56]	; (800afa0 <sbrk_aligned+0x3c>)
 800af68:	460c      	mov	r4, r1
 800af6a:	6831      	ldr	r1, [r6, #0]
 800af6c:	4605      	mov	r5, r0
 800af6e:	b911      	cbnz	r1, 800af76 <sbrk_aligned+0x12>
 800af70:	f001 fe1a 	bl	800cba8 <_sbrk_r>
 800af74:	6030      	str	r0, [r6, #0]
 800af76:	4621      	mov	r1, r4
 800af78:	4628      	mov	r0, r5
 800af7a:	f001 fe15 	bl	800cba8 <_sbrk_r>
 800af7e:	1c43      	adds	r3, r0, #1
 800af80:	d00a      	beq.n	800af98 <sbrk_aligned+0x34>
 800af82:	1cc4      	adds	r4, r0, #3
 800af84:	f024 0403 	bic.w	r4, r4, #3
 800af88:	42a0      	cmp	r0, r4
 800af8a:	d007      	beq.n	800af9c <sbrk_aligned+0x38>
 800af8c:	1a21      	subs	r1, r4, r0
 800af8e:	4628      	mov	r0, r5
 800af90:	f001 fe0a 	bl	800cba8 <_sbrk_r>
 800af94:	3001      	adds	r0, #1
 800af96:	d101      	bne.n	800af9c <sbrk_aligned+0x38>
 800af98:	f04f 34ff 	mov.w	r4, #4294967295
 800af9c:	4620      	mov	r0, r4
 800af9e:	bd70      	pop	{r4, r5, r6, pc}
 800afa0:	20000a74 	.word	0x20000a74

0800afa4 <_malloc_r>:
 800afa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa8:	1ccd      	adds	r5, r1, #3
 800afaa:	f025 0503 	bic.w	r5, r5, #3
 800afae:	3508      	adds	r5, #8
 800afb0:	2d0c      	cmp	r5, #12
 800afb2:	bf38      	it	cc
 800afb4:	250c      	movcc	r5, #12
 800afb6:	2d00      	cmp	r5, #0
 800afb8:	4607      	mov	r7, r0
 800afba:	db01      	blt.n	800afc0 <_malloc_r+0x1c>
 800afbc:	42a9      	cmp	r1, r5
 800afbe:	d905      	bls.n	800afcc <_malloc_r+0x28>
 800afc0:	230c      	movs	r3, #12
 800afc2:	603b      	str	r3, [r7, #0]
 800afc4:	2600      	movs	r6, #0
 800afc6:	4630      	mov	r0, r6
 800afc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b0a0 <_malloc_r+0xfc>
 800afd0:	f000 f868 	bl	800b0a4 <__malloc_lock>
 800afd4:	f8d8 3000 	ldr.w	r3, [r8]
 800afd8:	461c      	mov	r4, r3
 800afda:	bb5c      	cbnz	r4, 800b034 <_malloc_r+0x90>
 800afdc:	4629      	mov	r1, r5
 800afde:	4638      	mov	r0, r7
 800afe0:	f7ff ffc0 	bl	800af64 <sbrk_aligned>
 800afe4:	1c43      	adds	r3, r0, #1
 800afe6:	4604      	mov	r4, r0
 800afe8:	d155      	bne.n	800b096 <_malloc_r+0xf2>
 800afea:	f8d8 4000 	ldr.w	r4, [r8]
 800afee:	4626      	mov	r6, r4
 800aff0:	2e00      	cmp	r6, #0
 800aff2:	d145      	bne.n	800b080 <_malloc_r+0xdc>
 800aff4:	2c00      	cmp	r4, #0
 800aff6:	d048      	beq.n	800b08a <_malloc_r+0xe6>
 800aff8:	6823      	ldr	r3, [r4, #0]
 800affa:	4631      	mov	r1, r6
 800affc:	4638      	mov	r0, r7
 800affe:	eb04 0903 	add.w	r9, r4, r3
 800b002:	f001 fdd1 	bl	800cba8 <_sbrk_r>
 800b006:	4581      	cmp	r9, r0
 800b008:	d13f      	bne.n	800b08a <_malloc_r+0xe6>
 800b00a:	6821      	ldr	r1, [r4, #0]
 800b00c:	1a6d      	subs	r5, r5, r1
 800b00e:	4629      	mov	r1, r5
 800b010:	4638      	mov	r0, r7
 800b012:	f7ff ffa7 	bl	800af64 <sbrk_aligned>
 800b016:	3001      	adds	r0, #1
 800b018:	d037      	beq.n	800b08a <_malloc_r+0xe6>
 800b01a:	6823      	ldr	r3, [r4, #0]
 800b01c:	442b      	add	r3, r5
 800b01e:	6023      	str	r3, [r4, #0]
 800b020:	f8d8 3000 	ldr.w	r3, [r8]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d038      	beq.n	800b09a <_malloc_r+0xf6>
 800b028:	685a      	ldr	r2, [r3, #4]
 800b02a:	42a2      	cmp	r2, r4
 800b02c:	d12b      	bne.n	800b086 <_malloc_r+0xe2>
 800b02e:	2200      	movs	r2, #0
 800b030:	605a      	str	r2, [r3, #4]
 800b032:	e00f      	b.n	800b054 <_malloc_r+0xb0>
 800b034:	6822      	ldr	r2, [r4, #0]
 800b036:	1b52      	subs	r2, r2, r5
 800b038:	d41f      	bmi.n	800b07a <_malloc_r+0xd6>
 800b03a:	2a0b      	cmp	r2, #11
 800b03c:	d917      	bls.n	800b06e <_malloc_r+0xca>
 800b03e:	1961      	adds	r1, r4, r5
 800b040:	42a3      	cmp	r3, r4
 800b042:	6025      	str	r5, [r4, #0]
 800b044:	bf18      	it	ne
 800b046:	6059      	strne	r1, [r3, #4]
 800b048:	6863      	ldr	r3, [r4, #4]
 800b04a:	bf08      	it	eq
 800b04c:	f8c8 1000 	streq.w	r1, [r8]
 800b050:	5162      	str	r2, [r4, r5]
 800b052:	604b      	str	r3, [r1, #4]
 800b054:	4638      	mov	r0, r7
 800b056:	f104 060b 	add.w	r6, r4, #11
 800b05a:	f000 f829 	bl	800b0b0 <__malloc_unlock>
 800b05e:	f026 0607 	bic.w	r6, r6, #7
 800b062:	1d23      	adds	r3, r4, #4
 800b064:	1af2      	subs	r2, r6, r3
 800b066:	d0ae      	beq.n	800afc6 <_malloc_r+0x22>
 800b068:	1b9b      	subs	r3, r3, r6
 800b06a:	50a3      	str	r3, [r4, r2]
 800b06c:	e7ab      	b.n	800afc6 <_malloc_r+0x22>
 800b06e:	42a3      	cmp	r3, r4
 800b070:	6862      	ldr	r2, [r4, #4]
 800b072:	d1dd      	bne.n	800b030 <_malloc_r+0x8c>
 800b074:	f8c8 2000 	str.w	r2, [r8]
 800b078:	e7ec      	b.n	800b054 <_malloc_r+0xb0>
 800b07a:	4623      	mov	r3, r4
 800b07c:	6864      	ldr	r4, [r4, #4]
 800b07e:	e7ac      	b.n	800afda <_malloc_r+0x36>
 800b080:	4634      	mov	r4, r6
 800b082:	6876      	ldr	r6, [r6, #4]
 800b084:	e7b4      	b.n	800aff0 <_malloc_r+0x4c>
 800b086:	4613      	mov	r3, r2
 800b088:	e7cc      	b.n	800b024 <_malloc_r+0x80>
 800b08a:	230c      	movs	r3, #12
 800b08c:	603b      	str	r3, [r7, #0]
 800b08e:	4638      	mov	r0, r7
 800b090:	f000 f80e 	bl	800b0b0 <__malloc_unlock>
 800b094:	e797      	b.n	800afc6 <_malloc_r+0x22>
 800b096:	6025      	str	r5, [r4, #0]
 800b098:	e7dc      	b.n	800b054 <_malloc_r+0xb0>
 800b09a:	605b      	str	r3, [r3, #4]
 800b09c:	deff      	udf	#255	; 0xff
 800b09e:	bf00      	nop
 800b0a0:	20000a70 	.word	0x20000a70

0800b0a4 <__malloc_lock>:
 800b0a4:	4801      	ldr	r0, [pc, #4]	; (800b0ac <__malloc_lock+0x8>)
 800b0a6:	f7ff b884 	b.w	800a1b2 <__retarget_lock_acquire_recursive>
 800b0aa:	bf00      	nop
 800b0ac:	20000a6c 	.word	0x20000a6c

0800b0b0 <__malloc_unlock>:
 800b0b0:	4801      	ldr	r0, [pc, #4]	; (800b0b8 <__malloc_unlock+0x8>)
 800b0b2:	f7ff b87f 	b.w	800a1b4 <__retarget_lock_release_recursive>
 800b0b6:	bf00      	nop
 800b0b8:	20000a6c 	.word	0x20000a6c

0800b0bc <_Balloc>:
 800b0bc:	b570      	push	{r4, r5, r6, lr}
 800b0be:	69c6      	ldr	r6, [r0, #28]
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	460d      	mov	r5, r1
 800b0c4:	b976      	cbnz	r6, 800b0e4 <_Balloc+0x28>
 800b0c6:	2010      	movs	r0, #16
 800b0c8:	f7ff ff44 	bl	800af54 <malloc>
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	61e0      	str	r0, [r4, #28]
 800b0d0:	b920      	cbnz	r0, 800b0dc <_Balloc+0x20>
 800b0d2:	4b18      	ldr	r3, [pc, #96]	; (800b134 <_Balloc+0x78>)
 800b0d4:	4818      	ldr	r0, [pc, #96]	; (800b138 <_Balloc+0x7c>)
 800b0d6:	216b      	movs	r1, #107	; 0x6b
 800b0d8:	f001 fd8e 	bl	800cbf8 <__assert_func>
 800b0dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0e0:	6006      	str	r6, [r0, #0]
 800b0e2:	60c6      	str	r6, [r0, #12]
 800b0e4:	69e6      	ldr	r6, [r4, #28]
 800b0e6:	68f3      	ldr	r3, [r6, #12]
 800b0e8:	b183      	cbz	r3, 800b10c <_Balloc+0x50>
 800b0ea:	69e3      	ldr	r3, [r4, #28]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b0f2:	b9b8      	cbnz	r0, 800b124 <_Balloc+0x68>
 800b0f4:	2101      	movs	r1, #1
 800b0f6:	fa01 f605 	lsl.w	r6, r1, r5
 800b0fa:	1d72      	adds	r2, r6, #5
 800b0fc:	0092      	lsls	r2, r2, #2
 800b0fe:	4620      	mov	r0, r4
 800b100:	f001 fd98 	bl	800cc34 <_calloc_r>
 800b104:	b160      	cbz	r0, 800b120 <_Balloc+0x64>
 800b106:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b10a:	e00e      	b.n	800b12a <_Balloc+0x6e>
 800b10c:	2221      	movs	r2, #33	; 0x21
 800b10e:	2104      	movs	r1, #4
 800b110:	4620      	mov	r0, r4
 800b112:	f001 fd8f 	bl	800cc34 <_calloc_r>
 800b116:	69e3      	ldr	r3, [r4, #28]
 800b118:	60f0      	str	r0, [r6, #12]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d1e4      	bne.n	800b0ea <_Balloc+0x2e>
 800b120:	2000      	movs	r0, #0
 800b122:	bd70      	pop	{r4, r5, r6, pc}
 800b124:	6802      	ldr	r2, [r0, #0]
 800b126:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b12a:	2300      	movs	r3, #0
 800b12c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b130:	e7f7      	b.n	800b122 <_Balloc+0x66>
 800b132:	bf00      	nop
 800b134:	0800eebe 	.word	0x0800eebe
 800b138:	0800ef3e 	.word	0x0800ef3e

0800b13c <_Bfree>:
 800b13c:	b570      	push	{r4, r5, r6, lr}
 800b13e:	69c6      	ldr	r6, [r0, #28]
 800b140:	4605      	mov	r5, r0
 800b142:	460c      	mov	r4, r1
 800b144:	b976      	cbnz	r6, 800b164 <_Bfree+0x28>
 800b146:	2010      	movs	r0, #16
 800b148:	f7ff ff04 	bl	800af54 <malloc>
 800b14c:	4602      	mov	r2, r0
 800b14e:	61e8      	str	r0, [r5, #28]
 800b150:	b920      	cbnz	r0, 800b15c <_Bfree+0x20>
 800b152:	4b09      	ldr	r3, [pc, #36]	; (800b178 <_Bfree+0x3c>)
 800b154:	4809      	ldr	r0, [pc, #36]	; (800b17c <_Bfree+0x40>)
 800b156:	218f      	movs	r1, #143	; 0x8f
 800b158:	f001 fd4e 	bl	800cbf8 <__assert_func>
 800b15c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b160:	6006      	str	r6, [r0, #0]
 800b162:	60c6      	str	r6, [r0, #12]
 800b164:	b13c      	cbz	r4, 800b176 <_Bfree+0x3a>
 800b166:	69eb      	ldr	r3, [r5, #28]
 800b168:	6862      	ldr	r2, [r4, #4]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b170:	6021      	str	r1, [r4, #0]
 800b172:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b176:	bd70      	pop	{r4, r5, r6, pc}
 800b178:	0800eebe 	.word	0x0800eebe
 800b17c:	0800ef3e 	.word	0x0800ef3e

0800b180 <__multadd>:
 800b180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b184:	690d      	ldr	r5, [r1, #16]
 800b186:	4607      	mov	r7, r0
 800b188:	460c      	mov	r4, r1
 800b18a:	461e      	mov	r6, r3
 800b18c:	f101 0c14 	add.w	ip, r1, #20
 800b190:	2000      	movs	r0, #0
 800b192:	f8dc 3000 	ldr.w	r3, [ip]
 800b196:	b299      	uxth	r1, r3
 800b198:	fb02 6101 	mla	r1, r2, r1, r6
 800b19c:	0c1e      	lsrs	r6, r3, #16
 800b19e:	0c0b      	lsrs	r3, r1, #16
 800b1a0:	fb02 3306 	mla	r3, r2, r6, r3
 800b1a4:	b289      	uxth	r1, r1
 800b1a6:	3001      	adds	r0, #1
 800b1a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b1ac:	4285      	cmp	r5, r0
 800b1ae:	f84c 1b04 	str.w	r1, [ip], #4
 800b1b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b1b6:	dcec      	bgt.n	800b192 <__multadd+0x12>
 800b1b8:	b30e      	cbz	r6, 800b1fe <__multadd+0x7e>
 800b1ba:	68a3      	ldr	r3, [r4, #8]
 800b1bc:	42ab      	cmp	r3, r5
 800b1be:	dc19      	bgt.n	800b1f4 <__multadd+0x74>
 800b1c0:	6861      	ldr	r1, [r4, #4]
 800b1c2:	4638      	mov	r0, r7
 800b1c4:	3101      	adds	r1, #1
 800b1c6:	f7ff ff79 	bl	800b0bc <_Balloc>
 800b1ca:	4680      	mov	r8, r0
 800b1cc:	b928      	cbnz	r0, 800b1da <__multadd+0x5a>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	4b0c      	ldr	r3, [pc, #48]	; (800b204 <__multadd+0x84>)
 800b1d2:	480d      	ldr	r0, [pc, #52]	; (800b208 <__multadd+0x88>)
 800b1d4:	21ba      	movs	r1, #186	; 0xba
 800b1d6:	f001 fd0f 	bl	800cbf8 <__assert_func>
 800b1da:	6922      	ldr	r2, [r4, #16]
 800b1dc:	3202      	adds	r2, #2
 800b1de:	f104 010c 	add.w	r1, r4, #12
 800b1e2:	0092      	lsls	r2, r2, #2
 800b1e4:	300c      	adds	r0, #12
 800b1e6:	f001 fcef 	bl	800cbc8 <memcpy>
 800b1ea:	4621      	mov	r1, r4
 800b1ec:	4638      	mov	r0, r7
 800b1ee:	f7ff ffa5 	bl	800b13c <_Bfree>
 800b1f2:	4644      	mov	r4, r8
 800b1f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b1f8:	3501      	adds	r5, #1
 800b1fa:	615e      	str	r6, [r3, #20]
 800b1fc:	6125      	str	r5, [r4, #16]
 800b1fe:	4620      	mov	r0, r4
 800b200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b204:	0800ef2d 	.word	0x0800ef2d
 800b208:	0800ef3e 	.word	0x0800ef3e

0800b20c <__s2b>:
 800b20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b210:	460c      	mov	r4, r1
 800b212:	4615      	mov	r5, r2
 800b214:	461f      	mov	r7, r3
 800b216:	2209      	movs	r2, #9
 800b218:	3308      	adds	r3, #8
 800b21a:	4606      	mov	r6, r0
 800b21c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b220:	2100      	movs	r1, #0
 800b222:	2201      	movs	r2, #1
 800b224:	429a      	cmp	r2, r3
 800b226:	db09      	blt.n	800b23c <__s2b+0x30>
 800b228:	4630      	mov	r0, r6
 800b22a:	f7ff ff47 	bl	800b0bc <_Balloc>
 800b22e:	b940      	cbnz	r0, 800b242 <__s2b+0x36>
 800b230:	4602      	mov	r2, r0
 800b232:	4b19      	ldr	r3, [pc, #100]	; (800b298 <__s2b+0x8c>)
 800b234:	4819      	ldr	r0, [pc, #100]	; (800b29c <__s2b+0x90>)
 800b236:	21d3      	movs	r1, #211	; 0xd3
 800b238:	f001 fcde 	bl	800cbf8 <__assert_func>
 800b23c:	0052      	lsls	r2, r2, #1
 800b23e:	3101      	adds	r1, #1
 800b240:	e7f0      	b.n	800b224 <__s2b+0x18>
 800b242:	9b08      	ldr	r3, [sp, #32]
 800b244:	6143      	str	r3, [r0, #20]
 800b246:	2d09      	cmp	r5, #9
 800b248:	f04f 0301 	mov.w	r3, #1
 800b24c:	6103      	str	r3, [r0, #16]
 800b24e:	dd16      	ble.n	800b27e <__s2b+0x72>
 800b250:	f104 0909 	add.w	r9, r4, #9
 800b254:	46c8      	mov	r8, r9
 800b256:	442c      	add	r4, r5
 800b258:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b25c:	4601      	mov	r1, r0
 800b25e:	3b30      	subs	r3, #48	; 0x30
 800b260:	220a      	movs	r2, #10
 800b262:	4630      	mov	r0, r6
 800b264:	f7ff ff8c 	bl	800b180 <__multadd>
 800b268:	45a0      	cmp	r8, r4
 800b26a:	d1f5      	bne.n	800b258 <__s2b+0x4c>
 800b26c:	f1a5 0408 	sub.w	r4, r5, #8
 800b270:	444c      	add	r4, r9
 800b272:	1b2d      	subs	r5, r5, r4
 800b274:	1963      	adds	r3, r4, r5
 800b276:	42bb      	cmp	r3, r7
 800b278:	db04      	blt.n	800b284 <__s2b+0x78>
 800b27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b27e:	340a      	adds	r4, #10
 800b280:	2509      	movs	r5, #9
 800b282:	e7f6      	b.n	800b272 <__s2b+0x66>
 800b284:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b288:	4601      	mov	r1, r0
 800b28a:	3b30      	subs	r3, #48	; 0x30
 800b28c:	220a      	movs	r2, #10
 800b28e:	4630      	mov	r0, r6
 800b290:	f7ff ff76 	bl	800b180 <__multadd>
 800b294:	e7ee      	b.n	800b274 <__s2b+0x68>
 800b296:	bf00      	nop
 800b298:	0800ef2d 	.word	0x0800ef2d
 800b29c:	0800ef3e 	.word	0x0800ef3e

0800b2a0 <__hi0bits>:
 800b2a0:	0c03      	lsrs	r3, r0, #16
 800b2a2:	041b      	lsls	r3, r3, #16
 800b2a4:	b9d3      	cbnz	r3, 800b2dc <__hi0bits+0x3c>
 800b2a6:	0400      	lsls	r0, r0, #16
 800b2a8:	2310      	movs	r3, #16
 800b2aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b2ae:	bf04      	itt	eq
 800b2b0:	0200      	lsleq	r0, r0, #8
 800b2b2:	3308      	addeq	r3, #8
 800b2b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b2b8:	bf04      	itt	eq
 800b2ba:	0100      	lsleq	r0, r0, #4
 800b2bc:	3304      	addeq	r3, #4
 800b2be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b2c2:	bf04      	itt	eq
 800b2c4:	0080      	lsleq	r0, r0, #2
 800b2c6:	3302      	addeq	r3, #2
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	db05      	blt.n	800b2d8 <__hi0bits+0x38>
 800b2cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b2d0:	f103 0301 	add.w	r3, r3, #1
 800b2d4:	bf08      	it	eq
 800b2d6:	2320      	moveq	r3, #32
 800b2d8:	4618      	mov	r0, r3
 800b2da:	4770      	bx	lr
 800b2dc:	2300      	movs	r3, #0
 800b2de:	e7e4      	b.n	800b2aa <__hi0bits+0xa>

0800b2e0 <__lo0bits>:
 800b2e0:	6803      	ldr	r3, [r0, #0]
 800b2e2:	f013 0207 	ands.w	r2, r3, #7
 800b2e6:	d00c      	beq.n	800b302 <__lo0bits+0x22>
 800b2e8:	07d9      	lsls	r1, r3, #31
 800b2ea:	d422      	bmi.n	800b332 <__lo0bits+0x52>
 800b2ec:	079a      	lsls	r2, r3, #30
 800b2ee:	bf49      	itett	mi
 800b2f0:	085b      	lsrmi	r3, r3, #1
 800b2f2:	089b      	lsrpl	r3, r3, #2
 800b2f4:	6003      	strmi	r3, [r0, #0]
 800b2f6:	2201      	movmi	r2, #1
 800b2f8:	bf5c      	itt	pl
 800b2fa:	6003      	strpl	r3, [r0, #0]
 800b2fc:	2202      	movpl	r2, #2
 800b2fe:	4610      	mov	r0, r2
 800b300:	4770      	bx	lr
 800b302:	b299      	uxth	r1, r3
 800b304:	b909      	cbnz	r1, 800b30a <__lo0bits+0x2a>
 800b306:	0c1b      	lsrs	r3, r3, #16
 800b308:	2210      	movs	r2, #16
 800b30a:	b2d9      	uxtb	r1, r3
 800b30c:	b909      	cbnz	r1, 800b312 <__lo0bits+0x32>
 800b30e:	3208      	adds	r2, #8
 800b310:	0a1b      	lsrs	r3, r3, #8
 800b312:	0719      	lsls	r1, r3, #28
 800b314:	bf04      	itt	eq
 800b316:	091b      	lsreq	r3, r3, #4
 800b318:	3204      	addeq	r2, #4
 800b31a:	0799      	lsls	r1, r3, #30
 800b31c:	bf04      	itt	eq
 800b31e:	089b      	lsreq	r3, r3, #2
 800b320:	3202      	addeq	r2, #2
 800b322:	07d9      	lsls	r1, r3, #31
 800b324:	d403      	bmi.n	800b32e <__lo0bits+0x4e>
 800b326:	085b      	lsrs	r3, r3, #1
 800b328:	f102 0201 	add.w	r2, r2, #1
 800b32c:	d003      	beq.n	800b336 <__lo0bits+0x56>
 800b32e:	6003      	str	r3, [r0, #0]
 800b330:	e7e5      	b.n	800b2fe <__lo0bits+0x1e>
 800b332:	2200      	movs	r2, #0
 800b334:	e7e3      	b.n	800b2fe <__lo0bits+0x1e>
 800b336:	2220      	movs	r2, #32
 800b338:	e7e1      	b.n	800b2fe <__lo0bits+0x1e>
	...

0800b33c <__i2b>:
 800b33c:	b510      	push	{r4, lr}
 800b33e:	460c      	mov	r4, r1
 800b340:	2101      	movs	r1, #1
 800b342:	f7ff febb 	bl	800b0bc <_Balloc>
 800b346:	4602      	mov	r2, r0
 800b348:	b928      	cbnz	r0, 800b356 <__i2b+0x1a>
 800b34a:	4b05      	ldr	r3, [pc, #20]	; (800b360 <__i2b+0x24>)
 800b34c:	4805      	ldr	r0, [pc, #20]	; (800b364 <__i2b+0x28>)
 800b34e:	f240 1145 	movw	r1, #325	; 0x145
 800b352:	f001 fc51 	bl	800cbf8 <__assert_func>
 800b356:	2301      	movs	r3, #1
 800b358:	6144      	str	r4, [r0, #20]
 800b35a:	6103      	str	r3, [r0, #16]
 800b35c:	bd10      	pop	{r4, pc}
 800b35e:	bf00      	nop
 800b360:	0800ef2d 	.word	0x0800ef2d
 800b364:	0800ef3e 	.word	0x0800ef3e

0800b368 <__multiply>:
 800b368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36c:	4691      	mov	r9, r2
 800b36e:	690a      	ldr	r2, [r1, #16]
 800b370:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b374:	429a      	cmp	r2, r3
 800b376:	bfb8      	it	lt
 800b378:	460b      	movlt	r3, r1
 800b37a:	460c      	mov	r4, r1
 800b37c:	bfbc      	itt	lt
 800b37e:	464c      	movlt	r4, r9
 800b380:	4699      	movlt	r9, r3
 800b382:	6927      	ldr	r7, [r4, #16]
 800b384:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b388:	68a3      	ldr	r3, [r4, #8]
 800b38a:	6861      	ldr	r1, [r4, #4]
 800b38c:	eb07 060a 	add.w	r6, r7, sl
 800b390:	42b3      	cmp	r3, r6
 800b392:	b085      	sub	sp, #20
 800b394:	bfb8      	it	lt
 800b396:	3101      	addlt	r1, #1
 800b398:	f7ff fe90 	bl	800b0bc <_Balloc>
 800b39c:	b930      	cbnz	r0, 800b3ac <__multiply+0x44>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	4b44      	ldr	r3, [pc, #272]	; (800b4b4 <__multiply+0x14c>)
 800b3a2:	4845      	ldr	r0, [pc, #276]	; (800b4b8 <__multiply+0x150>)
 800b3a4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b3a8:	f001 fc26 	bl	800cbf8 <__assert_func>
 800b3ac:	f100 0514 	add.w	r5, r0, #20
 800b3b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b3b4:	462b      	mov	r3, r5
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	4543      	cmp	r3, r8
 800b3ba:	d321      	bcc.n	800b400 <__multiply+0x98>
 800b3bc:	f104 0314 	add.w	r3, r4, #20
 800b3c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b3c4:	f109 0314 	add.w	r3, r9, #20
 800b3c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b3cc:	9202      	str	r2, [sp, #8]
 800b3ce:	1b3a      	subs	r2, r7, r4
 800b3d0:	3a15      	subs	r2, #21
 800b3d2:	f022 0203 	bic.w	r2, r2, #3
 800b3d6:	3204      	adds	r2, #4
 800b3d8:	f104 0115 	add.w	r1, r4, #21
 800b3dc:	428f      	cmp	r7, r1
 800b3de:	bf38      	it	cc
 800b3e0:	2204      	movcc	r2, #4
 800b3e2:	9201      	str	r2, [sp, #4]
 800b3e4:	9a02      	ldr	r2, [sp, #8]
 800b3e6:	9303      	str	r3, [sp, #12]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d80c      	bhi.n	800b406 <__multiply+0x9e>
 800b3ec:	2e00      	cmp	r6, #0
 800b3ee:	dd03      	ble.n	800b3f8 <__multiply+0x90>
 800b3f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d05b      	beq.n	800b4b0 <__multiply+0x148>
 800b3f8:	6106      	str	r6, [r0, #16]
 800b3fa:	b005      	add	sp, #20
 800b3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b400:	f843 2b04 	str.w	r2, [r3], #4
 800b404:	e7d8      	b.n	800b3b8 <__multiply+0x50>
 800b406:	f8b3 a000 	ldrh.w	sl, [r3]
 800b40a:	f1ba 0f00 	cmp.w	sl, #0
 800b40e:	d024      	beq.n	800b45a <__multiply+0xf2>
 800b410:	f104 0e14 	add.w	lr, r4, #20
 800b414:	46a9      	mov	r9, r5
 800b416:	f04f 0c00 	mov.w	ip, #0
 800b41a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b41e:	f8d9 1000 	ldr.w	r1, [r9]
 800b422:	fa1f fb82 	uxth.w	fp, r2
 800b426:	b289      	uxth	r1, r1
 800b428:	fb0a 110b 	mla	r1, sl, fp, r1
 800b42c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b430:	f8d9 2000 	ldr.w	r2, [r9]
 800b434:	4461      	add	r1, ip
 800b436:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b43a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b43e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b442:	b289      	uxth	r1, r1
 800b444:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b448:	4577      	cmp	r7, lr
 800b44a:	f849 1b04 	str.w	r1, [r9], #4
 800b44e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b452:	d8e2      	bhi.n	800b41a <__multiply+0xb2>
 800b454:	9a01      	ldr	r2, [sp, #4]
 800b456:	f845 c002 	str.w	ip, [r5, r2]
 800b45a:	9a03      	ldr	r2, [sp, #12]
 800b45c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b460:	3304      	adds	r3, #4
 800b462:	f1b9 0f00 	cmp.w	r9, #0
 800b466:	d021      	beq.n	800b4ac <__multiply+0x144>
 800b468:	6829      	ldr	r1, [r5, #0]
 800b46a:	f104 0c14 	add.w	ip, r4, #20
 800b46e:	46ae      	mov	lr, r5
 800b470:	f04f 0a00 	mov.w	sl, #0
 800b474:	f8bc b000 	ldrh.w	fp, [ip]
 800b478:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b47c:	fb09 220b 	mla	r2, r9, fp, r2
 800b480:	4452      	add	r2, sl
 800b482:	b289      	uxth	r1, r1
 800b484:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b488:	f84e 1b04 	str.w	r1, [lr], #4
 800b48c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b490:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b494:	f8be 1000 	ldrh.w	r1, [lr]
 800b498:	fb09 110a 	mla	r1, r9, sl, r1
 800b49c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b4a0:	4567      	cmp	r7, ip
 800b4a2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b4a6:	d8e5      	bhi.n	800b474 <__multiply+0x10c>
 800b4a8:	9a01      	ldr	r2, [sp, #4]
 800b4aa:	50a9      	str	r1, [r5, r2]
 800b4ac:	3504      	adds	r5, #4
 800b4ae:	e799      	b.n	800b3e4 <__multiply+0x7c>
 800b4b0:	3e01      	subs	r6, #1
 800b4b2:	e79b      	b.n	800b3ec <__multiply+0x84>
 800b4b4:	0800ef2d 	.word	0x0800ef2d
 800b4b8:	0800ef3e 	.word	0x0800ef3e

0800b4bc <__pow5mult>:
 800b4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4c0:	4615      	mov	r5, r2
 800b4c2:	f012 0203 	ands.w	r2, r2, #3
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	460f      	mov	r7, r1
 800b4ca:	d007      	beq.n	800b4dc <__pow5mult+0x20>
 800b4cc:	4c25      	ldr	r4, [pc, #148]	; (800b564 <__pow5mult+0xa8>)
 800b4ce:	3a01      	subs	r2, #1
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b4d6:	f7ff fe53 	bl	800b180 <__multadd>
 800b4da:	4607      	mov	r7, r0
 800b4dc:	10ad      	asrs	r5, r5, #2
 800b4de:	d03d      	beq.n	800b55c <__pow5mult+0xa0>
 800b4e0:	69f4      	ldr	r4, [r6, #28]
 800b4e2:	b97c      	cbnz	r4, 800b504 <__pow5mult+0x48>
 800b4e4:	2010      	movs	r0, #16
 800b4e6:	f7ff fd35 	bl	800af54 <malloc>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	61f0      	str	r0, [r6, #28]
 800b4ee:	b928      	cbnz	r0, 800b4fc <__pow5mult+0x40>
 800b4f0:	4b1d      	ldr	r3, [pc, #116]	; (800b568 <__pow5mult+0xac>)
 800b4f2:	481e      	ldr	r0, [pc, #120]	; (800b56c <__pow5mult+0xb0>)
 800b4f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b4f8:	f001 fb7e 	bl	800cbf8 <__assert_func>
 800b4fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b500:	6004      	str	r4, [r0, #0]
 800b502:	60c4      	str	r4, [r0, #12]
 800b504:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b508:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b50c:	b94c      	cbnz	r4, 800b522 <__pow5mult+0x66>
 800b50e:	f240 2171 	movw	r1, #625	; 0x271
 800b512:	4630      	mov	r0, r6
 800b514:	f7ff ff12 	bl	800b33c <__i2b>
 800b518:	2300      	movs	r3, #0
 800b51a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b51e:	4604      	mov	r4, r0
 800b520:	6003      	str	r3, [r0, #0]
 800b522:	f04f 0900 	mov.w	r9, #0
 800b526:	07eb      	lsls	r3, r5, #31
 800b528:	d50a      	bpl.n	800b540 <__pow5mult+0x84>
 800b52a:	4639      	mov	r1, r7
 800b52c:	4622      	mov	r2, r4
 800b52e:	4630      	mov	r0, r6
 800b530:	f7ff ff1a 	bl	800b368 <__multiply>
 800b534:	4639      	mov	r1, r7
 800b536:	4680      	mov	r8, r0
 800b538:	4630      	mov	r0, r6
 800b53a:	f7ff fdff 	bl	800b13c <_Bfree>
 800b53e:	4647      	mov	r7, r8
 800b540:	106d      	asrs	r5, r5, #1
 800b542:	d00b      	beq.n	800b55c <__pow5mult+0xa0>
 800b544:	6820      	ldr	r0, [r4, #0]
 800b546:	b938      	cbnz	r0, 800b558 <__pow5mult+0x9c>
 800b548:	4622      	mov	r2, r4
 800b54a:	4621      	mov	r1, r4
 800b54c:	4630      	mov	r0, r6
 800b54e:	f7ff ff0b 	bl	800b368 <__multiply>
 800b552:	6020      	str	r0, [r4, #0]
 800b554:	f8c0 9000 	str.w	r9, [r0]
 800b558:	4604      	mov	r4, r0
 800b55a:	e7e4      	b.n	800b526 <__pow5mult+0x6a>
 800b55c:	4638      	mov	r0, r7
 800b55e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b562:	bf00      	nop
 800b564:	0800f088 	.word	0x0800f088
 800b568:	0800eebe 	.word	0x0800eebe
 800b56c:	0800ef3e 	.word	0x0800ef3e

0800b570 <__lshift>:
 800b570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b574:	460c      	mov	r4, r1
 800b576:	6849      	ldr	r1, [r1, #4]
 800b578:	6923      	ldr	r3, [r4, #16]
 800b57a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b57e:	68a3      	ldr	r3, [r4, #8]
 800b580:	4607      	mov	r7, r0
 800b582:	4691      	mov	r9, r2
 800b584:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b588:	f108 0601 	add.w	r6, r8, #1
 800b58c:	42b3      	cmp	r3, r6
 800b58e:	db0b      	blt.n	800b5a8 <__lshift+0x38>
 800b590:	4638      	mov	r0, r7
 800b592:	f7ff fd93 	bl	800b0bc <_Balloc>
 800b596:	4605      	mov	r5, r0
 800b598:	b948      	cbnz	r0, 800b5ae <__lshift+0x3e>
 800b59a:	4602      	mov	r2, r0
 800b59c:	4b28      	ldr	r3, [pc, #160]	; (800b640 <__lshift+0xd0>)
 800b59e:	4829      	ldr	r0, [pc, #164]	; (800b644 <__lshift+0xd4>)
 800b5a0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b5a4:	f001 fb28 	bl	800cbf8 <__assert_func>
 800b5a8:	3101      	adds	r1, #1
 800b5aa:	005b      	lsls	r3, r3, #1
 800b5ac:	e7ee      	b.n	800b58c <__lshift+0x1c>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	f100 0114 	add.w	r1, r0, #20
 800b5b4:	f100 0210 	add.w	r2, r0, #16
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	4553      	cmp	r3, sl
 800b5bc:	db33      	blt.n	800b626 <__lshift+0xb6>
 800b5be:	6920      	ldr	r0, [r4, #16]
 800b5c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5c4:	f104 0314 	add.w	r3, r4, #20
 800b5c8:	f019 091f 	ands.w	r9, r9, #31
 800b5cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b5d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b5d4:	d02b      	beq.n	800b62e <__lshift+0xbe>
 800b5d6:	f1c9 0e20 	rsb	lr, r9, #32
 800b5da:	468a      	mov	sl, r1
 800b5dc:	2200      	movs	r2, #0
 800b5de:	6818      	ldr	r0, [r3, #0]
 800b5e0:	fa00 f009 	lsl.w	r0, r0, r9
 800b5e4:	4310      	orrs	r0, r2
 800b5e6:	f84a 0b04 	str.w	r0, [sl], #4
 800b5ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5ee:	459c      	cmp	ip, r3
 800b5f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b5f4:	d8f3      	bhi.n	800b5de <__lshift+0x6e>
 800b5f6:	ebac 0304 	sub.w	r3, ip, r4
 800b5fa:	3b15      	subs	r3, #21
 800b5fc:	f023 0303 	bic.w	r3, r3, #3
 800b600:	3304      	adds	r3, #4
 800b602:	f104 0015 	add.w	r0, r4, #21
 800b606:	4584      	cmp	ip, r0
 800b608:	bf38      	it	cc
 800b60a:	2304      	movcc	r3, #4
 800b60c:	50ca      	str	r2, [r1, r3]
 800b60e:	b10a      	cbz	r2, 800b614 <__lshift+0xa4>
 800b610:	f108 0602 	add.w	r6, r8, #2
 800b614:	3e01      	subs	r6, #1
 800b616:	4638      	mov	r0, r7
 800b618:	612e      	str	r6, [r5, #16]
 800b61a:	4621      	mov	r1, r4
 800b61c:	f7ff fd8e 	bl	800b13c <_Bfree>
 800b620:	4628      	mov	r0, r5
 800b622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b626:	f842 0f04 	str.w	r0, [r2, #4]!
 800b62a:	3301      	adds	r3, #1
 800b62c:	e7c5      	b.n	800b5ba <__lshift+0x4a>
 800b62e:	3904      	subs	r1, #4
 800b630:	f853 2b04 	ldr.w	r2, [r3], #4
 800b634:	f841 2f04 	str.w	r2, [r1, #4]!
 800b638:	459c      	cmp	ip, r3
 800b63a:	d8f9      	bhi.n	800b630 <__lshift+0xc0>
 800b63c:	e7ea      	b.n	800b614 <__lshift+0xa4>
 800b63e:	bf00      	nop
 800b640:	0800ef2d 	.word	0x0800ef2d
 800b644:	0800ef3e 	.word	0x0800ef3e

0800b648 <__mcmp>:
 800b648:	b530      	push	{r4, r5, lr}
 800b64a:	6902      	ldr	r2, [r0, #16]
 800b64c:	690c      	ldr	r4, [r1, #16]
 800b64e:	1b12      	subs	r2, r2, r4
 800b650:	d10e      	bne.n	800b670 <__mcmp+0x28>
 800b652:	f100 0314 	add.w	r3, r0, #20
 800b656:	3114      	adds	r1, #20
 800b658:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b65c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b660:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b664:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b668:	42a5      	cmp	r5, r4
 800b66a:	d003      	beq.n	800b674 <__mcmp+0x2c>
 800b66c:	d305      	bcc.n	800b67a <__mcmp+0x32>
 800b66e:	2201      	movs	r2, #1
 800b670:	4610      	mov	r0, r2
 800b672:	bd30      	pop	{r4, r5, pc}
 800b674:	4283      	cmp	r3, r0
 800b676:	d3f3      	bcc.n	800b660 <__mcmp+0x18>
 800b678:	e7fa      	b.n	800b670 <__mcmp+0x28>
 800b67a:	f04f 32ff 	mov.w	r2, #4294967295
 800b67e:	e7f7      	b.n	800b670 <__mcmp+0x28>

0800b680 <__mdiff>:
 800b680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b684:	460c      	mov	r4, r1
 800b686:	4606      	mov	r6, r0
 800b688:	4611      	mov	r1, r2
 800b68a:	4620      	mov	r0, r4
 800b68c:	4690      	mov	r8, r2
 800b68e:	f7ff ffdb 	bl	800b648 <__mcmp>
 800b692:	1e05      	subs	r5, r0, #0
 800b694:	d110      	bne.n	800b6b8 <__mdiff+0x38>
 800b696:	4629      	mov	r1, r5
 800b698:	4630      	mov	r0, r6
 800b69a:	f7ff fd0f 	bl	800b0bc <_Balloc>
 800b69e:	b930      	cbnz	r0, 800b6ae <__mdiff+0x2e>
 800b6a0:	4b3a      	ldr	r3, [pc, #232]	; (800b78c <__mdiff+0x10c>)
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	f240 2137 	movw	r1, #567	; 0x237
 800b6a8:	4839      	ldr	r0, [pc, #228]	; (800b790 <__mdiff+0x110>)
 800b6aa:	f001 faa5 	bl	800cbf8 <__assert_func>
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b6b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b8:	bfa4      	itt	ge
 800b6ba:	4643      	movge	r3, r8
 800b6bc:	46a0      	movge	r8, r4
 800b6be:	4630      	mov	r0, r6
 800b6c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b6c4:	bfa6      	itte	ge
 800b6c6:	461c      	movge	r4, r3
 800b6c8:	2500      	movge	r5, #0
 800b6ca:	2501      	movlt	r5, #1
 800b6cc:	f7ff fcf6 	bl	800b0bc <_Balloc>
 800b6d0:	b920      	cbnz	r0, 800b6dc <__mdiff+0x5c>
 800b6d2:	4b2e      	ldr	r3, [pc, #184]	; (800b78c <__mdiff+0x10c>)
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	f240 2145 	movw	r1, #581	; 0x245
 800b6da:	e7e5      	b.n	800b6a8 <__mdiff+0x28>
 800b6dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b6e0:	6926      	ldr	r6, [r4, #16]
 800b6e2:	60c5      	str	r5, [r0, #12]
 800b6e4:	f104 0914 	add.w	r9, r4, #20
 800b6e8:	f108 0514 	add.w	r5, r8, #20
 800b6ec:	f100 0e14 	add.w	lr, r0, #20
 800b6f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b6f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b6f8:	f108 0210 	add.w	r2, r8, #16
 800b6fc:	46f2      	mov	sl, lr
 800b6fe:	2100      	movs	r1, #0
 800b700:	f859 3b04 	ldr.w	r3, [r9], #4
 800b704:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b708:	fa11 f88b 	uxtah	r8, r1, fp
 800b70c:	b299      	uxth	r1, r3
 800b70e:	0c1b      	lsrs	r3, r3, #16
 800b710:	eba8 0801 	sub.w	r8, r8, r1
 800b714:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b718:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b71c:	fa1f f888 	uxth.w	r8, r8
 800b720:	1419      	asrs	r1, r3, #16
 800b722:	454e      	cmp	r6, r9
 800b724:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b728:	f84a 3b04 	str.w	r3, [sl], #4
 800b72c:	d8e8      	bhi.n	800b700 <__mdiff+0x80>
 800b72e:	1b33      	subs	r3, r6, r4
 800b730:	3b15      	subs	r3, #21
 800b732:	f023 0303 	bic.w	r3, r3, #3
 800b736:	3304      	adds	r3, #4
 800b738:	3415      	adds	r4, #21
 800b73a:	42a6      	cmp	r6, r4
 800b73c:	bf38      	it	cc
 800b73e:	2304      	movcc	r3, #4
 800b740:	441d      	add	r5, r3
 800b742:	4473      	add	r3, lr
 800b744:	469e      	mov	lr, r3
 800b746:	462e      	mov	r6, r5
 800b748:	4566      	cmp	r6, ip
 800b74a:	d30e      	bcc.n	800b76a <__mdiff+0xea>
 800b74c:	f10c 0203 	add.w	r2, ip, #3
 800b750:	1b52      	subs	r2, r2, r5
 800b752:	f022 0203 	bic.w	r2, r2, #3
 800b756:	3d03      	subs	r5, #3
 800b758:	45ac      	cmp	ip, r5
 800b75a:	bf38      	it	cc
 800b75c:	2200      	movcc	r2, #0
 800b75e:	4413      	add	r3, r2
 800b760:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b764:	b17a      	cbz	r2, 800b786 <__mdiff+0x106>
 800b766:	6107      	str	r7, [r0, #16]
 800b768:	e7a4      	b.n	800b6b4 <__mdiff+0x34>
 800b76a:	f856 8b04 	ldr.w	r8, [r6], #4
 800b76e:	fa11 f288 	uxtah	r2, r1, r8
 800b772:	1414      	asrs	r4, r2, #16
 800b774:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b778:	b292      	uxth	r2, r2
 800b77a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b77e:	f84e 2b04 	str.w	r2, [lr], #4
 800b782:	1421      	asrs	r1, r4, #16
 800b784:	e7e0      	b.n	800b748 <__mdiff+0xc8>
 800b786:	3f01      	subs	r7, #1
 800b788:	e7ea      	b.n	800b760 <__mdiff+0xe0>
 800b78a:	bf00      	nop
 800b78c:	0800ef2d 	.word	0x0800ef2d
 800b790:	0800ef3e 	.word	0x0800ef3e

0800b794 <__ulp>:
 800b794:	b082      	sub	sp, #8
 800b796:	ed8d 0b00 	vstr	d0, [sp]
 800b79a:	9a01      	ldr	r2, [sp, #4]
 800b79c:	4b0f      	ldr	r3, [pc, #60]	; (800b7dc <__ulp+0x48>)
 800b79e:	4013      	ands	r3, r2
 800b7a0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	dc08      	bgt.n	800b7ba <__ulp+0x26>
 800b7a8:	425b      	negs	r3, r3
 800b7aa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b7ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b7b2:	da04      	bge.n	800b7be <__ulp+0x2a>
 800b7b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b7b8:	4113      	asrs	r3, r2
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	e008      	b.n	800b7d0 <__ulp+0x3c>
 800b7be:	f1a2 0314 	sub.w	r3, r2, #20
 800b7c2:	2b1e      	cmp	r3, #30
 800b7c4:	bfda      	itte	le
 800b7c6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b7ca:	40da      	lsrle	r2, r3
 800b7cc:	2201      	movgt	r2, #1
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	4610      	mov	r0, r2
 800b7d4:	ec41 0b10 	vmov	d0, r0, r1
 800b7d8:	b002      	add	sp, #8
 800b7da:	4770      	bx	lr
 800b7dc:	7ff00000 	.word	0x7ff00000

0800b7e0 <__b2d>:
 800b7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e4:	6906      	ldr	r6, [r0, #16]
 800b7e6:	f100 0814 	add.w	r8, r0, #20
 800b7ea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b7ee:	1f37      	subs	r7, r6, #4
 800b7f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b7f4:	4610      	mov	r0, r2
 800b7f6:	f7ff fd53 	bl	800b2a0 <__hi0bits>
 800b7fa:	f1c0 0320 	rsb	r3, r0, #32
 800b7fe:	280a      	cmp	r0, #10
 800b800:	600b      	str	r3, [r1, #0]
 800b802:	491b      	ldr	r1, [pc, #108]	; (800b870 <__b2d+0x90>)
 800b804:	dc15      	bgt.n	800b832 <__b2d+0x52>
 800b806:	f1c0 0c0b 	rsb	ip, r0, #11
 800b80a:	fa22 f30c 	lsr.w	r3, r2, ip
 800b80e:	45b8      	cmp	r8, r7
 800b810:	ea43 0501 	orr.w	r5, r3, r1
 800b814:	bf34      	ite	cc
 800b816:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b81a:	2300      	movcs	r3, #0
 800b81c:	3015      	adds	r0, #21
 800b81e:	fa02 f000 	lsl.w	r0, r2, r0
 800b822:	fa23 f30c 	lsr.w	r3, r3, ip
 800b826:	4303      	orrs	r3, r0
 800b828:	461c      	mov	r4, r3
 800b82a:	ec45 4b10 	vmov	d0, r4, r5
 800b82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b832:	45b8      	cmp	r8, r7
 800b834:	bf3a      	itte	cc
 800b836:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b83a:	f1a6 0708 	subcc.w	r7, r6, #8
 800b83e:	2300      	movcs	r3, #0
 800b840:	380b      	subs	r0, #11
 800b842:	d012      	beq.n	800b86a <__b2d+0x8a>
 800b844:	f1c0 0120 	rsb	r1, r0, #32
 800b848:	fa23 f401 	lsr.w	r4, r3, r1
 800b84c:	4082      	lsls	r2, r0
 800b84e:	4322      	orrs	r2, r4
 800b850:	4547      	cmp	r7, r8
 800b852:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b856:	bf8c      	ite	hi
 800b858:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b85c:	2200      	movls	r2, #0
 800b85e:	4083      	lsls	r3, r0
 800b860:	40ca      	lsrs	r2, r1
 800b862:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b866:	4313      	orrs	r3, r2
 800b868:	e7de      	b.n	800b828 <__b2d+0x48>
 800b86a:	ea42 0501 	orr.w	r5, r2, r1
 800b86e:	e7db      	b.n	800b828 <__b2d+0x48>
 800b870:	3ff00000 	.word	0x3ff00000

0800b874 <__d2b>:
 800b874:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b878:	460f      	mov	r7, r1
 800b87a:	2101      	movs	r1, #1
 800b87c:	ec59 8b10 	vmov	r8, r9, d0
 800b880:	4616      	mov	r6, r2
 800b882:	f7ff fc1b 	bl	800b0bc <_Balloc>
 800b886:	4604      	mov	r4, r0
 800b888:	b930      	cbnz	r0, 800b898 <__d2b+0x24>
 800b88a:	4602      	mov	r2, r0
 800b88c:	4b24      	ldr	r3, [pc, #144]	; (800b920 <__d2b+0xac>)
 800b88e:	4825      	ldr	r0, [pc, #148]	; (800b924 <__d2b+0xb0>)
 800b890:	f240 310f 	movw	r1, #783	; 0x30f
 800b894:	f001 f9b0 	bl	800cbf8 <__assert_func>
 800b898:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b89c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8a0:	bb2d      	cbnz	r5, 800b8ee <__d2b+0x7a>
 800b8a2:	9301      	str	r3, [sp, #4]
 800b8a4:	f1b8 0300 	subs.w	r3, r8, #0
 800b8a8:	d026      	beq.n	800b8f8 <__d2b+0x84>
 800b8aa:	4668      	mov	r0, sp
 800b8ac:	9300      	str	r3, [sp, #0]
 800b8ae:	f7ff fd17 	bl	800b2e0 <__lo0bits>
 800b8b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b8b6:	b1e8      	cbz	r0, 800b8f4 <__d2b+0x80>
 800b8b8:	f1c0 0320 	rsb	r3, r0, #32
 800b8bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b8c0:	430b      	orrs	r3, r1
 800b8c2:	40c2      	lsrs	r2, r0
 800b8c4:	6163      	str	r3, [r4, #20]
 800b8c6:	9201      	str	r2, [sp, #4]
 800b8c8:	9b01      	ldr	r3, [sp, #4]
 800b8ca:	61a3      	str	r3, [r4, #24]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	bf14      	ite	ne
 800b8d0:	2202      	movne	r2, #2
 800b8d2:	2201      	moveq	r2, #1
 800b8d4:	6122      	str	r2, [r4, #16]
 800b8d6:	b1bd      	cbz	r5, 800b908 <__d2b+0x94>
 800b8d8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b8dc:	4405      	add	r5, r0
 800b8de:	603d      	str	r5, [r7, #0]
 800b8e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b8e4:	6030      	str	r0, [r6, #0]
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	b003      	add	sp, #12
 800b8ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8f2:	e7d6      	b.n	800b8a2 <__d2b+0x2e>
 800b8f4:	6161      	str	r1, [r4, #20]
 800b8f6:	e7e7      	b.n	800b8c8 <__d2b+0x54>
 800b8f8:	a801      	add	r0, sp, #4
 800b8fa:	f7ff fcf1 	bl	800b2e0 <__lo0bits>
 800b8fe:	9b01      	ldr	r3, [sp, #4]
 800b900:	6163      	str	r3, [r4, #20]
 800b902:	3020      	adds	r0, #32
 800b904:	2201      	movs	r2, #1
 800b906:	e7e5      	b.n	800b8d4 <__d2b+0x60>
 800b908:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b90c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b910:	6038      	str	r0, [r7, #0]
 800b912:	6918      	ldr	r0, [r3, #16]
 800b914:	f7ff fcc4 	bl	800b2a0 <__hi0bits>
 800b918:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b91c:	e7e2      	b.n	800b8e4 <__d2b+0x70>
 800b91e:	bf00      	nop
 800b920:	0800ef2d 	.word	0x0800ef2d
 800b924:	0800ef3e 	.word	0x0800ef3e

0800b928 <__ratio>:
 800b928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b92c:	4688      	mov	r8, r1
 800b92e:	4669      	mov	r1, sp
 800b930:	4681      	mov	r9, r0
 800b932:	f7ff ff55 	bl	800b7e0 <__b2d>
 800b936:	a901      	add	r1, sp, #4
 800b938:	4640      	mov	r0, r8
 800b93a:	ec55 4b10 	vmov	r4, r5, d0
 800b93e:	f7ff ff4f 	bl	800b7e0 <__b2d>
 800b942:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b946:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b94a:	eba3 0c02 	sub.w	ip, r3, r2
 800b94e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b952:	1a9b      	subs	r3, r3, r2
 800b954:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b958:	ec51 0b10 	vmov	r0, r1, d0
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	bfd6      	itet	le
 800b960:	460a      	movle	r2, r1
 800b962:	462a      	movgt	r2, r5
 800b964:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b968:	468b      	mov	fp, r1
 800b96a:	462f      	mov	r7, r5
 800b96c:	bfd4      	ite	le
 800b96e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b972:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b976:	4620      	mov	r0, r4
 800b978:	ee10 2a10 	vmov	r2, s0
 800b97c:	465b      	mov	r3, fp
 800b97e:	4639      	mov	r1, r7
 800b980:	f7f4 ff8c 	bl	800089c <__aeabi_ddiv>
 800b984:	ec41 0b10 	vmov	d0, r0, r1
 800b988:	b003      	add	sp, #12
 800b98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b98e <__copybits>:
 800b98e:	3901      	subs	r1, #1
 800b990:	b570      	push	{r4, r5, r6, lr}
 800b992:	1149      	asrs	r1, r1, #5
 800b994:	6914      	ldr	r4, [r2, #16]
 800b996:	3101      	adds	r1, #1
 800b998:	f102 0314 	add.w	r3, r2, #20
 800b99c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b9a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b9a4:	1f05      	subs	r5, r0, #4
 800b9a6:	42a3      	cmp	r3, r4
 800b9a8:	d30c      	bcc.n	800b9c4 <__copybits+0x36>
 800b9aa:	1aa3      	subs	r3, r4, r2
 800b9ac:	3b11      	subs	r3, #17
 800b9ae:	f023 0303 	bic.w	r3, r3, #3
 800b9b2:	3211      	adds	r2, #17
 800b9b4:	42a2      	cmp	r2, r4
 800b9b6:	bf88      	it	hi
 800b9b8:	2300      	movhi	r3, #0
 800b9ba:	4418      	add	r0, r3
 800b9bc:	2300      	movs	r3, #0
 800b9be:	4288      	cmp	r0, r1
 800b9c0:	d305      	bcc.n	800b9ce <__copybits+0x40>
 800b9c2:	bd70      	pop	{r4, r5, r6, pc}
 800b9c4:	f853 6b04 	ldr.w	r6, [r3], #4
 800b9c8:	f845 6f04 	str.w	r6, [r5, #4]!
 800b9cc:	e7eb      	b.n	800b9a6 <__copybits+0x18>
 800b9ce:	f840 3b04 	str.w	r3, [r0], #4
 800b9d2:	e7f4      	b.n	800b9be <__copybits+0x30>

0800b9d4 <__any_on>:
 800b9d4:	f100 0214 	add.w	r2, r0, #20
 800b9d8:	6900      	ldr	r0, [r0, #16]
 800b9da:	114b      	asrs	r3, r1, #5
 800b9dc:	4298      	cmp	r0, r3
 800b9de:	b510      	push	{r4, lr}
 800b9e0:	db11      	blt.n	800ba06 <__any_on+0x32>
 800b9e2:	dd0a      	ble.n	800b9fa <__any_on+0x26>
 800b9e4:	f011 011f 	ands.w	r1, r1, #31
 800b9e8:	d007      	beq.n	800b9fa <__any_on+0x26>
 800b9ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b9ee:	fa24 f001 	lsr.w	r0, r4, r1
 800b9f2:	fa00 f101 	lsl.w	r1, r0, r1
 800b9f6:	428c      	cmp	r4, r1
 800b9f8:	d10b      	bne.n	800ba12 <__any_on+0x3e>
 800b9fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d803      	bhi.n	800ba0a <__any_on+0x36>
 800ba02:	2000      	movs	r0, #0
 800ba04:	bd10      	pop	{r4, pc}
 800ba06:	4603      	mov	r3, r0
 800ba08:	e7f7      	b.n	800b9fa <__any_on+0x26>
 800ba0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba0e:	2900      	cmp	r1, #0
 800ba10:	d0f5      	beq.n	800b9fe <__any_on+0x2a>
 800ba12:	2001      	movs	r0, #1
 800ba14:	e7f6      	b.n	800ba04 <__any_on+0x30>

0800ba16 <sulp>:
 800ba16:	b570      	push	{r4, r5, r6, lr}
 800ba18:	4604      	mov	r4, r0
 800ba1a:	460d      	mov	r5, r1
 800ba1c:	ec45 4b10 	vmov	d0, r4, r5
 800ba20:	4616      	mov	r6, r2
 800ba22:	f7ff feb7 	bl	800b794 <__ulp>
 800ba26:	ec51 0b10 	vmov	r0, r1, d0
 800ba2a:	b17e      	cbz	r6, 800ba4c <sulp+0x36>
 800ba2c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ba30:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	dd09      	ble.n	800ba4c <sulp+0x36>
 800ba38:	051b      	lsls	r3, r3, #20
 800ba3a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ba3e:	2400      	movs	r4, #0
 800ba40:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ba44:	4622      	mov	r2, r4
 800ba46:	462b      	mov	r3, r5
 800ba48:	f7f4 fdfe 	bl	8000648 <__aeabi_dmul>
 800ba4c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba50 <_strtod_l>:
 800ba50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba54:	ed2d 8b02 	vpush	{d8}
 800ba58:	b09b      	sub	sp, #108	; 0x6c
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	9213      	str	r2, [sp, #76]	; 0x4c
 800ba5e:	2200      	movs	r2, #0
 800ba60:	9216      	str	r2, [sp, #88]	; 0x58
 800ba62:	460d      	mov	r5, r1
 800ba64:	f04f 0800 	mov.w	r8, #0
 800ba68:	f04f 0900 	mov.w	r9, #0
 800ba6c:	460a      	mov	r2, r1
 800ba6e:	9215      	str	r2, [sp, #84]	; 0x54
 800ba70:	7811      	ldrb	r1, [r2, #0]
 800ba72:	292b      	cmp	r1, #43	; 0x2b
 800ba74:	d04c      	beq.n	800bb10 <_strtod_l+0xc0>
 800ba76:	d83a      	bhi.n	800baee <_strtod_l+0x9e>
 800ba78:	290d      	cmp	r1, #13
 800ba7a:	d834      	bhi.n	800bae6 <_strtod_l+0x96>
 800ba7c:	2908      	cmp	r1, #8
 800ba7e:	d834      	bhi.n	800baea <_strtod_l+0x9a>
 800ba80:	2900      	cmp	r1, #0
 800ba82:	d03d      	beq.n	800bb00 <_strtod_l+0xb0>
 800ba84:	2200      	movs	r2, #0
 800ba86:	920a      	str	r2, [sp, #40]	; 0x28
 800ba88:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ba8a:	7832      	ldrb	r2, [r6, #0]
 800ba8c:	2a30      	cmp	r2, #48	; 0x30
 800ba8e:	f040 80b4 	bne.w	800bbfa <_strtod_l+0x1aa>
 800ba92:	7872      	ldrb	r2, [r6, #1]
 800ba94:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ba98:	2a58      	cmp	r2, #88	; 0x58
 800ba9a:	d170      	bne.n	800bb7e <_strtod_l+0x12e>
 800ba9c:	9302      	str	r3, [sp, #8]
 800ba9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baa0:	9301      	str	r3, [sp, #4]
 800baa2:	ab16      	add	r3, sp, #88	; 0x58
 800baa4:	9300      	str	r3, [sp, #0]
 800baa6:	4a8e      	ldr	r2, [pc, #568]	; (800bce0 <_strtod_l+0x290>)
 800baa8:	ab17      	add	r3, sp, #92	; 0x5c
 800baaa:	a915      	add	r1, sp, #84	; 0x54
 800baac:	4620      	mov	r0, r4
 800baae:	f001 f93f 	bl	800cd30 <__gethex>
 800bab2:	f010 070f 	ands.w	r7, r0, #15
 800bab6:	4605      	mov	r5, r0
 800bab8:	d005      	beq.n	800bac6 <_strtod_l+0x76>
 800baba:	2f06      	cmp	r7, #6
 800babc:	d12a      	bne.n	800bb14 <_strtod_l+0xc4>
 800babe:	3601      	adds	r6, #1
 800bac0:	2300      	movs	r3, #0
 800bac2:	9615      	str	r6, [sp, #84]	; 0x54
 800bac4:	930a      	str	r3, [sp, #40]	; 0x28
 800bac6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bac8:	2b00      	cmp	r3, #0
 800baca:	f040 857f 	bne.w	800c5cc <_strtod_l+0xb7c>
 800bace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bad0:	b1db      	cbz	r3, 800bb0a <_strtod_l+0xba>
 800bad2:	4642      	mov	r2, r8
 800bad4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bad8:	ec43 2b10 	vmov	d0, r2, r3
 800badc:	b01b      	add	sp, #108	; 0x6c
 800bade:	ecbd 8b02 	vpop	{d8}
 800bae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae6:	2920      	cmp	r1, #32
 800bae8:	d1cc      	bne.n	800ba84 <_strtod_l+0x34>
 800baea:	3201      	adds	r2, #1
 800baec:	e7bf      	b.n	800ba6e <_strtod_l+0x1e>
 800baee:	292d      	cmp	r1, #45	; 0x2d
 800baf0:	d1c8      	bne.n	800ba84 <_strtod_l+0x34>
 800baf2:	2101      	movs	r1, #1
 800baf4:	910a      	str	r1, [sp, #40]	; 0x28
 800baf6:	1c51      	adds	r1, r2, #1
 800baf8:	9115      	str	r1, [sp, #84]	; 0x54
 800bafa:	7852      	ldrb	r2, [r2, #1]
 800bafc:	2a00      	cmp	r2, #0
 800bafe:	d1c3      	bne.n	800ba88 <_strtod_l+0x38>
 800bb00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bb02:	9515      	str	r5, [sp, #84]	; 0x54
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	f040 855f 	bne.w	800c5c8 <_strtod_l+0xb78>
 800bb0a:	4642      	mov	r2, r8
 800bb0c:	464b      	mov	r3, r9
 800bb0e:	e7e3      	b.n	800bad8 <_strtod_l+0x88>
 800bb10:	2100      	movs	r1, #0
 800bb12:	e7ef      	b.n	800baf4 <_strtod_l+0xa4>
 800bb14:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bb16:	b13a      	cbz	r2, 800bb28 <_strtod_l+0xd8>
 800bb18:	2135      	movs	r1, #53	; 0x35
 800bb1a:	a818      	add	r0, sp, #96	; 0x60
 800bb1c:	f7ff ff37 	bl	800b98e <__copybits>
 800bb20:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bb22:	4620      	mov	r0, r4
 800bb24:	f7ff fb0a 	bl	800b13c <_Bfree>
 800bb28:	3f01      	subs	r7, #1
 800bb2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bb2c:	2f04      	cmp	r7, #4
 800bb2e:	d806      	bhi.n	800bb3e <_strtod_l+0xee>
 800bb30:	e8df f007 	tbb	[pc, r7]
 800bb34:	201d0314 	.word	0x201d0314
 800bb38:	14          	.byte	0x14
 800bb39:	00          	.byte	0x00
 800bb3a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800bb3e:	05e9      	lsls	r1, r5, #23
 800bb40:	bf48      	it	mi
 800bb42:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800bb46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bb4a:	0d1b      	lsrs	r3, r3, #20
 800bb4c:	051b      	lsls	r3, r3, #20
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d1b9      	bne.n	800bac6 <_strtod_l+0x76>
 800bb52:	f7fe fb03 	bl	800a15c <__errno>
 800bb56:	2322      	movs	r3, #34	; 0x22
 800bb58:	6003      	str	r3, [r0, #0]
 800bb5a:	e7b4      	b.n	800bac6 <_strtod_l+0x76>
 800bb5c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800bb60:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bb64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bb68:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800bb6c:	e7e7      	b.n	800bb3e <_strtod_l+0xee>
 800bb6e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800bce8 <_strtod_l+0x298>
 800bb72:	e7e4      	b.n	800bb3e <_strtod_l+0xee>
 800bb74:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800bb78:	f04f 38ff 	mov.w	r8, #4294967295
 800bb7c:	e7df      	b.n	800bb3e <_strtod_l+0xee>
 800bb7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb80:	1c5a      	adds	r2, r3, #1
 800bb82:	9215      	str	r2, [sp, #84]	; 0x54
 800bb84:	785b      	ldrb	r3, [r3, #1]
 800bb86:	2b30      	cmp	r3, #48	; 0x30
 800bb88:	d0f9      	beq.n	800bb7e <_strtod_l+0x12e>
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d09b      	beq.n	800bac6 <_strtod_l+0x76>
 800bb8e:	2301      	movs	r3, #1
 800bb90:	f04f 0a00 	mov.w	sl, #0
 800bb94:	9304      	str	r3, [sp, #16]
 800bb96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb98:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb9a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800bb9e:	46d3      	mov	fp, sl
 800bba0:	220a      	movs	r2, #10
 800bba2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800bba4:	7806      	ldrb	r6, [r0, #0]
 800bba6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bbaa:	b2d9      	uxtb	r1, r3
 800bbac:	2909      	cmp	r1, #9
 800bbae:	d926      	bls.n	800bbfe <_strtod_l+0x1ae>
 800bbb0:	494c      	ldr	r1, [pc, #304]	; (800bce4 <_strtod_l+0x294>)
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	f000 ffe6 	bl	800cb84 <strncmp>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d030      	beq.n	800bc1e <_strtod_l+0x1ce>
 800bbbc:	2000      	movs	r0, #0
 800bbbe:	4632      	mov	r2, r6
 800bbc0:	9005      	str	r0, [sp, #20]
 800bbc2:	465e      	mov	r6, fp
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2a65      	cmp	r2, #101	; 0x65
 800bbc8:	d001      	beq.n	800bbce <_strtod_l+0x17e>
 800bbca:	2a45      	cmp	r2, #69	; 0x45
 800bbcc:	d113      	bne.n	800bbf6 <_strtod_l+0x1a6>
 800bbce:	b91e      	cbnz	r6, 800bbd8 <_strtod_l+0x188>
 800bbd0:	9a04      	ldr	r2, [sp, #16]
 800bbd2:	4302      	orrs	r2, r0
 800bbd4:	d094      	beq.n	800bb00 <_strtod_l+0xb0>
 800bbd6:	2600      	movs	r6, #0
 800bbd8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800bbda:	1c6a      	adds	r2, r5, #1
 800bbdc:	9215      	str	r2, [sp, #84]	; 0x54
 800bbde:	786a      	ldrb	r2, [r5, #1]
 800bbe0:	2a2b      	cmp	r2, #43	; 0x2b
 800bbe2:	d074      	beq.n	800bcce <_strtod_l+0x27e>
 800bbe4:	2a2d      	cmp	r2, #45	; 0x2d
 800bbe6:	d078      	beq.n	800bcda <_strtod_l+0x28a>
 800bbe8:	f04f 0c00 	mov.w	ip, #0
 800bbec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bbf0:	2909      	cmp	r1, #9
 800bbf2:	d97f      	bls.n	800bcf4 <_strtod_l+0x2a4>
 800bbf4:	9515      	str	r5, [sp, #84]	; 0x54
 800bbf6:	2700      	movs	r7, #0
 800bbf8:	e09e      	b.n	800bd38 <_strtod_l+0x2e8>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	e7c8      	b.n	800bb90 <_strtod_l+0x140>
 800bbfe:	f1bb 0f08 	cmp.w	fp, #8
 800bc02:	bfd8      	it	le
 800bc04:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800bc06:	f100 0001 	add.w	r0, r0, #1
 800bc0a:	bfda      	itte	le
 800bc0c:	fb02 3301 	mlale	r3, r2, r1, r3
 800bc10:	9309      	strle	r3, [sp, #36]	; 0x24
 800bc12:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800bc16:	f10b 0b01 	add.w	fp, fp, #1
 800bc1a:	9015      	str	r0, [sp, #84]	; 0x54
 800bc1c:	e7c1      	b.n	800bba2 <_strtod_l+0x152>
 800bc1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc20:	1c5a      	adds	r2, r3, #1
 800bc22:	9215      	str	r2, [sp, #84]	; 0x54
 800bc24:	785a      	ldrb	r2, [r3, #1]
 800bc26:	f1bb 0f00 	cmp.w	fp, #0
 800bc2a:	d037      	beq.n	800bc9c <_strtod_l+0x24c>
 800bc2c:	9005      	str	r0, [sp, #20]
 800bc2e:	465e      	mov	r6, fp
 800bc30:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bc34:	2b09      	cmp	r3, #9
 800bc36:	d912      	bls.n	800bc5e <_strtod_l+0x20e>
 800bc38:	2301      	movs	r3, #1
 800bc3a:	e7c4      	b.n	800bbc6 <_strtod_l+0x176>
 800bc3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc3e:	1c5a      	adds	r2, r3, #1
 800bc40:	9215      	str	r2, [sp, #84]	; 0x54
 800bc42:	785a      	ldrb	r2, [r3, #1]
 800bc44:	3001      	adds	r0, #1
 800bc46:	2a30      	cmp	r2, #48	; 0x30
 800bc48:	d0f8      	beq.n	800bc3c <_strtod_l+0x1ec>
 800bc4a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bc4e:	2b08      	cmp	r3, #8
 800bc50:	f200 84c1 	bhi.w	800c5d6 <_strtod_l+0xb86>
 800bc54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc56:	9005      	str	r0, [sp, #20]
 800bc58:	2000      	movs	r0, #0
 800bc5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc5c:	4606      	mov	r6, r0
 800bc5e:	3a30      	subs	r2, #48	; 0x30
 800bc60:	f100 0301 	add.w	r3, r0, #1
 800bc64:	d014      	beq.n	800bc90 <_strtod_l+0x240>
 800bc66:	9905      	ldr	r1, [sp, #20]
 800bc68:	4419      	add	r1, r3
 800bc6a:	9105      	str	r1, [sp, #20]
 800bc6c:	4633      	mov	r3, r6
 800bc6e:	eb00 0c06 	add.w	ip, r0, r6
 800bc72:	210a      	movs	r1, #10
 800bc74:	4563      	cmp	r3, ip
 800bc76:	d113      	bne.n	800bca0 <_strtod_l+0x250>
 800bc78:	1833      	adds	r3, r6, r0
 800bc7a:	2b08      	cmp	r3, #8
 800bc7c:	f106 0601 	add.w	r6, r6, #1
 800bc80:	4406      	add	r6, r0
 800bc82:	dc1a      	bgt.n	800bcba <_strtod_l+0x26a>
 800bc84:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc86:	230a      	movs	r3, #10
 800bc88:	fb03 2301 	mla	r3, r3, r1, r2
 800bc8c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc8e:	2300      	movs	r3, #0
 800bc90:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bc92:	1c51      	adds	r1, r2, #1
 800bc94:	9115      	str	r1, [sp, #84]	; 0x54
 800bc96:	7852      	ldrb	r2, [r2, #1]
 800bc98:	4618      	mov	r0, r3
 800bc9a:	e7c9      	b.n	800bc30 <_strtod_l+0x1e0>
 800bc9c:	4658      	mov	r0, fp
 800bc9e:	e7d2      	b.n	800bc46 <_strtod_l+0x1f6>
 800bca0:	2b08      	cmp	r3, #8
 800bca2:	f103 0301 	add.w	r3, r3, #1
 800bca6:	dc03      	bgt.n	800bcb0 <_strtod_l+0x260>
 800bca8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bcaa:	434f      	muls	r7, r1
 800bcac:	9709      	str	r7, [sp, #36]	; 0x24
 800bcae:	e7e1      	b.n	800bc74 <_strtod_l+0x224>
 800bcb0:	2b10      	cmp	r3, #16
 800bcb2:	bfd8      	it	le
 800bcb4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800bcb8:	e7dc      	b.n	800bc74 <_strtod_l+0x224>
 800bcba:	2e10      	cmp	r6, #16
 800bcbc:	bfdc      	itt	le
 800bcbe:	230a      	movle	r3, #10
 800bcc0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800bcc4:	e7e3      	b.n	800bc8e <_strtod_l+0x23e>
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	9305      	str	r3, [sp, #20]
 800bcca:	2301      	movs	r3, #1
 800bccc:	e780      	b.n	800bbd0 <_strtod_l+0x180>
 800bcce:	f04f 0c00 	mov.w	ip, #0
 800bcd2:	1caa      	adds	r2, r5, #2
 800bcd4:	9215      	str	r2, [sp, #84]	; 0x54
 800bcd6:	78aa      	ldrb	r2, [r5, #2]
 800bcd8:	e788      	b.n	800bbec <_strtod_l+0x19c>
 800bcda:	f04f 0c01 	mov.w	ip, #1
 800bcde:	e7f8      	b.n	800bcd2 <_strtod_l+0x282>
 800bce0:	0800f098 	.word	0x0800f098
 800bce4:	0800f094 	.word	0x0800f094
 800bce8:	7ff00000 	.word	0x7ff00000
 800bcec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bcee:	1c51      	adds	r1, r2, #1
 800bcf0:	9115      	str	r1, [sp, #84]	; 0x54
 800bcf2:	7852      	ldrb	r2, [r2, #1]
 800bcf4:	2a30      	cmp	r2, #48	; 0x30
 800bcf6:	d0f9      	beq.n	800bcec <_strtod_l+0x29c>
 800bcf8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bcfc:	2908      	cmp	r1, #8
 800bcfe:	f63f af7a 	bhi.w	800bbf6 <_strtod_l+0x1a6>
 800bd02:	3a30      	subs	r2, #48	; 0x30
 800bd04:	9208      	str	r2, [sp, #32]
 800bd06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bd08:	920c      	str	r2, [sp, #48]	; 0x30
 800bd0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bd0c:	1c57      	adds	r7, r2, #1
 800bd0e:	9715      	str	r7, [sp, #84]	; 0x54
 800bd10:	7852      	ldrb	r2, [r2, #1]
 800bd12:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bd16:	f1be 0f09 	cmp.w	lr, #9
 800bd1a:	d938      	bls.n	800bd8e <_strtod_l+0x33e>
 800bd1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bd1e:	1a7f      	subs	r7, r7, r1
 800bd20:	2f08      	cmp	r7, #8
 800bd22:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bd26:	dc03      	bgt.n	800bd30 <_strtod_l+0x2e0>
 800bd28:	9908      	ldr	r1, [sp, #32]
 800bd2a:	428f      	cmp	r7, r1
 800bd2c:	bfa8      	it	ge
 800bd2e:	460f      	movge	r7, r1
 800bd30:	f1bc 0f00 	cmp.w	ip, #0
 800bd34:	d000      	beq.n	800bd38 <_strtod_l+0x2e8>
 800bd36:	427f      	negs	r7, r7
 800bd38:	2e00      	cmp	r6, #0
 800bd3a:	d14f      	bne.n	800bddc <_strtod_l+0x38c>
 800bd3c:	9904      	ldr	r1, [sp, #16]
 800bd3e:	4301      	orrs	r1, r0
 800bd40:	f47f aec1 	bne.w	800bac6 <_strtod_l+0x76>
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	f47f aedb 	bne.w	800bb00 <_strtod_l+0xb0>
 800bd4a:	2a69      	cmp	r2, #105	; 0x69
 800bd4c:	d029      	beq.n	800bda2 <_strtod_l+0x352>
 800bd4e:	dc26      	bgt.n	800bd9e <_strtod_l+0x34e>
 800bd50:	2a49      	cmp	r2, #73	; 0x49
 800bd52:	d026      	beq.n	800bda2 <_strtod_l+0x352>
 800bd54:	2a4e      	cmp	r2, #78	; 0x4e
 800bd56:	f47f aed3 	bne.w	800bb00 <_strtod_l+0xb0>
 800bd5a:	499b      	ldr	r1, [pc, #620]	; (800bfc8 <_strtod_l+0x578>)
 800bd5c:	a815      	add	r0, sp, #84	; 0x54
 800bd5e:	f001 fa27 	bl	800d1b0 <__match>
 800bd62:	2800      	cmp	r0, #0
 800bd64:	f43f aecc 	beq.w	800bb00 <_strtod_l+0xb0>
 800bd68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	2b28      	cmp	r3, #40	; 0x28
 800bd6e:	d12f      	bne.n	800bdd0 <_strtod_l+0x380>
 800bd70:	4996      	ldr	r1, [pc, #600]	; (800bfcc <_strtod_l+0x57c>)
 800bd72:	aa18      	add	r2, sp, #96	; 0x60
 800bd74:	a815      	add	r0, sp, #84	; 0x54
 800bd76:	f001 fa2f 	bl	800d1d8 <__hexnan>
 800bd7a:	2805      	cmp	r0, #5
 800bd7c:	d128      	bne.n	800bdd0 <_strtod_l+0x380>
 800bd7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bd80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bd84:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800bd88:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800bd8c:	e69b      	b.n	800bac6 <_strtod_l+0x76>
 800bd8e:	9f08      	ldr	r7, [sp, #32]
 800bd90:	210a      	movs	r1, #10
 800bd92:	fb01 2107 	mla	r1, r1, r7, r2
 800bd96:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800bd9a:	9208      	str	r2, [sp, #32]
 800bd9c:	e7b5      	b.n	800bd0a <_strtod_l+0x2ba>
 800bd9e:	2a6e      	cmp	r2, #110	; 0x6e
 800bda0:	e7d9      	b.n	800bd56 <_strtod_l+0x306>
 800bda2:	498b      	ldr	r1, [pc, #556]	; (800bfd0 <_strtod_l+0x580>)
 800bda4:	a815      	add	r0, sp, #84	; 0x54
 800bda6:	f001 fa03 	bl	800d1b0 <__match>
 800bdaa:	2800      	cmp	r0, #0
 800bdac:	f43f aea8 	beq.w	800bb00 <_strtod_l+0xb0>
 800bdb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bdb2:	4988      	ldr	r1, [pc, #544]	; (800bfd4 <_strtod_l+0x584>)
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	a815      	add	r0, sp, #84	; 0x54
 800bdb8:	9315      	str	r3, [sp, #84]	; 0x54
 800bdba:	f001 f9f9 	bl	800d1b0 <__match>
 800bdbe:	b910      	cbnz	r0, 800bdc6 <_strtod_l+0x376>
 800bdc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	9315      	str	r3, [sp, #84]	; 0x54
 800bdc6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800bfe4 <_strtod_l+0x594>
 800bdca:	f04f 0800 	mov.w	r8, #0
 800bdce:	e67a      	b.n	800bac6 <_strtod_l+0x76>
 800bdd0:	4881      	ldr	r0, [pc, #516]	; (800bfd8 <_strtod_l+0x588>)
 800bdd2:	f000 ff09 	bl	800cbe8 <nan>
 800bdd6:	ec59 8b10 	vmov	r8, r9, d0
 800bdda:	e674      	b.n	800bac6 <_strtod_l+0x76>
 800bddc:	9b05      	ldr	r3, [sp, #20]
 800bdde:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bde0:	1afb      	subs	r3, r7, r3
 800bde2:	f1bb 0f00 	cmp.w	fp, #0
 800bde6:	bf08      	it	eq
 800bde8:	46b3      	moveq	fp, r6
 800bdea:	2e10      	cmp	r6, #16
 800bdec:	9308      	str	r3, [sp, #32]
 800bdee:	4635      	mov	r5, r6
 800bdf0:	bfa8      	it	ge
 800bdf2:	2510      	movge	r5, #16
 800bdf4:	f7f4 fbae 	bl	8000554 <__aeabi_ui2d>
 800bdf8:	2e09      	cmp	r6, #9
 800bdfa:	4680      	mov	r8, r0
 800bdfc:	4689      	mov	r9, r1
 800bdfe:	dd13      	ble.n	800be28 <_strtod_l+0x3d8>
 800be00:	4b76      	ldr	r3, [pc, #472]	; (800bfdc <_strtod_l+0x58c>)
 800be02:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800be06:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800be0a:	f7f4 fc1d 	bl	8000648 <__aeabi_dmul>
 800be0e:	4680      	mov	r8, r0
 800be10:	4650      	mov	r0, sl
 800be12:	4689      	mov	r9, r1
 800be14:	f7f4 fb9e 	bl	8000554 <__aeabi_ui2d>
 800be18:	4602      	mov	r2, r0
 800be1a:	460b      	mov	r3, r1
 800be1c:	4640      	mov	r0, r8
 800be1e:	4649      	mov	r1, r9
 800be20:	f7f4 fa5c 	bl	80002dc <__adddf3>
 800be24:	4680      	mov	r8, r0
 800be26:	4689      	mov	r9, r1
 800be28:	2e0f      	cmp	r6, #15
 800be2a:	dc38      	bgt.n	800be9e <_strtod_l+0x44e>
 800be2c:	9b08      	ldr	r3, [sp, #32]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	f43f ae49 	beq.w	800bac6 <_strtod_l+0x76>
 800be34:	dd24      	ble.n	800be80 <_strtod_l+0x430>
 800be36:	2b16      	cmp	r3, #22
 800be38:	dc0b      	bgt.n	800be52 <_strtod_l+0x402>
 800be3a:	4968      	ldr	r1, [pc, #416]	; (800bfdc <_strtod_l+0x58c>)
 800be3c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800be40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be44:	4642      	mov	r2, r8
 800be46:	464b      	mov	r3, r9
 800be48:	f7f4 fbfe 	bl	8000648 <__aeabi_dmul>
 800be4c:	4680      	mov	r8, r0
 800be4e:	4689      	mov	r9, r1
 800be50:	e639      	b.n	800bac6 <_strtod_l+0x76>
 800be52:	9a08      	ldr	r2, [sp, #32]
 800be54:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800be58:	4293      	cmp	r3, r2
 800be5a:	db20      	blt.n	800be9e <_strtod_l+0x44e>
 800be5c:	4c5f      	ldr	r4, [pc, #380]	; (800bfdc <_strtod_l+0x58c>)
 800be5e:	f1c6 060f 	rsb	r6, r6, #15
 800be62:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800be66:	4642      	mov	r2, r8
 800be68:	464b      	mov	r3, r9
 800be6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be6e:	f7f4 fbeb 	bl	8000648 <__aeabi_dmul>
 800be72:	9b08      	ldr	r3, [sp, #32]
 800be74:	1b9e      	subs	r6, r3, r6
 800be76:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800be7a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800be7e:	e7e3      	b.n	800be48 <_strtod_l+0x3f8>
 800be80:	9b08      	ldr	r3, [sp, #32]
 800be82:	3316      	adds	r3, #22
 800be84:	db0b      	blt.n	800be9e <_strtod_l+0x44e>
 800be86:	9b05      	ldr	r3, [sp, #20]
 800be88:	1bdf      	subs	r7, r3, r7
 800be8a:	4b54      	ldr	r3, [pc, #336]	; (800bfdc <_strtod_l+0x58c>)
 800be8c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800be90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be94:	4640      	mov	r0, r8
 800be96:	4649      	mov	r1, r9
 800be98:	f7f4 fd00 	bl	800089c <__aeabi_ddiv>
 800be9c:	e7d6      	b.n	800be4c <_strtod_l+0x3fc>
 800be9e:	9b08      	ldr	r3, [sp, #32]
 800bea0:	1b75      	subs	r5, r6, r5
 800bea2:	441d      	add	r5, r3
 800bea4:	2d00      	cmp	r5, #0
 800bea6:	dd70      	ble.n	800bf8a <_strtod_l+0x53a>
 800bea8:	f015 030f 	ands.w	r3, r5, #15
 800beac:	d00a      	beq.n	800bec4 <_strtod_l+0x474>
 800beae:	494b      	ldr	r1, [pc, #300]	; (800bfdc <_strtod_l+0x58c>)
 800beb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800beb4:	4642      	mov	r2, r8
 800beb6:	464b      	mov	r3, r9
 800beb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bebc:	f7f4 fbc4 	bl	8000648 <__aeabi_dmul>
 800bec0:	4680      	mov	r8, r0
 800bec2:	4689      	mov	r9, r1
 800bec4:	f035 050f 	bics.w	r5, r5, #15
 800bec8:	d04d      	beq.n	800bf66 <_strtod_l+0x516>
 800beca:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800bece:	dd22      	ble.n	800bf16 <_strtod_l+0x4c6>
 800bed0:	2500      	movs	r5, #0
 800bed2:	46ab      	mov	fp, r5
 800bed4:	9509      	str	r5, [sp, #36]	; 0x24
 800bed6:	9505      	str	r5, [sp, #20]
 800bed8:	2322      	movs	r3, #34	; 0x22
 800beda:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800bfe4 <_strtod_l+0x594>
 800bede:	6023      	str	r3, [r4, #0]
 800bee0:	f04f 0800 	mov.w	r8, #0
 800bee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	f43f aded 	beq.w	800bac6 <_strtod_l+0x76>
 800beec:	9916      	ldr	r1, [sp, #88]	; 0x58
 800beee:	4620      	mov	r0, r4
 800bef0:	f7ff f924 	bl	800b13c <_Bfree>
 800bef4:	9905      	ldr	r1, [sp, #20]
 800bef6:	4620      	mov	r0, r4
 800bef8:	f7ff f920 	bl	800b13c <_Bfree>
 800befc:	4659      	mov	r1, fp
 800befe:	4620      	mov	r0, r4
 800bf00:	f7ff f91c 	bl	800b13c <_Bfree>
 800bf04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf06:	4620      	mov	r0, r4
 800bf08:	f7ff f918 	bl	800b13c <_Bfree>
 800bf0c:	4629      	mov	r1, r5
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f7ff f914 	bl	800b13c <_Bfree>
 800bf14:	e5d7      	b.n	800bac6 <_strtod_l+0x76>
 800bf16:	4b32      	ldr	r3, [pc, #200]	; (800bfe0 <_strtod_l+0x590>)
 800bf18:	9304      	str	r3, [sp, #16]
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	112d      	asrs	r5, r5, #4
 800bf1e:	4640      	mov	r0, r8
 800bf20:	4649      	mov	r1, r9
 800bf22:	469a      	mov	sl, r3
 800bf24:	2d01      	cmp	r5, #1
 800bf26:	dc21      	bgt.n	800bf6c <_strtod_l+0x51c>
 800bf28:	b10b      	cbz	r3, 800bf2e <_strtod_l+0x4de>
 800bf2a:	4680      	mov	r8, r0
 800bf2c:	4689      	mov	r9, r1
 800bf2e:	492c      	ldr	r1, [pc, #176]	; (800bfe0 <_strtod_l+0x590>)
 800bf30:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800bf34:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bf38:	4642      	mov	r2, r8
 800bf3a:	464b      	mov	r3, r9
 800bf3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf40:	f7f4 fb82 	bl	8000648 <__aeabi_dmul>
 800bf44:	4b27      	ldr	r3, [pc, #156]	; (800bfe4 <_strtod_l+0x594>)
 800bf46:	460a      	mov	r2, r1
 800bf48:	400b      	ands	r3, r1
 800bf4a:	4927      	ldr	r1, [pc, #156]	; (800bfe8 <_strtod_l+0x598>)
 800bf4c:	428b      	cmp	r3, r1
 800bf4e:	4680      	mov	r8, r0
 800bf50:	d8be      	bhi.n	800bed0 <_strtod_l+0x480>
 800bf52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bf56:	428b      	cmp	r3, r1
 800bf58:	bf86      	itte	hi
 800bf5a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800bfec <_strtod_l+0x59c>
 800bf5e:	f04f 38ff 	movhi.w	r8, #4294967295
 800bf62:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800bf66:	2300      	movs	r3, #0
 800bf68:	9304      	str	r3, [sp, #16]
 800bf6a:	e07b      	b.n	800c064 <_strtod_l+0x614>
 800bf6c:	07ea      	lsls	r2, r5, #31
 800bf6e:	d505      	bpl.n	800bf7c <_strtod_l+0x52c>
 800bf70:	9b04      	ldr	r3, [sp, #16]
 800bf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf76:	f7f4 fb67 	bl	8000648 <__aeabi_dmul>
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	9a04      	ldr	r2, [sp, #16]
 800bf7e:	3208      	adds	r2, #8
 800bf80:	f10a 0a01 	add.w	sl, sl, #1
 800bf84:	106d      	asrs	r5, r5, #1
 800bf86:	9204      	str	r2, [sp, #16]
 800bf88:	e7cc      	b.n	800bf24 <_strtod_l+0x4d4>
 800bf8a:	d0ec      	beq.n	800bf66 <_strtod_l+0x516>
 800bf8c:	426d      	negs	r5, r5
 800bf8e:	f015 020f 	ands.w	r2, r5, #15
 800bf92:	d00a      	beq.n	800bfaa <_strtod_l+0x55a>
 800bf94:	4b11      	ldr	r3, [pc, #68]	; (800bfdc <_strtod_l+0x58c>)
 800bf96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf9a:	4640      	mov	r0, r8
 800bf9c:	4649      	mov	r1, r9
 800bf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa2:	f7f4 fc7b 	bl	800089c <__aeabi_ddiv>
 800bfa6:	4680      	mov	r8, r0
 800bfa8:	4689      	mov	r9, r1
 800bfaa:	112d      	asrs	r5, r5, #4
 800bfac:	d0db      	beq.n	800bf66 <_strtod_l+0x516>
 800bfae:	2d1f      	cmp	r5, #31
 800bfb0:	dd1e      	ble.n	800bff0 <_strtod_l+0x5a0>
 800bfb2:	2500      	movs	r5, #0
 800bfb4:	46ab      	mov	fp, r5
 800bfb6:	9509      	str	r5, [sp, #36]	; 0x24
 800bfb8:	9505      	str	r5, [sp, #20]
 800bfba:	2322      	movs	r3, #34	; 0x22
 800bfbc:	f04f 0800 	mov.w	r8, #0
 800bfc0:	f04f 0900 	mov.w	r9, #0
 800bfc4:	6023      	str	r3, [r4, #0]
 800bfc6:	e78d      	b.n	800bee4 <_strtod_l+0x494>
 800bfc8:	0800ee85 	.word	0x0800ee85
 800bfcc:	0800f0ac 	.word	0x0800f0ac
 800bfd0:	0800ee7d 	.word	0x0800ee7d
 800bfd4:	0800eeb4 	.word	0x0800eeb4
 800bfd8:	0800f23d 	.word	0x0800f23d
 800bfdc:	0800efc0 	.word	0x0800efc0
 800bfe0:	0800ef98 	.word	0x0800ef98
 800bfe4:	7ff00000 	.word	0x7ff00000
 800bfe8:	7ca00000 	.word	0x7ca00000
 800bfec:	7fefffff 	.word	0x7fefffff
 800bff0:	f015 0310 	ands.w	r3, r5, #16
 800bff4:	bf18      	it	ne
 800bff6:	236a      	movne	r3, #106	; 0x6a
 800bff8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c39c <_strtod_l+0x94c>
 800bffc:	9304      	str	r3, [sp, #16]
 800bffe:	4640      	mov	r0, r8
 800c000:	4649      	mov	r1, r9
 800c002:	2300      	movs	r3, #0
 800c004:	07ea      	lsls	r2, r5, #31
 800c006:	d504      	bpl.n	800c012 <_strtod_l+0x5c2>
 800c008:	e9da 2300 	ldrd	r2, r3, [sl]
 800c00c:	f7f4 fb1c 	bl	8000648 <__aeabi_dmul>
 800c010:	2301      	movs	r3, #1
 800c012:	106d      	asrs	r5, r5, #1
 800c014:	f10a 0a08 	add.w	sl, sl, #8
 800c018:	d1f4      	bne.n	800c004 <_strtod_l+0x5b4>
 800c01a:	b10b      	cbz	r3, 800c020 <_strtod_l+0x5d0>
 800c01c:	4680      	mov	r8, r0
 800c01e:	4689      	mov	r9, r1
 800c020:	9b04      	ldr	r3, [sp, #16]
 800c022:	b1bb      	cbz	r3, 800c054 <_strtod_l+0x604>
 800c024:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c028:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	4649      	mov	r1, r9
 800c030:	dd10      	ble.n	800c054 <_strtod_l+0x604>
 800c032:	2b1f      	cmp	r3, #31
 800c034:	f340 811e 	ble.w	800c274 <_strtod_l+0x824>
 800c038:	2b34      	cmp	r3, #52	; 0x34
 800c03a:	bfde      	ittt	le
 800c03c:	f04f 33ff 	movle.w	r3, #4294967295
 800c040:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c044:	4093      	lslle	r3, r2
 800c046:	f04f 0800 	mov.w	r8, #0
 800c04a:	bfcc      	ite	gt
 800c04c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c050:	ea03 0901 	andle.w	r9, r3, r1
 800c054:	2200      	movs	r2, #0
 800c056:	2300      	movs	r3, #0
 800c058:	4640      	mov	r0, r8
 800c05a:	4649      	mov	r1, r9
 800c05c:	f7f4 fd5c 	bl	8000b18 <__aeabi_dcmpeq>
 800c060:	2800      	cmp	r0, #0
 800c062:	d1a6      	bne.n	800bfb2 <_strtod_l+0x562>
 800c064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c066:	9300      	str	r3, [sp, #0]
 800c068:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c06a:	4633      	mov	r3, r6
 800c06c:	465a      	mov	r2, fp
 800c06e:	4620      	mov	r0, r4
 800c070:	f7ff f8cc 	bl	800b20c <__s2b>
 800c074:	9009      	str	r0, [sp, #36]	; 0x24
 800c076:	2800      	cmp	r0, #0
 800c078:	f43f af2a 	beq.w	800bed0 <_strtod_l+0x480>
 800c07c:	9a08      	ldr	r2, [sp, #32]
 800c07e:	9b05      	ldr	r3, [sp, #20]
 800c080:	2a00      	cmp	r2, #0
 800c082:	eba3 0307 	sub.w	r3, r3, r7
 800c086:	bfa8      	it	ge
 800c088:	2300      	movge	r3, #0
 800c08a:	930c      	str	r3, [sp, #48]	; 0x30
 800c08c:	2500      	movs	r5, #0
 800c08e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c092:	9312      	str	r3, [sp, #72]	; 0x48
 800c094:	46ab      	mov	fp, r5
 800c096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c098:	4620      	mov	r0, r4
 800c09a:	6859      	ldr	r1, [r3, #4]
 800c09c:	f7ff f80e 	bl	800b0bc <_Balloc>
 800c0a0:	9005      	str	r0, [sp, #20]
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	f43f af18 	beq.w	800bed8 <_strtod_l+0x488>
 800c0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0aa:	691a      	ldr	r2, [r3, #16]
 800c0ac:	3202      	adds	r2, #2
 800c0ae:	f103 010c 	add.w	r1, r3, #12
 800c0b2:	0092      	lsls	r2, r2, #2
 800c0b4:	300c      	adds	r0, #12
 800c0b6:	f000 fd87 	bl	800cbc8 <memcpy>
 800c0ba:	ec49 8b10 	vmov	d0, r8, r9
 800c0be:	aa18      	add	r2, sp, #96	; 0x60
 800c0c0:	a917      	add	r1, sp, #92	; 0x5c
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	f7ff fbd6 	bl	800b874 <__d2b>
 800c0c8:	ec49 8b18 	vmov	d8, r8, r9
 800c0cc:	9016      	str	r0, [sp, #88]	; 0x58
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	f43f af02 	beq.w	800bed8 <_strtod_l+0x488>
 800c0d4:	2101      	movs	r1, #1
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	f7ff f930 	bl	800b33c <__i2b>
 800c0dc:	4683      	mov	fp, r0
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	f43f aefa 	beq.w	800bed8 <_strtod_l+0x488>
 800c0e4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c0e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c0e8:	2e00      	cmp	r6, #0
 800c0ea:	bfab      	itete	ge
 800c0ec:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800c0ee:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800c0f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c0f2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800c0f6:	bfac      	ite	ge
 800c0f8:	eb06 0a03 	addge.w	sl, r6, r3
 800c0fc:	1b9f      	sublt	r7, r3, r6
 800c0fe:	9b04      	ldr	r3, [sp, #16]
 800c100:	1af6      	subs	r6, r6, r3
 800c102:	4416      	add	r6, r2
 800c104:	4ba0      	ldr	r3, [pc, #640]	; (800c388 <_strtod_l+0x938>)
 800c106:	3e01      	subs	r6, #1
 800c108:	429e      	cmp	r6, r3
 800c10a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c10e:	f280 80c4 	bge.w	800c29a <_strtod_l+0x84a>
 800c112:	1b9b      	subs	r3, r3, r6
 800c114:	2b1f      	cmp	r3, #31
 800c116:	eba2 0203 	sub.w	r2, r2, r3
 800c11a:	f04f 0101 	mov.w	r1, #1
 800c11e:	f300 80b0 	bgt.w	800c282 <_strtod_l+0x832>
 800c122:	fa01 f303 	lsl.w	r3, r1, r3
 800c126:	930e      	str	r3, [sp, #56]	; 0x38
 800c128:	2300      	movs	r3, #0
 800c12a:	930d      	str	r3, [sp, #52]	; 0x34
 800c12c:	eb0a 0602 	add.w	r6, sl, r2
 800c130:	9b04      	ldr	r3, [sp, #16]
 800c132:	45b2      	cmp	sl, r6
 800c134:	4417      	add	r7, r2
 800c136:	441f      	add	r7, r3
 800c138:	4653      	mov	r3, sl
 800c13a:	bfa8      	it	ge
 800c13c:	4633      	movge	r3, r6
 800c13e:	42bb      	cmp	r3, r7
 800c140:	bfa8      	it	ge
 800c142:	463b      	movge	r3, r7
 800c144:	2b00      	cmp	r3, #0
 800c146:	bfc2      	ittt	gt
 800c148:	1af6      	subgt	r6, r6, r3
 800c14a:	1aff      	subgt	r7, r7, r3
 800c14c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c152:	2b00      	cmp	r3, #0
 800c154:	dd17      	ble.n	800c186 <_strtod_l+0x736>
 800c156:	4659      	mov	r1, fp
 800c158:	461a      	mov	r2, r3
 800c15a:	4620      	mov	r0, r4
 800c15c:	f7ff f9ae 	bl	800b4bc <__pow5mult>
 800c160:	4683      	mov	fp, r0
 800c162:	2800      	cmp	r0, #0
 800c164:	f43f aeb8 	beq.w	800bed8 <_strtod_l+0x488>
 800c168:	4601      	mov	r1, r0
 800c16a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c16c:	4620      	mov	r0, r4
 800c16e:	f7ff f8fb 	bl	800b368 <__multiply>
 800c172:	900b      	str	r0, [sp, #44]	; 0x2c
 800c174:	2800      	cmp	r0, #0
 800c176:	f43f aeaf 	beq.w	800bed8 <_strtod_l+0x488>
 800c17a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c17c:	4620      	mov	r0, r4
 800c17e:	f7fe ffdd 	bl	800b13c <_Bfree>
 800c182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c184:	9316      	str	r3, [sp, #88]	; 0x58
 800c186:	2e00      	cmp	r6, #0
 800c188:	f300 808c 	bgt.w	800c2a4 <_strtod_l+0x854>
 800c18c:	9b08      	ldr	r3, [sp, #32]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	dd08      	ble.n	800c1a4 <_strtod_l+0x754>
 800c192:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c194:	9905      	ldr	r1, [sp, #20]
 800c196:	4620      	mov	r0, r4
 800c198:	f7ff f990 	bl	800b4bc <__pow5mult>
 800c19c:	9005      	str	r0, [sp, #20]
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	f43f ae9a 	beq.w	800bed8 <_strtod_l+0x488>
 800c1a4:	2f00      	cmp	r7, #0
 800c1a6:	dd08      	ble.n	800c1ba <_strtod_l+0x76a>
 800c1a8:	9905      	ldr	r1, [sp, #20]
 800c1aa:	463a      	mov	r2, r7
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	f7ff f9df 	bl	800b570 <__lshift>
 800c1b2:	9005      	str	r0, [sp, #20]
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	f43f ae8f 	beq.w	800bed8 <_strtod_l+0x488>
 800c1ba:	f1ba 0f00 	cmp.w	sl, #0
 800c1be:	dd08      	ble.n	800c1d2 <_strtod_l+0x782>
 800c1c0:	4659      	mov	r1, fp
 800c1c2:	4652      	mov	r2, sl
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	f7ff f9d3 	bl	800b570 <__lshift>
 800c1ca:	4683      	mov	fp, r0
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	f43f ae83 	beq.w	800bed8 <_strtod_l+0x488>
 800c1d2:	9a05      	ldr	r2, [sp, #20]
 800c1d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	f7ff fa52 	bl	800b680 <__mdiff>
 800c1dc:	4605      	mov	r5, r0
 800c1de:	2800      	cmp	r0, #0
 800c1e0:	f43f ae7a 	beq.w	800bed8 <_strtod_l+0x488>
 800c1e4:	68c3      	ldr	r3, [r0, #12]
 800c1e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	60c3      	str	r3, [r0, #12]
 800c1ec:	4659      	mov	r1, fp
 800c1ee:	f7ff fa2b 	bl	800b648 <__mcmp>
 800c1f2:	2800      	cmp	r0, #0
 800c1f4:	da60      	bge.n	800c2b8 <_strtod_l+0x868>
 800c1f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1f8:	ea53 0308 	orrs.w	r3, r3, r8
 800c1fc:	f040 8084 	bne.w	800c308 <_strtod_l+0x8b8>
 800c200:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c204:	2b00      	cmp	r3, #0
 800c206:	d17f      	bne.n	800c308 <_strtod_l+0x8b8>
 800c208:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c20c:	0d1b      	lsrs	r3, r3, #20
 800c20e:	051b      	lsls	r3, r3, #20
 800c210:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c214:	d978      	bls.n	800c308 <_strtod_l+0x8b8>
 800c216:	696b      	ldr	r3, [r5, #20]
 800c218:	b913      	cbnz	r3, 800c220 <_strtod_l+0x7d0>
 800c21a:	692b      	ldr	r3, [r5, #16]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	dd73      	ble.n	800c308 <_strtod_l+0x8b8>
 800c220:	4629      	mov	r1, r5
 800c222:	2201      	movs	r2, #1
 800c224:	4620      	mov	r0, r4
 800c226:	f7ff f9a3 	bl	800b570 <__lshift>
 800c22a:	4659      	mov	r1, fp
 800c22c:	4605      	mov	r5, r0
 800c22e:	f7ff fa0b 	bl	800b648 <__mcmp>
 800c232:	2800      	cmp	r0, #0
 800c234:	dd68      	ble.n	800c308 <_strtod_l+0x8b8>
 800c236:	9904      	ldr	r1, [sp, #16]
 800c238:	4a54      	ldr	r2, [pc, #336]	; (800c38c <_strtod_l+0x93c>)
 800c23a:	464b      	mov	r3, r9
 800c23c:	2900      	cmp	r1, #0
 800c23e:	f000 8084 	beq.w	800c34a <_strtod_l+0x8fa>
 800c242:	ea02 0109 	and.w	r1, r2, r9
 800c246:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c24a:	dc7e      	bgt.n	800c34a <_strtod_l+0x8fa>
 800c24c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c250:	f77f aeb3 	ble.w	800bfba <_strtod_l+0x56a>
 800c254:	4b4e      	ldr	r3, [pc, #312]	; (800c390 <_strtod_l+0x940>)
 800c256:	4640      	mov	r0, r8
 800c258:	4649      	mov	r1, r9
 800c25a:	2200      	movs	r2, #0
 800c25c:	f7f4 f9f4 	bl	8000648 <__aeabi_dmul>
 800c260:	4b4a      	ldr	r3, [pc, #296]	; (800c38c <_strtod_l+0x93c>)
 800c262:	400b      	ands	r3, r1
 800c264:	4680      	mov	r8, r0
 800c266:	4689      	mov	r9, r1
 800c268:	2b00      	cmp	r3, #0
 800c26a:	f47f ae3f 	bne.w	800beec <_strtod_l+0x49c>
 800c26e:	2322      	movs	r3, #34	; 0x22
 800c270:	6023      	str	r3, [r4, #0]
 800c272:	e63b      	b.n	800beec <_strtod_l+0x49c>
 800c274:	f04f 32ff 	mov.w	r2, #4294967295
 800c278:	fa02 f303 	lsl.w	r3, r2, r3
 800c27c:	ea03 0808 	and.w	r8, r3, r8
 800c280:	e6e8      	b.n	800c054 <_strtod_l+0x604>
 800c282:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c286:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c28a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c28e:	36e2      	adds	r6, #226	; 0xe2
 800c290:	fa01 f306 	lsl.w	r3, r1, r6
 800c294:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c298:	e748      	b.n	800c12c <_strtod_l+0x6dc>
 800c29a:	2100      	movs	r1, #0
 800c29c:	2301      	movs	r3, #1
 800c29e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c2a2:	e743      	b.n	800c12c <_strtod_l+0x6dc>
 800c2a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c2a6:	4632      	mov	r2, r6
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	f7ff f961 	bl	800b570 <__lshift>
 800c2ae:	9016      	str	r0, [sp, #88]	; 0x58
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	f47f af6b 	bne.w	800c18c <_strtod_l+0x73c>
 800c2b6:	e60f      	b.n	800bed8 <_strtod_l+0x488>
 800c2b8:	46ca      	mov	sl, r9
 800c2ba:	d171      	bne.n	800c3a0 <_strtod_l+0x950>
 800c2bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c2be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c2c2:	b352      	cbz	r2, 800c31a <_strtod_l+0x8ca>
 800c2c4:	4a33      	ldr	r2, [pc, #204]	; (800c394 <_strtod_l+0x944>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d12a      	bne.n	800c320 <_strtod_l+0x8d0>
 800c2ca:	9b04      	ldr	r3, [sp, #16]
 800c2cc:	4641      	mov	r1, r8
 800c2ce:	b1fb      	cbz	r3, 800c310 <_strtod_l+0x8c0>
 800c2d0:	4b2e      	ldr	r3, [pc, #184]	; (800c38c <_strtod_l+0x93c>)
 800c2d2:	ea09 0303 	and.w	r3, r9, r3
 800c2d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c2da:	f04f 32ff 	mov.w	r2, #4294967295
 800c2de:	d81a      	bhi.n	800c316 <_strtod_l+0x8c6>
 800c2e0:	0d1b      	lsrs	r3, r3, #20
 800c2e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c2e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c2ea:	4299      	cmp	r1, r3
 800c2ec:	d118      	bne.n	800c320 <_strtod_l+0x8d0>
 800c2ee:	4b2a      	ldr	r3, [pc, #168]	; (800c398 <_strtod_l+0x948>)
 800c2f0:	459a      	cmp	sl, r3
 800c2f2:	d102      	bne.n	800c2fa <_strtod_l+0x8aa>
 800c2f4:	3101      	adds	r1, #1
 800c2f6:	f43f adef 	beq.w	800bed8 <_strtod_l+0x488>
 800c2fa:	4b24      	ldr	r3, [pc, #144]	; (800c38c <_strtod_l+0x93c>)
 800c2fc:	ea0a 0303 	and.w	r3, sl, r3
 800c300:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c304:	f04f 0800 	mov.w	r8, #0
 800c308:	9b04      	ldr	r3, [sp, #16]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d1a2      	bne.n	800c254 <_strtod_l+0x804>
 800c30e:	e5ed      	b.n	800beec <_strtod_l+0x49c>
 800c310:	f04f 33ff 	mov.w	r3, #4294967295
 800c314:	e7e9      	b.n	800c2ea <_strtod_l+0x89a>
 800c316:	4613      	mov	r3, r2
 800c318:	e7e7      	b.n	800c2ea <_strtod_l+0x89a>
 800c31a:	ea53 0308 	orrs.w	r3, r3, r8
 800c31e:	d08a      	beq.n	800c236 <_strtod_l+0x7e6>
 800c320:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c322:	b1e3      	cbz	r3, 800c35e <_strtod_l+0x90e>
 800c324:	ea13 0f0a 	tst.w	r3, sl
 800c328:	d0ee      	beq.n	800c308 <_strtod_l+0x8b8>
 800c32a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c32c:	9a04      	ldr	r2, [sp, #16]
 800c32e:	4640      	mov	r0, r8
 800c330:	4649      	mov	r1, r9
 800c332:	b1c3      	cbz	r3, 800c366 <_strtod_l+0x916>
 800c334:	f7ff fb6f 	bl	800ba16 <sulp>
 800c338:	4602      	mov	r2, r0
 800c33a:	460b      	mov	r3, r1
 800c33c:	ec51 0b18 	vmov	r0, r1, d8
 800c340:	f7f3 ffcc 	bl	80002dc <__adddf3>
 800c344:	4680      	mov	r8, r0
 800c346:	4689      	mov	r9, r1
 800c348:	e7de      	b.n	800c308 <_strtod_l+0x8b8>
 800c34a:	4013      	ands	r3, r2
 800c34c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c350:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c354:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c358:	f04f 38ff 	mov.w	r8, #4294967295
 800c35c:	e7d4      	b.n	800c308 <_strtod_l+0x8b8>
 800c35e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c360:	ea13 0f08 	tst.w	r3, r8
 800c364:	e7e0      	b.n	800c328 <_strtod_l+0x8d8>
 800c366:	f7ff fb56 	bl	800ba16 <sulp>
 800c36a:	4602      	mov	r2, r0
 800c36c:	460b      	mov	r3, r1
 800c36e:	ec51 0b18 	vmov	r0, r1, d8
 800c372:	f7f3 ffb1 	bl	80002d8 <__aeabi_dsub>
 800c376:	2200      	movs	r2, #0
 800c378:	2300      	movs	r3, #0
 800c37a:	4680      	mov	r8, r0
 800c37c:	4689      	mov	r9, r1
 800c37e:	f7f4 fbcb 	bl	8000b18 <__aeabi_dcmpeq>
 800c382:	2800      	cmp	r0, #0
 800c384:	d0c0      	beq.n	800c308 <_strtod_l+0x8b8>
 800c386:	e618      	b.n	800bfba <_strtod_l+0x56a>
 800c388:	fffffc02 	.word	0xfffffc02
 800c38c:	7ff00000 	.word	0x7ff00000
 800c390:	39500000 	.word	0x39500000
 800c394:	000fffff 	.word	0x000fffff
 800c398:	7fefffff 	.word	0x7fefffff
 800c39c:	0800f0c0 	.word	0x0800f0c0
 800c3a0:	4659      	mov	r1, fp
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	f7ff fac0 	bl	800b928 <__ratio>
 800c3a8:	ec57 6b10 	vmov	r6, r7, d0
 800c3ac:	ee10 0a10 	vmov	r0, s0
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c3b6:	4639      	mov	r1, r7
 800c3b8:	f7f4 fbc2 	bl	8000b40 <__aeabi_dcmple>
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	d071      	beq.n	800c4a4 <_strtod_l+0xa54>
 800c3c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d17c      	bne.n	800c4c0 <_strtod_l+0xa70>
 800c3c6:	f1b8 0f00 	cmp.w	r8, #0
 800c3ca:	d15a      	bne.n	800c482 <_strtod_l+0xa32>
 800c3cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d15d      	bne.n	800c490 <_strtod_l+0xa40>
 800c3d4:	4b90      	ldr	r3, [pc, #576]	; (800c618 <_strtod_l+0xbc8>)
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	4630      	mov	r0, r6
 800c3da:	4639      	mov	r1, r7
 800c3dc:	f7f4 fba6 	bl	8000b2c <__aeabi_dcmplt>
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	d15c      	bne.n	800c49e <_strtod_l+0xa4e>
 800c3e4:	4630      	mov	r0, r6
 800c3e6:	4639      	mov	r1, r7
 800c3e8:	4b8c      	ldr	r3, [pc, #560]	; (800c61c <_strtod_l+0xbcc>)
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	f7f4 f92c 	bl	8000648 <__aeabi_dmul>
 800c3f0:	4606      	mov	r6, r0
 800c3f2:	460f      	mov	r7, r1
 800c3f4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c3f8:	9606      	str	r6, [sp, #24]
 800c3fa:	9307      	str	r3, [sp, #28]
 800c3fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c400:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c404:	4b86      	ldr	r3, [pc, #536]	; (800c620 <_strtod_l+0xbd0>)
 800c406:	ea0a 0303 	and.w	r3, sl, r3
 800c40a:	930d      	str	r3, [sp, #52]	; 0x34
 800c40c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c40e:	4b85      	ldr	r3, [pc, #532]	; (800c624 <_strtod_l+0xbd4>)
 800c410:	429a      	cmp	r2, r3
 800c412:	f040 8090 	bne.w	800c536 <_strtod_l+0xae6>
 800c416:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c41a:	ec49 8b10 	vmov	d0, r8, r9
 800c41e:	f7ff f9b9 	bl	800b794 <__ulp>
 800c422:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c426:	ec51 0b10 	vmov	r0, r1, d0
 800c42a:	f7f4 f90d 	bl	8000648 <__aeabi_dmul>
 800c42e:	4642      	mov	r2, r8
 800c430:	464b      	mov	r3, r9
 800c432:	f7f3 ff53 	bl	80002dc <__adddf3>
 800c436:	460b      	mov	r3, r1
 800c438:	4979      	ldr	r1, [pc, #484]	; (800c620 <_strtod_l+0xbd0>)
 800c43a:	4a7b      	ldr	r2, [pc, #492]	; (800c628 <_strtod_l+0xbd8>)
 800c43c:	4019      	ands	r1, r3
 800c43e:	4291      	cmp	r1, r2
 800c440:	4680      	mov	r8, r0
 800c442:	d944      	bls.n	800c4ce <_strtod_l+0xa7e>
 800c444:	ee18 2a90 	vmov	r2, s17
 800c448:	4b78      	ldr	r3, [pc, #480]	; (800c62c <_strtod_l+0xbdc>)
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d104      	bne.n	800c458 <_strtod_l+0xa08>
 800c44e:	ee18 3a10 	vmov	r3, s16
 800c452:	3301      	adds	r3, #1
 800c454:	f43f ad40 	beq.w	800bed8 <_strtod_l+0x488>
 800c458:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c62c <_strtod_l+0xbdc>
 800c45c:	f04f 38ff 	mov.w	r8, #4294967295
 800c460:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c462:	4620      	mov	r0, r4
 800c464:	f7fe fe6a 	bl	800b13c <_Bfree>
 800c468:	9905      	ldr	r1, [sp, #20]
 800c46a:	4620      	mov	r0, r4
 800c46c:	f7fe fe66 	bl	800b13c <_Bfree>
 800c470:	4659      	mov	r1, fp
 800c472:	4620      	mov	r0, r4
 800c474:	f7fe fe62 	bl	800b13c <_Bfree>
 800c478:	4629      	mov	r1, r5
 800c47a:	4620      	mov	r0, r4
 800c47c:	f7fe fe5e 	bl	800b13c <_Bfree>
 800c480:	e609      	b.n	800c096 <_strtod_l+0x646>
 800c482:	f1b8 0f01 	cmp.w	r8, #1
 800c486:	d103      	bne.n	800c490 <_strtod_l+0xa40>
 800c488:	f1b9 0f00 	cmp.w	r9, #0
 800c48c:	f43f ad95 	beq.w	800bfba <_strtod_l+0x56a>
 800c490:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c5e8 <_strtod_l+0xb98>
 800c494:	4f60      	ldr	r7, [pc, #384]	; (800c618 <_strtod_l+0xbc8>)
 800c496:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c49a:	2600      	movs	r6, #0
 800c49c:	e7ae      	b.n	800c3fc <_strtod_l+0x9ac>
 800c49e:	4f5f      	ldr	r7, [pc, #380]	; (800c61c <_strtod_l+0xbcc>)
 800c4a0:	2600      	movs	r6, #0
 800c4a2:	e7a7      	b.n	800c3f4 <_strtod_l+0x9a4>
 800c4a4:	4b5d      	ldr	r3, [pc, #372]	; (800c61c <_strtod_l+0xbcc>)
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	4639      	mov	r1, r7
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	f7f4 f8cc 	bl	8000648 <__aeabi_dmul>
 800c4b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4b2:	4606      	mov	r6, r0
 800c4b4:	460f      	mov	r7, r1
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d09c      	beq.n	800c3f4 <_strtod_l+0x9a4>
 800c4ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c4be:	e79d      	b.n	800c3fc <_strtod_l+0x9ac>
 800c4c0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c5f0 <_strtod_l+0xba0>
 800c4c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c4c8:	ec57 6b17 	vmov	r6, r7, d7
 800c4cc:	e796      	b.n	800c3fc <_strtod_l+0x9ac>
 800c4ce:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c4d2:	9b04      	ldr	r3, [sp, #16]
 800c4d4:	46ca      	mov	sl, r9
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1c2      	bne.n	800c460 <_strtod_l+0xa10>
 800c4da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c4de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c4e0:	0d1b      	lsrs	r3, r3, #20
 800c4e2:	051b      	lsls	r3, r3, #20
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d1bb      	bne.n	800c460 <_strtod_l+0xa10>
 800c4e8:	4630      	mov	r0, r6
 800c4ea:	4639      	mov	r1, r7
 800c4ec:	f7f4 fc0c 	bl	8000d08 <__aeabi_d2lz>
 800c4f0:	f7f4 f87c 	bl	80005ec <__aeabi_l2d>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	4630      	mov	r0, r6
 800c4fa:	4639      	mov	r1, r7
 800c4fc:	f7f3 feec 	bl	80002d8 <__aeabi_dsub>
 800c500:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c502:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c506:	ea43 0308 	orr.w	r3, r3, r8
 800c50a:	4313      	orrs	r3, r2
 800c50c:	4606      	mov	r6, r0
 800c50e:	460f      	mov	r7, r1
 800c510:	d054      	beq.n	800c5bc <_strtod_l+0xb6c>
 800c512:	a339      	add	r3, pc, #228	; (adr r3, 800c5f8 <_strtod_l+0xba8>)
 800c514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c518:	f7f4 fb08 	bl	8000b2c <__aeabi_dcmplt>
 800c51c:	2800      	cmp	r0, #0
 800c51e:	f47f ace5 	bne.w	800beec <_strtod_l+0x49c>
 800c522:	a337      	add	r3, pc, #220	; (adr r3, 800c600 <_strtod_l+0xbb0>)
 800c524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c528:	4630      	mov	r0, r6
 800c52a:	4639      	mov	r1, r7
 800c52c:	f7f4 fb1c 	bl	8000b68 <__aeabi_dcmpgt>
 800c530:	2800      	cmp	r0, #0
 800c532:	d095      	beq.n	800c460 <_strtod_l+0xa10>
 800c534:	e4da      	b.n	800beec <_strtod_l+0x49c>
 800c536:	9b04      	ldr	r3, [sp, #16]
 800c538:	b333      	cbz	r3, 800c588 <_strtod_l+0xb38>
 800c53a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c53c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c540:	d822      	bhi.n	800c588 <_strtod_l+0xb38>
 800c542:	a331      	add	r3, pc, #196	; (adr r3, 800c608 <_strtod_l+0xbb8>)
 800c544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c548:	4630      	mov	r0, r6
 800c54a:	4639      	mov	r1, r7
 800c54c:	f7f4 faf8 	bl	8000b40 <__aeabi_dcmple>
 800c550:	b1a0      	cbz	r0, 800c57c <_strtod_l+0xb2c>
 800c552:	4639      	mov	r1, r7
 800c554:	4630      	mov	r0, r6
 800c556:	f7f4 fb4f 	bl	8000bf8 <__aeabi_d2uiz>
 800c55a:	2801      	cmp	r0, #1
 800c55c:	bf38      	it	cc
 800c55e:	2001      	movcc	r0, #1
 800c560:	f7f3 fff8 	bl	8000554 <__aeabi_ui2d>
 800c564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c566:	4606      	mov	r6, r0
 800c568:	460f      	mov	r7, r1
 800c56a:	bb23      	cbnz	r3, 800c5b6 <_strtod_l+0xb66>
 800c56c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c570:	9010      	str	r0, [sp, #64]	; 0x40
 800c572:	9311      	str	r3, [sp, #68]	; 0x44
 800c574:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c578:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c57c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c57e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c580:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c584:	1a9b      	subs	r3, r3, r2
 800c586:	930f      	str	r3, [sp, #60]	; 0x3c
 800c588:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c58c:	eeb0 0a48 	vmov.f32	s0, s16
 800c590:	eef0 0a68 	vmov.f32	s1, s17
 800c594:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c598:	f7ff f8fc 	bl	800b794 <__ulp>
 800c59c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c5a0:	ec53 2b10 	vmov	r2, r3, d0
 800c5a4:	f7f4 f850 	bl	8000648 <__aeabi_dmul>
 800c5a8:	ec53 2b18 	vmov	r2, r3, d8
 800c5ac:	f7f3 fe96 	bl	80002dc <__adddf3>
 800c5b0:	4680      	mov	r8, r0
 800c5b2:	4689      	mov	r9, r1
 800c5b4:	e78d      	b.n	800c4d2 <_strtod_l+0xa82>
 800c5b6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c5ba:	e7db      	b.n	800c574 <_strtod_l+0xb24>
 800c5bc:	a314      	add	r3, pc, #80	; (adr r3, 800c610 <_strtod_l+0xbc0>)
 800c5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c2:	f7f4 fab3 	bl	8000b2c <__aeabi_dcmplt>
 800c5c6:	e7b3      	b.n	800c530 <_strtod_l+0xae0>
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	930a      	str	r3, [sp, #40]	; 0x28
 800c5cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c5ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5d0:	6013      	str	r3, [r2, #0]
 800c5d2:	f7ff ba7c 	b.w	800bace <_strtod_l+0x7e>
 800c5d6:	2a65      	cmp	r2, #101	; 0x65
 800c5d8:	f43f ab75 	beq.w	800bcc6 <_strtod_l+0x276>
 800c5dc:	2a45      	cmp	r2, #69	; 0x45
 800c5de:	f43f ab72 	beq.w	800bcc6 <_strtod_l+0x276>
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	f7ff bbaa 	b.w	800bd3c <_strtod_l+0x2ec>
 800c5e8:	00000000 	.word	0x00000000
 800c5ec:	bff00000 	.word	0xbff00000
 800c5f0:	00000000 	.word	0x00000000
 800c5f4:	3ff00000 	.word	0x3ff00000
 800c5f8:	94a03595 	.word	0x94a03595
 800c5fc:	3fdfffff 	.word	0x3fdfffff
 800c600:	35afe535 	.word	0x35afe535
 800c604:	3fe00000 	.word	0x3fe00000
 800c608:	ffc00000 	.word	0xffc00000
 800c60c:	41dfffff 	.word	0x41dfffff
 800c610:	94a03595 	.word	0x94a03595
 800c614:	3fcfffff 	.word	0x3fcfffff
 800c618:	3ff00000 	.word	0x3ff00000
 800c61c:	3fe00000 	.word	0x3fe00000
 800c620:	7ff00000 	.word	0x7ff00000
 800c624:	7fe00000 	.word	0x7fe00000
 800c628:	7c9fffff 	.word	0x7c9fffff
 800c62c:	7fefffff 	.word	0x7fefffff

0800c630 <_strtod_r>:
 800c630:	4b01      	ldr	r3, [pc, #4]	; (800c638 <_strtod_r+0x8>)
 800c632:	f7ff ba0d 	b.w	800ba50 <_strtod_l>
 800c636:	bf00      	nop
 800c638:	20000078 	.word	0x20000078

0800c63c <_strtol_l.constprop.0>:
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c642:	d001      	beq.n	800c648 <_strtol_l.constprop.0+0xc>
 800c644:	2b24      	cmp	r3, #36	; 0x24
 800c646:	d906      	bls.n	800c656 <_strtol_l.constprop.0+0x1a>
 800c648:	f7fd fd88 	bl	800a15c <__errno>
 800c64c:	2316      	movs	r3, #22
 800c64e:	6003      	str	r3, [r0, #0]
 800c650:	2000      	movs	r0, #0
 800c652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c656:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c73c <_strtol_l.constprop.0+0x100>
 800c65a:	460d      	mov	r5, r1
 800c65c:	462e      	mov	r6, r5
 800c65e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c662:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c666:	f017 0708 	ands.w	r7, r7, #8
 800c66a:	d1f7      	bne.n	800c65c <_strtol_l.constprop.0+0x20>
 800c66c:	2c2d      	cmp	r4, #45	; 0x2d
 800c66e:	d132      	bne.n	800c6d6 <_strtol_l.constprop.0+0x9a>
 800c670:	782c      	ldrb	r4, [r5, #0]
 800c672:	2701      	movs	r7, #1
 800c674:	1cb5      	adds	r5, r6, #2
 800c676:	2b00      	cmp	r3, #0
 800c678:	d05b      	beq.n	800c732 <_strtol_l.constprop.0+0xf6>
 800c67a:	2b10      	cmp	r3, #16
 800c67c:	d109      	bne.n	800c692 <_strtol_l.constprop.0+0x56>
 800c67e:	2c30      	cmp	r4, #48	; 0x30
 800c680:	d107      	bne.n	800c692 <_strtol_l.constprop.0+0x56>
 800c682:	782c      	ldrb	r4, [r5, #0]
 800c684:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c688:	2c58      	cmp	r4, #88	; 0x58
 800c68a:	d14d      	bne.n	800c728 <_strtol_l.constprop.0+0xec>
 800c68c:	786c      	ldrb	r4, [r5, #1]
 800c68e:	2310      	movs	r3, #16
 800c690:	3502      	adds	r5, #2
 800c692:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c696:	f108 38ff 	add.w	r8, r8, #4294967295
 800c69a:	f04f 0e00 	mov.w	lr, #0
 800c69e:	fbb8 f9f3 	udiv	r9, r8, r3
 800c6a2:	4676      	mov	r6, lr
 800c6a4:	fb03 8a19 	mls	sl, r3, r9, r8
 800c6a8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c6ac:	f1bc 0f09 	cmp.w	ip, #9
 800c6b0:	d816      	bhi.n	800c6e0 <_strtol_l.constprop.0+0xa4>
 800c6b2:	4664      	mov	r4, ip
 800c6b4:	42a3      	cmp	r3, r4
 800c6b6:	dd24      	ble.n	800c702 <_strtol_l.constprop.0+0xc6>
 800c6b8:	f1be 3fff 	cmp.w	lr, #4294967295
 800c6bc:	d008      	beq.n	800c6d0 <_strtol_l.constprop.0+0x94>
 800c6be:	45b1      	cmp	r9, r6
 800c6c0:	d31c      	bcc.n	800c6fc <_strtol_l.constprop.0+0xc0>
 800c6c2:	d101      	bne.n	800c6c8 <_strtol_l.constprop.0+0x8c>
 800c6c4:	45a2      	cmp	sl, r4
 800c6c6:	db19      	blt.n	800c6fc <_strtol_l.constprop.0+0xc0>
 800c6c8:	fb06 4603 	mla	r6, r6, r3, r4
 800c6cc:	f04f 0e01 	mov.w	lr, #1
 800c6d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c6d4:	e7e8      	b.n	800c6a8 <_strtol_l.constprop.0+0x6c>
 800c6d6:	2c2b      	cmp	r4, #43	; 0x2b
 800c6d8:	bf04      	itt	eq
 800c6da:	782c      	ldrbeq	r4, [r5, #0]
 800c6dc:	1cb5      	addeq	r5, r6, #2
 800c6de:	e7ca      	b.n	800c676 <_strtol_l.constprop.0+0x3a>
 800c6e0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c6e4:	f1bc 0f19 	cmp.w	ip, #25
 800c6e8:	d801      	bhi.n	800c6ee <_strtol_l.constprop.0+0xb2>
 800c6ea:	3c37      	subs	r4, #55	; 0x37
 800c6ec:	e7e2      	b.n	800c6b4 <_strtol_l.constprop.0+0x78>
 800c6ee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c6f2:	f1bc 0f19 	cmp.w	ip, #25
 800c6f6:	d804      	bhi.n	800c702 <_strtol_l.constprop.0+0xc6>
 800c6f8:	3c57      	subs	r4, #87	; 0x57
 800c6fa:	e7db      	b.n	800c6b4 <_strtol_l.constprop.0+0x78>
 800c6fc:	f04f 3eff 	mov.w	lr, #4294967295
 800c700:	e7e6      	b.n	800c6d0 <_strtol_l.constprop.0+0x94>
 800c702:	f1be 3fff 	cmp.w	lr, #4294967295
 800c706:	d105      	bne.n	800c714 <_strtol_l.constprop.0+0xd8>
 800c708:	2322      	movs	r3, #34	; 0x22
 800c70a:	6003      	str	r3, [r0, #0]
 800c70c:	4646      	mov	r6, r8
 800c70e:	b942      	cbnz	r2, 800c722 <_strtol_l.constprop.0+0xe6>
 800c710:	4630      	mov	r0, r6
 800c712:	e79e      	b.n	800c652 <_strtol_l.constprop.0+0x16>
 800c714:	b107      	cbz	r7, 800c718 <_strtol_l.constprop.0+0xdc>
 800c716:	4276      	negs	r6, r6
 800c718:	2a00      	cmp	r2, #0
 800c71a:	d0f9      	beq.n	800c710 <_strtol_l.constprop.0+0xd4>
 800c71c:	f1be 0f00 	cmp.w	lr, #0
 800c720:	d000      	beq.n	800c724 <_strtol_l.constprop.0+0xe8>
 800c722:	1e69      	subs	r1, r5, #1
 800c724:	6011      	str	r1, [r2, #0]
 800c726:	e7f3      	b.n	800c710 <_strtol_l.constprop.0+0xd4>
 800c728:	2430      	movs	r4, #48	; 0x30
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d1b1      	bne.n	800c692 <_strtol_l.constprop.0+0x56>
 800c72e:	2308      	movs	r3, #8
 800c730:	e7af      	b.n	800c692 <_strtol_l.constprop.0+0x56>
 800c732:	2c30      	cmp	r4, #48	; 0x30
 800c734:	d0a5      	beq.n	800c682 <_strtol_l.constprop.0+0x46>
 800c736:	230a      	movs	r3, #10
 800c738:	e7ab      	b.n	800c692 <_strtol_l.constprop.0+0x56>
 800c73a:	bf00      	nop
 800c73c:	0800f0e9 	.word	0x0800f0e9

0800c740 <_strtol_r>:
 800c740:	f7ff bf7c 	b.w	800c63c <_strtol_l.constprop.0>

0800c744 <__ssputs_r>:
 800c744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c748:	688e      	ldr	r6, [r1, #8]
 800c74a:	461f      	mov	r7, r3
 800c74c:	42be      	cmp	r6, r7
 800c74e:	680b      	ldr	r3, [r1, #0]
 800c750:	4682      	mov	sl, r0
 800c752:	460c      	mov	r4, r1
 800c754:	4690      	mov	r8, r2
 800c756:	d82c      	bhi.n	800c7b2 <__ssputs_r+0x6e>
 800c758:	898a      	ldrh	r2, [r1, #12]
 800c75a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c75e:	d026      	beq.n	800c7ae <__ssputs_r+0x6a>
 800c760:	6965      	ldr	r5, [r4, #20]
 800c762:	6909      	ldr	r1, [r1, #16]
 800c764:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c768:	eba3 0901 	sub.w	r9, r3, r1
 800c76c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c770:	1c7b      	adds	r3, r7, #1
 800c772:	444b      	add	r3, r9
 800c774:	106d      	asrs	r5, r5, #1
 800c776:	429d      	cmp	r5, r3
 800c778:	bf38      	it	cc
 800c77a:	461d      	movcc	r5, r3
 800c77c:	0553      	lsls	r3, r2, #21
 800c77e:	d527      	bpl.n	800c7d0 <__ssputs_r+0x8c>
 800c780:	4629      	mov	r1, r5
 800c782:	f7fe fc0f 	bl	800afa4 <_malloc_r>
 800c786:	4606      	mov	r6, r0
 800c788:	b360      	cbz	r0, 800c7e4 <__ssputs_r+0xa0>
 800c78a:	6921      	ldr	r1, [r4, #16]
 800c78c:	464a      	mov	r2, r9
 800c78e:	f000 fa1b 	bl	800cbc8 <memcpy>
 800c792:	89a3      	ldrh	r3, [r4, #12]
 800c794:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c79c:	81a3      	strh	r3, [r4, #12]
 800c79e:	6126      	str	r6, [r4, #16]
 800c7a0:	6165      	str	r5, [r4, #20]
 800c7a2:	444e      	add	r6, r9
 800c7a4:	eba5 0509 	sub.w	r5, r5, r9
 800c7a8:	6026      	str	r6, [r4, #0]
 800c7aa:	60a5      	str	r5, [r4, #8]
 800c7ac:	463e      	mov	r6, r7
 800c7ae:	42be      	cmp	r6, r7
 800c7b0:	d900      	bls.n	800c7b4 <__ssputs_r+0x70>
 800c7b2:	463e      	mov	r6, r7
 800c7b4:	6820      	ldr	r0, [r4, #0]
 800c7b6:	4632      	mov	r2, r6
 800c7b8:	4641      	mov	r1, r8
 800c7ba:	f000 f9c9 	bl	800cb50 <memmove>
 800c7be:	68a3      	ldr	r3, [r4, #8]
 800c7c0:	1b9b      	subs	r3, r3, r6
 800c7c2:	60a3      	str	r3, [r4, #8]
 800c7c4:	6823      	ldr	r3, [r4, #0]
 800c7c6:	4433      	add	r3, r6
 800c7c8:	6023      	str	r3, [r4, #0]
 800c7ca:	2000      	movs	r0, #0
 800c7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7d0:	462a      	mov	r2, r5
 800c7d2:	f000 fdae 	bl	800d332 <_realloc_r>
 800c7d6:	4606      	mov	r6, r0
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	d1e0      	bne.n	800c79e <__ssputs_r+0x5a>
 800c7dc:	6921      	ldr	r1, [r4, #16]
 800c7de:	4650      	mov	r0, sl
 800c7e0:	f7fe fb6c 	bl	800aebc <_free_r>
 800c7e4:	230c      	movs	r3, #12
 800c7e6:	f8ca 3000 	str.w	r3, [sl]
 800c7ea:	89a3      	ldrh	r3, [r4, #12]
 800c7ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7f0:	81a3      	strh	r3, [r4, #12]
 800c7f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c7f6:	e7e9      	b.n	800c7cc <__ssputs_r+0x88>

0800c7f8 <_svfiprintf_r>:
 800c7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7fc:	4698      	mov	r8, r3
 800c7fe:	898b      	ldrh	r3, [r1, #12]
 800c800:	061b      	lsls	r3, r3, #24
 800c802:	b09d      	sub	sp, #116	; 0x74
 800c804:	4607      	mov	r7, r0
 800c806:	460d      	mov	r5, r1
 800c808:	4614      	mov	r4, r2
 800c80a:	d50e      	bpl.n	800c82a <_svfiprintf_r+0x32>
 800c80c:	690b      	ldr	r3, [r1, #16]
 800c80e:	b963      	cbnz	r3, 800c82a <_svfiprintf_r+0x32>
 800c810:	2140      	movs	r1, #64	; 0x40
 800c812:	f7fe fbc7 	bl	800afa4 <_malloc_r>
 800c816:	6028      	str	r0, [r5, #0]
 800c818:	6128      	str	r0, [r5, #16]
 800c81a:	b920      	cbnz	r0, 800c826 <_svfiprintf_r+0x2e>
 800c81c:	230c      	movs	r3, #12
 800c81e:	603b      	str	r3, [r7, #0]
 800c820:	f04f 30ff 	mov.w	r0, #4294967295
 800c824:	e0d0      	b.n	800c9c8 <_svfiprintf_r+0x1d0>
 800c826:	2340      	movs	r3, #64	; 0x40
 800c828:	616b      	str	r3, [r5, #20]
 800c82a:	2300      	movs	r3, #0
 800c82c:	9309      	str	r3, [sp, #36]	; 0x24
 800c82e:	2320      	movs	r3, #32
 800c830:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c834:	f8cd 800c 	str.w	r8, [sp, #12]
 800c838:	2330      	movs	r3, #48	; 0x30
 800c83a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c9e0 <_svfiprintf_r+0x1e8>
 800c83e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c842:	f04f 0901 	mov.w	r9, #1
 800c846:	4623      	mov	r3, r4
 800c848:	469a      	mov	sl, r3
 800c84a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c84e:	b10a      	cbz	r2, 800c854 <_svfiprintf_r+0x5c>
 800c850:	2a25      	cmp	r2, #37	; 0x25
 800c852:	d1f9      	bne.n	800c848 <_svfiprintf_r+0x50>
 800c854:	ebba 0b04 	subs.w	fp, sl, r4
 800c858:	d00b      	beq.n	800c872 <_svfiprintf_r+0x7a>
 800c85a:	465b      	mov	r3, fp
 800c85c:	4622      	mov	r2, r4
 800c85e:	4629      	mov	r1, r5
 800c860:	4638      	mov	r0, r7
 800c862:	f7ff ff6f 	bl	800c744 <__ssputs_r>
 800c866:	3001      	adds	r0, #1
 800c868:	f000 80a9 	beq.w	800c9be <_svfiprintf_r+0x1c6>
 800c86c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c86e:	445a      	add	r2, fp
 800c870:	9209      	str	r2, [sp, #36]	; 0x24
 800c872:	f89a 3000 	ldrb.w	r3, [sl]
 800c876:	2b00      	cmp	r3, #0
 800c878:	f000 80a1 	beq.w	800c9be <_svfiprintf_r+0x1c6>
 800c87c:	2300      	movs	r3, #0
 800c87e:	f04f 32ff 	mov.w	r2, #4294967295
 800c882:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c886:	f10a 0a01 	add.w	sl, sl, #1
 800c88a:	9304      	str	r3, [sp, #16]
 800c88c:	9307      	str	r3, [sp, #28]
 800c88e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c892:	931a      	str	r3, [sp, #104]	; 0x68
 800c894:	4654      	mov	r4, sl
 800c896:	2205      	movs	r2, #5
 800c898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c89c:	4850      	ldr	r0, [pc, #320]	; (800c9e0 <_svfiprintf_r+0x1e8>)
 800c89e:	f7f3 fcbf 	bl	8000220 <memchr>
 800c8a2:	9a04      	ldr	r2, [sp, #16]
 800c8a4:	b9d8      	cbnz	r0, 800c8de <_svfiprintf_r+0xe6>
 800c8a6:	06d0      	lsls	r0, r2, #27
 800c8a8:	bf44      	itt	mi
 800c8aa:	2320      	movmi	r3, #32
 800c8ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8b0:	0711      	lsls	r1, r2, #28
 800c8b2:	bf44      	itt	mi
 800c8b4:	232b      	movmi	r3, #43	; 0x2b
 800c8b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8ba:	f89a 3000 	ldrb.w	r3, [sl]
 800c8be:	2b2a      	cmp	r3, #42	; 0x2a
 800c8c0:	d015      	beq.n	800c8ee <_svfiprintf_r+0xf6>
 800c8c2:	9a07      	ldr	r2, [sp, #28]
 800c8c4:	4654      	mov	r4, sl
 800c8c6:	2000      	movs	r0, #0
 800c8c8:	f04f 0c0a 	mov.w	ip, #10
 800c8cc:	4621      	mov	r1, r4
 800c8ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8d2:	3b30      	subs	r3, #48	; 0x30
 800c8d4:	2b09      	cmp	r3, #9
 800c8d6:	d94d      	bls.n	800c974 <_svfiprintf_r+0x17c>
 800c8d8:	b1b0      	cbz	r0, 800c908 <_svfiprintf_r+0x110>
 800c8da:	9207      	str	r2, [sp, #28]
 800c8dc:	e014      	b.n	800c908 <_svfiprintf_r+0x110>
 800c8de:	eba0 0308 	sub.w	r3, r0, r8
 800c8e2:	fa09 f303 	lsl.w	r3, r9, r3
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	9304      	str	r3, [sp, #16]
 800c8ea:	46a2      	mov	sl, r4
 800c8ec:	e7d2      	b.n	800c894 <_svfiprintf_r+0x9c>
 800c8ee:	9b03      	ldr	r3, [sp, #12]
 800c8f0:	1d19      	adds	r1, r3, #4
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	9103      	str	r1, [sp, #12]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	bfbb      	ittet	lt
 800c8fa:	425b      	neglt	r3, r3
 800c8fc:	f042 0202 	orrlt.w	r2, r2, #2
 800c900:	9307      	strge	r3, [sp, #28]
 800c902:	9307      	strlt	r3, [sp, #28]
 800c904:	bfb8      	it	lt
 800c906:	9204      	strlt	r2, [sp, #16]
 800c908:	7823      	ldrb	r3, [r4, #0]
 800c90a:	2b2e      	cmp	r3, #46	; 0x2e
 800c90c:	d10c      	bne.n	800c928 <_svfiprintf_r+0x130>
 800c90e:	7863      	ldrb	r3, [r4, #1]
 800c910:	2b2a      	cmp	r3, #42	; 0x2a
 800c912:	d134      	bne.n	800c97e <_svfiprintf_r+0x186>
 800c914:	9b03      	ldr	r3, [sp, #12]
 800c916:	1d1a      	adds	r2, r3, #4
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	9203      	str	r2, [sp, #12]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	bfb8      	it	lt
 800c920:	f04f 33ff 	movlt.w	r3, #4294967295
 800c924:	3402      	adds	r4, #2
 800c926:	9305      	str	r3, [sp, #20]
 800c928:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c9f0 <_svfiprintf_r+0x1f8>
 800c92c:	7821      	ldrb	r1, [r4, #0]
 800c92e:	2203      	movs	r2, #3
 800c930:	4650      	mov	r0, sl
 800c932:	f7f3 fc75 	bl	8000220 <memchr>
 800c936:	b138      	cbz	r0, 800c948 <_svfiprintf_r+0x150>
 800c938:	9b04      	ldr	r3, [sp, #16]
 800c93a:	eba0 000a 	sub.w	r0, r0, sl
 800c93e:	2240      	movs	r2, #64	; 0x40
 800c940:	4082      	lsls	r2, r0
 800c942:	4313      	orrs	r3, r2
 800c944:	3401      	adds	r4, #1
 800c946:	9304      	str	r3, [sp, #16]
 800c948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c94c:	4825      	ldr	r0, [pc, #148]	; (800c9e4 <_svfiprintf_r+0x1ec>)
 800c94e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c952:	2206      	movs	r2, #6
 800c954:	f7f3 fc64 	bl	8000220 <memchr>
 800c958:	2800      	cmp	r0, #0
 800c95a:	d038      	beq.n	800c9ce <_svfiprintf_r+0x1d6>
 800c95c:	4b22      	ldr	r3, [pc, #136]	; (800c9e8 <_svfiprintf_r+0x1f0>)
 800c95e:	bb1b      	cbnz	r3, 800c9a8 <_svfiprintf_r+0x1b0>
 800c960:	9b03      	ldr	r3, [sp, #12]
 800c962:	3307      	adds	r3, #7
 800c964:	f023 0307 	bic.w	r3, r3, #7
 800c968:	3308      	adds	r3, #8
 800c96a:	9303      	str	r3, [sp, #12]
 800c96c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c96e:	4433      	add	r3, r6
 800c970:	9309      	str	r3, [sp, #36]	; 0x24
 800c972:	e768      	b.n	800c846 <_svfiprintf_r+0x4e>
 800c974:	fb0c 3202 	mla	r2, ip, r2, r3
 800c978:	460c      	mov	r4, r1
 800c97a:	2001      	movs	r0, #1
 800c97c:	e7a6      	b.n	800c8cc <_svfiprintf_r+0xd4>
 800c97e:	2300      	movs	r3, #0
 800c980:	3401      	adds	r4, #1
 800c982:	9305      	str	r3, [sp, #20]
 800c984:	4619      	mov	r1, r3
 800c986:	f04f 0c0a 	mov.w	ip, #10
 800c98a:	4620      	mov	r0, r4
 800c98c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c990:	3a30      	subs	r2, #48	; 0x30
 800c992:	2a09      	cmp	r2, #9
 800c994:	d903      	bls.n	800c99e <_svfiprintf_r+0x1a6>
 800c996:	2b00      	cmp	r3, #0
 800c998:	d0c6      	beq.n	800c928 <_svfiprintf_r+0x130>
 800c99a:	9105      	str	r1, [sp, #20]
 800c99c:	e7c4      	b.n	800c928 <_svfiprintf_r+0x130>
 800c99e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9a2:	4604      	mov	r4, r0
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	e7f0      	b.n	800c98a <_svfiprintf_r+0x192>
 800c9a8:	ab03      	add	r3, sp, #12
 800c9aa:	9300      	str	r3, [sp, #0]
 800c9ac:	462a      	mov	r2, r5
 800c9ae:	4b0f      	ldr	r3, [pc, #60]	; (800c9ec <_svfiprintf_r+0x1f4>)
 800c9b0:	a904      	add	r1, sp, #16
 800c9b2:	4638      	mov	r0, r7
 800c9b4:	f7fc fc84 	bl	80092c0 <_printf_float>
 800c9b8:	1c42      	adds	r2, r0, #1
 800c9ba:	4606      	mov	r6, r0
 800c9bc:	d1d6      	bne.n	800c96c <_svfiprintf_r+0x174>
 800c9be:	89ab      	ldrh	r3, [r5, #12]
 800c9c0:	065b      	lsls	r3, r3, #25
 800c9c2:	f53f af2d 	bmi.w	800c820 <_svfiprintf_r+0x28>
 800c9c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9c8:	b01d      	add	sp, #116	; 0x74
 800c9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ce:	ab03      	add	r3, sp, #12
 800c9d0:	9300      	str	r3, [sp, #0]
 800c9d2:	462a      	mov	r2, r5
 800c9d4:	4b05      	ldr	r3, [pc, #20]	; (800c9ec <_svfiprintf_r+0x1f4>)
 800c9d6:	a904      	add	r1, sp, #16
 800c9d8:	4638      	mov	r0, r7
 800c9da:	f7fc ff15 	bl	8009808 <_printf_i>
 800c9de:	e7eb      	b.n	800c9b8 <_svfiprintf_r+0x1c0>
 800c9e0:	0800f1e9 	.word	0x0800f1e9
 800c9e4:	0800f1f3 	.word	0x0800f1f3
 800c9e8:	080092c1 	.word	0x080092c1
 800c9ec:	0800c745 	.word	0x0800c745
 800c9f0:	0800f1ef 	.word	0x0800f1ef

0800c9f4 <__sflush_r>:
 800c9f4:	898a      	ldrh	r2, [r1, #12]
 800c9f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9fa:	4605      	mov	r5, r0
 800c9fc:	0710      	lsls	r0, r2, #28
 800c9fe:	460c      	mov	r4, r1
 800ca00:	d458      	bmi.n	800cab4 <__sflush_r+0xc0>
 800ca02:	684b      	ldr	r3, [r1, #4]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	dc05      	bgt.n	800ca14 <__sflush_r+0x20>
 800ca08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	dc02      	bgt.n	800ca14 <__sflush_r+0x20>
 800ca0e:	2000      	movs	r0, #0
 800ca10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca16:	2e00      	cmp	r6, #0
 800ca18:	d0f9      	beq.n	800ca0e <__sflush_r+0x1a>
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ca20:	682f      	ldr	r7, [r5, #0]
 800ca22:	6a21      	ldr	r1, [r4, #32]
 800ca24:	602b      	str	r3, [r5, #0]
 800ca26:	d032      	beq.n	800ca8e <__sflush_r+0x9a>
 800ca28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ca2a:	89a3      	ldrh	r3, [r4, #12]
 800ca2c:	075a      	lsls	r2, r3, #29
 800ca2e:	d505      	bpl.n	800ca3c <__sflush_r+0x48>
 800ca30:	6863      	ldr	r3, [r4, #4]
 800ca32:	1ac0      	subs	r0, r0, r3
 800ca34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca36:	b10b      	cbz	r3, 800ca3c <__sflush_r+0x48>
 800ca38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca3a:	1ac0      	subs	r0, r0, r3
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	4602      	mov	r2, r0
 800ca40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca42:	6a21      	ldr	r1, [r4, #32]
 800ca44:	4628      	mov	r0, r5
 800ca46:	47b0      	blx	r6
 800ca48:	1c43      	adds	r3, r0, #1
 800ca4a:	89a3      	ldrh	r3, [r4, #12]
 800ca4c:	d106      	bne.n	800ca5c <__sflush_r+0x68>
 800ca4e:	6829      	ldr	r1, [r5, #0]
 800ca50:	291d      	cmp	r1, #29
 800ca52:	d82b      	bhi.n	800caac <__sflush_r+0xb8>
 800ca54:	4a29      	ldr	r2, [pc, #164]	; (800cafc <__sflush_r+0x108>)
 800ca56:	410a      	asrs	r2, r1
 800ca58:	07d6      	lsls	r6, r2, #31
 800ca5a:	d427      	bmi.n	800caac <__sflush_r+0xb8>
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	6062      	str	r2, [r4, #4]
 800ca60:	04d9      	lsls	r1, r3, #19
 800ca62:	6922      	ldr	r2, [r4, #16]
 800ca64:	6022      	str	r2, [r4, #0]
 800ca66:	d504      	bpl.n	800ca72 <__sflush_r+0x7e>
 800ca68:	1c42      	adds	r2, r0, #1
 800ca6a:	d101      	bne.n	800ca70 <__sflush_r+0x7c>
 800ca6c:	682b      	ldr	r3, [r5, #0]
 800ca6e:	b903      	cbnz	r3, 800ca72 <__sflush_r+0x7e>
 800ca70:	6560      	str	r0, [r4, #84]	; 0x54
 800ca72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca74:	602f      	str	r7, [r5, #0]
 800ca76:	2900      	cmp	r1, #0
 800ca78:	d0c9      	beq.n	800ca0e <__sflush_r+0x1a>
 800ca7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca7e:	4299      	cmp	r1, r3
 800ca80:	d002      	beq.n	800ca88 <__sflush_r+0x94>
 800ca82:	4628      	mov	r0, r5
 800ca84:	f7fe fa1a 	bl	800aebc <_free_r>
 800ca88:	2000      	movs	r0, #0
 800ca8a:	6360      	str	r0, [r4, #52]	; 0x34
 800ca8c:	e7c0      	b.n	800ca10 <__sflush_r+0x1c>
 800ca8e:	2301      	movs	r3, #1
 800ca90:	4628      	mov	r0, r5
 800ca92:	47b0      	blx	r6
 800ca94:	1c41      	adds	r1, r0, #1
 800ca96:	d1c8      	bne.n	800ca2a <__sflush_r+0x36>
 800ca98:	682b      	ldr	r3, [r5, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d0c5      	beq.n	800ca2a <__sflush_r+0x36>
 800ca9e:	2b1d      	cmp	r3, #29
 800caa0:	d001      	beq.n	800caa6 <__sflush_r+0xb2>
 800caa2:	2b16      	cmp	r3, #22
 800caa4:	d101      	bne.n	800caaa <__sflush_r+0xb6>
 800caa6:	602f      	str	r7, [r5, #0]
 800caa8:	e7b1      	b.n	800ca0e <__sflush_r+0x1a>
 800caaa:	89a3      	ldrh	r3, [r4, #12]
 800caac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cab0:	81a3      	strh	r3, [r4, #12]
 800cab2:	e7ad      	b.n	800ca10 <__sflush_r+0x1c>
 800cab4:	690f      	ldr	r7, [r1, #16]
 800cab6:	2f00      	cmp	r7, #0
 800cab8:	d0a9      	beq.n	800ca0e <__sflush_r+0x1a>
 800caba:	0793      	lsls	r3, r2, #30
 800cabc:	680e      	ldr	r6, [r1, #0]
 800cabe:	bf08      	it	eq
 800cac0:	694b      	ldreq	r3, [r1, #20]
 800cac2:	600f      	str	r7, [r1, #0]
 800cac4:	bf18      	it	ne
 800cac6:	2300      	movne	r3, #0
 800cac8:	eba6 0807 	sub.w	r8, r6, r7
 800cacc:	608b      	str	r3, [r1, #8]
 800cace:	f1b8 0f00 	cmp.w	r8, #0
 800cad2:	dd9c      	ble.n	800ca0e <__sflush_r+0x1a>
 800cad4:	6a21      	ldr	r1, [r4, #32]
 800cad6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cad8:	4643      	mov	r3, r8
 800cada:	463a      	mov	r2, r7
 800cadc:	4628      	mov	r0, r5
 800cade:	47b0      	blx	r6
 800cae0:	2800      	cmp	r0, #0
 800cae2:	dc06      	bgt.n	800caf2 <__sflush_r+0xfe>
 800cae4:	89a3      	ldrh	r3, [r4, #12]
 800cae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caea:	81a3      	strh	r3, [r4, #12]
 800caec:	f04f 30ff 	mov.w	r0, #4294967295
 800caf0:	e78e      	b.n	800ca10 <__sflush_r+0x1c>
 800caf2:	4407      	add	r7, r0
 800caf4:	eba8 0800 	sub.w	r8, r8, r0
 800caf8:	e7e9      	b.n	800cace <__sflush_r+0xda>
 800cafa:	bf00      	nop
 800cafc:	dfbffffe 	.word	0xdfbffffe

0800cb00 <_fflush_r>:
 800cb00:	b538      	push	{r3, r4, r5, lr}
 800cb02:	690b      	ldr	r3, [r1, #16]
 800cb04:	4605      	mov	r5, r0
 800cb06:	460c      	mov	r4, r1
 800cb08:	b913      	cbnz	r3, 800cb10 <_fflush_r+0x10>
 800cb0a:	2500      	movs	r5, #0
 800cb0c:	4628      	mov	r0, r5
 800cb0e:	bd38      	pop	{r3, r4, r5, pc}
 800cb10:	b118      	cbz	r0, 800cb1a <_fflush_r+0x1a>
 800cb12:	6a03      	ldr	r3, [r0, #32]
 800cb14:	b90b      	cbnz	r3, 800cb1a <_fflush_r+0x1a>
 800cb16:	f7fd fa35 	bl	8009f84 <__sinit>
 800cb1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d0f3      	beq.n	800cb0a <_fflush_r+0xa>
 800cb22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cb24:	07d0      	lsls	r0, r2, #31
 800cb26:	d404      	bmi.n	800cb32 <_fflush_r+0x32>
 800cb28:	0599      	lsls	r1, r3, #22
 800cb2a:	d402      	bmi.n	800cb32 <_fflush_r+0x32>
 800cb2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb2e:	f7fd fb40 	bl	800a1b2 <__retarget_lock_acquire_recursive>
 800cb32:	4628      	mov	r0, r5
 800cb34:	4621      	mov	r1, r4
 800cb36:	f7ff ff5d 	bl	800c9f4 <__sflush_r>
 800cb3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb3c:	07da      	lsls	r2, r3, #31
 800cb3e:	4605      	mov	r5, r0
 800cb40:	d4e4      	bmi.n	800cb0c <_fflush_r+0xc>
 800cb42:	89a3      	ldrh	r3, [r4, #12]
 800cb44:	059b      	lsls	r3, r3, #22
 800cb46:	d4e1      	bmi.n	800cb0c <_fflush_r+0xc>
 800cb48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb4a:	f7fd fb33 	bl	800a1b4 <__retarget_lock_release_recursive>
 800cb4e:	e7dd      	b.n	800cb0c <_fflush_r+0xc>

0800cb50 <memmove>:
 800cb50:	4288      	cmp	r0, r1
 800cb52:	b510      	push	{r4, lr}
 800cb54:	eb01 0402 	add.w	r4, r1, r2
 800cb58:	d902      	bls.n	800cb60 <memmove+0x10>
 800cb5a:	4284      	cmp	r4, r0
 800cb5c:	4623      	mov	r3, r4
 800cb5e:	d807      	bhi.n	800cb70 <memmove+0x20>
 800cb60:	1e43      	subs	r3, r0, #1
 800cb62:	42a1      	cmp	r1, r4
 800cb64:	d008      	beq.n	800cb78 <memmove+0x28>
 800cb66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb6e:	e7f8      	b.n	800cb62 <memmove+0x12>
 800cb70:	4402      	add	r2, r0
 800cb72:	4601      	mov	r1, r0
 800cb74:	428a      	cmp	r2, r1
 800cb76:	d100      	bne.n	800cb7a <memmove+0x2a>
 800cb78:	bd10      	pop	{r4, pc}
 800cb7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb82:	e7f7      	b.n	800cb74 <memmove+0x24>

0800cb84 <strncmp>:
 800cb84:	b510      	push	{r4, lr}
 800cb86:	b16a      	cbz	r2, 800cba4 <strncmp+0x20>
 800cb88:	3901      	subs	r1, #1
 800cb8a:	1884      	adds	r4, r0, r2
 800cb8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb90:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d103      	bne.n	800cba0 <strncmp+0x1c>
 800cb98:	42a0      	cmp	r0, r4
 800cb9a:	d001      	beq.n	800cba0 <strncmp+0x1c>
 800cb9c:	2a00      	cmp	r2, #0
 800cb9e:	d1f5      	bne.n	800cb8c <strncmp+0x8>
 800cba0:	1ad0      	subs	r0, r2, r3
 800cba2:	bd10      	pop	{r4, pc}
 800cba4:	4610      	mov	r0, r2
 800cba6:	e7fc      	b.n	800cba2 <strncmp+0x1e>

0800cba8 <_sbrk_r>:
 800cba8:	b538      	push	{r3, r4, r5, lr}
 800cbaa:	4d06      	ldr	r5, [pc, #24]	; (800cbc4 <_sbrk_r+0x1c>)
 800cbac:	2300      	movs	r3, #0
 800cbae:	4604      	mov	r4, r0
 800cbb0:	4608      	mov	r0, r1
 800cbb2:	602b      	str	r3, [r5, #0]
 800cbb4:	f7f5 f990 	bl	8001ed8 <_sbrk>
 800cbb8:	1c43      	adds	r3, r0, #1
 800cbba:	d102      	bne.n	800cbc2 <_sbrk_r+0x1a>
 800cbbc:	682b      	ldr	r3, [r5, #0]
 800cbbe:	b103      	cbz	r3, 800cbc2 <_sbrk_r+0x1a>
 800cbc0:	6023      	str	r3, [r4, #0]
 800cbc2:	bd38      	pop	{r3, r4, r5, pc}
 800cbc4:	20000a68 	.word	0x20000a68

0800cbc8 <memcpy>:
 800cbc8:	440a      	add	r2, r1
 800cbca:	4291      	cmp	r1, r2
 800cbcc:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbd0:	d100      	bne.n	800cbd4 <memcpy+0xc>
 800cbd2:	4770      	bx	lr
 800cbd4:	b510      	push	{r4, lr}
 800cbd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbde:	4291      	cmp	r1, r2
 800cbe0:	d1f9      	bne.n	800cbd6 <memcpy+0xe>
 800cbe2:	bd10      	pop	{r4, pc}
 800cbe4:	0000      	movs	r0, r0
	...

0800cbe8 <nan>:
 800cbe8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cbf0 <nan+0x8>
 800cbec:	4770      	bx	lr
 800cbee:	bf00      	nop
 800cbf0:	00000000 	.word	0x00000000
 800cbf4:	7ff80000 	.word	0x7ff80000

0800cbf8 <__assert_func>:
 800cbf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cbfa:	4614      	mov	r4, r2
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	4b09      	ldr	r3, [pc, #36]	; (800cc24 <__assert_func+0x2c>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4605      	mov	r5, r0
 800cc04:	68d8      	ldr	r0, [r3, #12]
 800cc06:	b14c      	cbz	r4, 800cc1c <__assert_func+0x24>
 800cc08:	4b07      	ldr	r3, [pc, #28]	; (800cc28 <__assert_func+0x30>)
 800cc0a:	9100      	str	r1, [sp, #0]
 800cc0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc10:	4906      	ldr	r1, [pc, #24]	; (800cc2c <__assert_func+0x34>)
 800cc12:	462b      	mov	r3, r5
 800cc14:	f000 fbca 	bl	800d3ac <fiprintf>
 800cc18:	f000 fbda 	bl	800d3d0 <abort>
 800cc1c:	4b04      	ldr	r3, [pc, #16]	; (800cc30 <__assert_func+0x38>)
 800cc1e:	461c      	mov	r4, r3
 800cc20:	e7f3      	b.n	800cc0a <__assert_func+0x12>
 800cc22:	bf00      	nop
 800cc24:	20000074 	.word	0x20000074
 800cc28:	0800f202 	.word	0x0800f202
 800cc2c:	0800f20f 	.word	0x0800f20f
 800cc30:	0800f23d 	.word	0x0800f23d

0800cc34 <_calloc_r>:
 800cc34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc36:	fba1 2402 	umull	r2, r4, r1, r2
 800cc3a:	b94c      	cbnz	r4, 800cc50 <_calloc_r+0x1c>
 800cc3c:	4611      	mov	r1, r2
 800cc3e:	9201      	str	r2, [sp, #4]
 800cc40:	f7fe f9b0 	bl	800afa4 <_malloc_r>
 800cc44:	9a01      	ldr	r2, [sp, #4]
 800cc46:	4605      	mov	r5, r0
 800cc48:	b930      	cbnz	r0, 800cc58 <_calloc_r+0x24>
 800cc4a:	4628      	mov	r0, r5
 800cc4c:	b003      	add	sp, #12
 800cc4e:	bd30      	pop	{r4, r5, pc}
 800cc50:	220c      	movs	r2, #12
 800cc52:	6002      	str	r2, [r0, #0]
 800cc54:	2500      	movs	r5, #0
 800cc56:	e7f8      	b.n	800cc4a <_calloc_r+0x16>
 800cc58:	4621      	mov	r1, r4
 800cc5a:	f7fd fa2c 	bl	800a0b6 <memset>
 800cc5e:	e7f4      	b.n	800cc4a <_calloc_r+0x16>

0800cc60 <rshift>:
 800cc60:	6903      	ldr	r3, [r0, #16]
 800cc62:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cc66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc6a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cc6e:	f100 0414 	add.w	r4, r0, #20
 800cc72:	dd45      	ble.n	800cd00 <rshift+0xa0>
 800cc74:	f011 011f 	ands.w	r1, r1, #31
 800cc78:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cc7c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cc80:	d10c      	bne.n	800cc9c <rshift+0x3c>
 800cc82:	f100 0710 	add.w	r7, r0, #16
 800cc86:	4629      	mov	r1, r5
 800cc88:	42b1      	cmp	r1, r6
 800cc8a:	d334      	bcc.n	800ccf6 <rshift+0x96>
 800cc8c:	1a9b      	subs	r3, r3, r2
 800cc8e:	009b      	lsls	r3, r3, #2
 800cc90:	1eea      	subs	r2, r5, #3
 800cc92:	4296      	cmp	r6, r2
 800cc94:	bf38      	it	cc
 800cc96:	2300      	movcc	r3, #0
 800cc98:	4423      	add	r3, r4
 800cc9a:	e015      	b.n	800ccc8 <rshift+0x68>
 800cc9c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cca0:	f1c1 0820 	rsb	r8, r1, #32
 800cca4:	40cf      	lsrs	r7, r1
 800cca6:	f105 0e04 	add.w	lr, r5, #4
 800ccaa:	46a1      	mov	r9, r4
 800ccac:	4576      	cmp	r6, lr
 800ccae:	46f4      	mov	ip, lr
 800ccb0:	d815      	bhi.n	800ccde <rshift+0x7e>
 800ccb2:	1a9a      	subs	r2, r3, r2
 800ccb4:	0092      	lsls	r2, r2, #2
 800ccb6:	3a04      	subs	r2, #4
 800ccb8:	3501      	adds	r5, #1
 800ccba:	42ae      	cmp	r6, r5
 800ccbc:	bf38      	it	cc
 800ccbe:	2200      	movcc	r2, #0
 800ccc0:	18a3      	adds	r3, r4, r2
 800ccc2:	50a7      	str	r7, [r4, r2]
 800ccc4:	b107      	cbz	r7, 800ccc8 <rshift+0x68>
 800ccc6:	3304      	adds	r3, #4
 800ccc8:	1b1a      	subs	r2, r3, r4
 800ccca:	42a3      	cmp	r3, r4
 800cccc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ccd0:	bf08      	it	eq
 800ccd2:	2300      	moveq	r3, #0
 800ccd4:	6102      	str	r2, [r0, #16]
 800ccd6:	bf08      	it	eq
 800ccd8:	6143      	streq	r3, [r0, #20]
 800ccda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccde:	f8dc c000 	ldr.w	ip, [ip]
 800cce2:	fa0c fc08 	lsl.w	ip, ip, r8
 800cce6:	ea4c 0707 	orr.w	r7, ip, r7
 800ccea:	f849 7b04 	str.w	r7, [r9], #4
 800ccee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ccf2:	40cf      	lsrs	r7, r1
 800ccf4:	e7da      	b.n	800ccac <rshift+0x4c>
 800ccf6:	f851 cb04 	ldr.w	ip, [r1], #4
 800ccfa:	f847 cf04 	str.w	ip, [r7, #4]!
 800ccfe:	e7c3      	b.n	800cc88 <rshift+0x28>
 800cd00:	4623      	mov	r3, r4
 800cd02:	e7e1      	b.n	800ccc8 <rshift+0x68>

0800cd04 <__hexdig_fun>:
 800cd04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cd08:	2b09      	cmp	r3, #9
 800cd0a:	d802      	bhi.n	800cd12 <__hexdig_fun+0xe>
 800cd0c:	3820      	subs	r0, #32
 800cd0e:	b2c0      	uxtb	r0, r0
 800cd10:	4770      	bx	lr
 800cd12:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cd16:	2b05      	cmp	r3, #5
 800cd18:	d801      	bhi.n	800cd1e <__hexdig_fun+0x1a>
 800cd1a:	3847      	subs	r0, #71	; 0x47
 800cd1c:	e7f7      	b.n	800cd0e <__hexdig_fun+0xa>
 800cd1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cd22:	2b05      	cmp	r3, #5
 800cd24:	d801      	bhi.n	800cd2a <__hexdig_fun+0x26>
 800cd26:	3827      	subs	r0, #39	; 0x27
 800cd28:	e7f1      	b.n	800cd0e <__hexdig_fun+0xa>
 800cd2a:	2000      	movs	r0, #0
 800cd2c:	4770      	bx	lr
	...

0800cd30 <__gethex>:
 800cd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd34:	4617      	mov	r7, r2
 800cd36:	680a      	ldr	r2, [r1, #0]
 800cd38:	b085      	sub	sp, #20
 800cd3a:	f102 0b02 	add.w	fp, r2, #2
 800cd3e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cd42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cd46:	4681      	mov	r9, r0
 800cd48:	468a      	mov	sl, r1
 800cd4a:	9302      	str	r3, [sp, #8]
 800cd4c:	32fe      	adds	r2, #254	; 0xfe
 800cd4e:	eb02 030b 	add.w	r3, r2, fp
 800cd52:	46d8      	mov	r8, fp
 800cd54:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800cd58:	9301      	str	r3, [sp, #4]
 800cd5a:	2830      	cmp	r0, #48	; 0x30
 800cd5c:	d0f7      	beq.n	800cd4e <__gethex+0x1e>
 800cd5e:	f7ff ffd1 	bl	800cd04 <__hexdig_fun>
 800cd62:	4604      	mov	r4, r0
 800cd64:	2800      	cmp	r0, #0
 800cd66:	d138      	bne.n	800cdda <__gethex+0xaa>
 800cd68:	49a7      	ldr	r1, [pc, #668]	; (800d008 <__gethex+0x2d8>)
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	4640      	mov	r0, r8
 800cd6e:	f7ff ff09 	bl	800cb84 <strncmp>
 800cd72:	4606      	mov	r6, r0
 800cd74:	2800      	cmp	r0, #0
 800cd76:	d169      	bne.n	800ce4c <__gethex+0x11c>
 800cd78:	f898 0001 	ldrb.w	r0, [r8, #1]
 800cd7c:	465d      	mov	r5, fp
 800cd7e:	f7ff ffc1 	bl	800cd04 <__hexdig_fun>
 800cd82:	2800      	cmp	r0, #0
 800cd84:	d064      	beq.n	800ce50 <__gethex+0x120>
 800cd86:	465a      	mov	r2, fp
 800cd88:	7810      	ldrb	r0, [r2, #0]
 800cd8a:	2830      	cmp	r0, #48	; 0x30
 800cd8c:	4690      	mov	r8, r2
 800cd8e:	f102 0201 	add.w	r2, r2, #1
 800cd92:	d0f9      	beq.n	800cd88 <__gethex+0x58>
 800cd94:	f7ff ffb6 	bl	800cd04 <__hexdig_fun>
 800cd98:	2301      	movs	r3, #1
 800cd9a:	fab0 f480 	clz	r4, r0
 800cd9e:	0964      	lsrs	r4, r4, #5
 800cda0:	465e      	mov	r6, fp
 800cda2:	9301      	str	r3, [sp, #4]
 800cda4:	4642      	mov	r2, r8
 800cda6:	4615      	mov	r5, r2
 800cda8:	3201      	adds	r2, #1
 800cdaa:	7828      	ldrb	r0, [r5, #0]
 800cdac:	f7ff ffaa 	bl	800cd04 <__hexdig_fun>
 800cdb0:	2800      	cmp	r0, #0
 800cdb2:	d1f8      	bne.n	800cda6 <__gethex+0x76>
 800cdb4:	4994      	ldr	r1, [pc, #592]	; (800d008 <__gethex+0x2d8>)
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	4628      	mov	r0, r5
 800cdba:	f7ff fee3 	bl	800cb84 <strncmp>
 800cdbe:	b978      	cbnz	r0, 800cde0 <__gethex+0xb0>
 800cdc0:	b946      	cbnz	r6, 800cdd4 <__gethex+0xa4>
 800cdc2:	1c6e      	adds	r6, r5, #1
 800cdc4:	4632      	mov	r2, r6
 800cdc6:	4615      	mov	r5, r2
 800cdc8:	3201      	adds	r2, #1
 800cdca:	7828      	ldrb	r0, [r5, #0]
 800cdcc:	f7ff ff9a 	bl	800cd04 <__hexdig_fun>
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	d1f8      	bne.n	800cdc6 <__gethex+0x96>
 800cdd4:	1b73      	subs	r3, r6, r5
 800cdd6:	009e      	lsls	r6, r3, #2
 800cdd8:	e004      	b.n	800cde4 <__gethex+0xb4>
 800cdda:	2400      	movs	r4, #0
 800cddc:	4626      	mov	r6, r4
 800cdde:	e7e1      	b.n	800cda4 <__gethex+0x74>
 800cde0:	2e00      	cmp	r6, #0
 800cde2:	d1f7      	bne.n	800cdd4 <__gethex+0xa4>
 800cde4:	782b      	ldrb	r3, [r5, #0]
 800cde6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cdea:	2b50      	cmp	r3, #80	; 0x50
 800cdec:	d13d      	bne.n	800ce6a <__gethex+0x13a>
 800cdee:	786b      	ldrb	r3, [r5, #1]
 800cdf0:	2b2b      	cmp	r3, #43	; 0x2b
 800cdf2:	d02f      	beq.n	800ce54 <__gethex+0x124>
 800cdf4:	2b2d      	cmp	r3, #45	; 0x2d
 800cdf6:	d031      	beq.n	800ce5c <__gethex+0x12c>
 800cdf8:	1c69      	adds	r1, r5, #1
 800cdfa:	f04f 0b00 	mov.w	fp, #0
 800cdfe:	7808      	ldrb	r0, [r1, #0]
 800ce00:	f7ff ff80 	bl	800cd04 <__hexdig_fun>
 800ce04:	1e42      	subs	r2, r0, #1
 800ce06:	b2d2      	uxtb	r2, r2
 800ce08:	2a18      	cmp	r2, #24
 800ce0a:	d82e      	bhi.n	800ce6a <__gethex+0x13a>
 800ce0c:	f1a0 0210 	sub.w	r2, r0, #16
 800ce10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ce14:	f7ff ff76 	bl	800cd04 <__hexdig_fun>
 800ce18:	f100 3cff 	add.w	ip, r0, #4294967295
 800ce1c:	fa5f fc8c 	uxtb.w	ip, ip
 800ce20:	f1bc 0f18 	cmp.w	ip, #24
 800ce24:	d91d      	bls.n	800ce62 <__gethex+0x132>
 800ce26:	f1bb 0f00 	cmp.w	fp, #0
 800ce2a:	d000      	beq.n	800ce2e <__gethex+0xfe>
 800ce2c:	4252      	negs	r2, r2
 800ce2e:	4416      	add	r6, r2
 800ce30:	f8ca 1000 	str.w	r1, [sl]
 800ce34:	b1dc      	cbz	r4, 800ce6e <__gethex+0x13e>
 800ce36:	9b01      	ldr	r3, [sp, #4]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	bf14      	ite	ne
 800ce3c:	f04f 0800 	movne.w	r8, #0
 800ce40:	f04f 0806 	moveq.w	r8, #6
 800ce44:	4640      	mov	r0, r8
 800ce46:	b005      	add	sp, #20
 800ce48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce4c:	4645      	mov	r5, r8
 800ce4e:	4626      	mov	r6, r4
 800ce50:	2401      	movs	r4, #1
 800ce52:	e7c7      	b.n	800cde4 <__gethex+0xb4>
 800ce54:	f04f 0b00 	mov.w	fp, #0
 800ce58:	1ca9      	adds	r1, r5, #2
 800ce5a:	e7d0      	b.n	800cdfe <__gethex+0xce>
 800ce5c:	f04f 0b01 	mov.w	fp, #1
 800ce60:	e7fa      	b.n	800ce58 <__gethex+0x128>
 800ce62:	230a      	movs	r3, #10
 800ce64:	fb03 0002 	mla	r0, r3, r2, r0
 800ce68:	e7d0      	b.n	800ce0c <__gethex+0xdc>
 800ce6a:	4629      	mov	r1, r5
 800ce6c:	e7e0      	b.n	800ce30 <__gethex+0x100>
 800ce6e:	eba5 0308 	sub.w	r3, r5, r8
 800ce72:	3b01      	subs	r3, #1
 800ce74:	4621      	mov	r1, r4
 800ce76:	2b07      	cmp	r3, #7
 800ce78:	dc0a      	bgt.n	800ce90 <__gethex+0x160>
 800ce7a:	4648      	mov	r0, r9
 800ce7c:	f7fe f91e 	bl	800b0bc <_Balloc>
 800ce80:	4604      	mov	r4, r0
 800ce82:	b940      	cbnz	r0, 800ce96 <__gethex+0x166>
 800ce84:	4b61      	ldr	r3, [pc, #388]	; (800d00c <__gethex+0x2dc>)
 800ce86:	4602      	mov	r2, r0
 800ce88:	21e4      	movs	r1, #228	; 0xe4
 800ce8a:	4861      	ldr	r0, [pc, #388]	; (800d010 <__gethex+0x2e0>)
 800ce8c:	f7ff feb4 	bl	800cbf8 <__assert_func>
 800ce90:	3101      	adds	r1, #1
 800ce92:	105b      	asrs	r3, r3, #1
 800ce94:	e7ef      	b.n	800ce76 <__gethex+0x146>
 800ce96:	f100 0a14 	add.w	sl, r0, #20
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	495a      	ldr	r1, [pc, #360]	; (800d008 <__gethex+0x2d8>)
 800ce9e:	f8cd a004 	str.w	sl, [sp, #4]
 800cea2:	469b      	mov	fp, r3
 800cea4:	45a8      	cmp	r8, r5
 800cea6:	d342      	bcc.n	800cf2e <__gethex+0x1fe>
 800cea8:	9801      	ldr	r0, [sp, #4]
 800ceaa:	f840 bb04 	str.w	fp, [r0], #4
 800ceae:	eba0 000a 	sub.w	r0, r0, sl
 800ceb2:	1080      	asrs	r0, r0, #2
 800ceb4:	6120      	str	r0, [r4, #16]
 800ceb6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ceba:	4658      	mov	r0, fp
 800cebc:	f7fe f9f0 	bl	800b2a0 <__hi0bits>
 800cec0:	683d      	ldr	r5, [r7, #0]
 800cec2:	eba8 0000 	sub.w	r0, r8, r0
 800cec6:	42a8      	cmp	r0, r5
 800cec8:	dd59      	ble.n	800cf7e <__gethex+0x24e>
 800ceca:	eba0 0805 	sub.w	r8, r0, r5
 800cece:	4641      	mov	r1, r8
 800ced0:	4620      	mov	r0, r4
 800ced2:	f7fe fd7f 	bl	800b9d4 <__any_on>
 800ced6:	4683      	mov	fp, r0
 800ced8:	b1b8      	cbz	r0, 800cf0a <__gethex+0x1da>
 800ceda:	f108 33ff 	add.w	r3, r8, #4294967295
 800cede:	1159      	asrs	r1, r3, #5
 800cee0:	f003 021f 	and.w	r2, r3, #31
 800cee4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cee8:	f04f 0b01 	mov.w	fp, #1
 800ceec:	fa0b f202 	lsl.w	r2, fp, r2
 800cef0:	420a      	tst	r2, r1
 800cef2:	d00a      	beq.n	800cf0a <__gethex+0x1da>
 800cef4:	455b      	cmp	r3, fp
 800cef6:	dd06      	ble.n	800cf06 <__gethex+0x1d6>
 800cef8:	f1a8 0102 	sub.w	r1, r8, #2
 800cefc:	4620      	mov	r0, r4
 800cefe:	f7fe fd69 	bl	800b9d4 <__any_on>
 800cf02:	2800      	cmp	r0, #0
 800cf04:	d138      	bne.n	800cf78 <__gethex+0x248>
 800cf06:	f04f 0b02 	mov.w	fp, #2
 800cf0a:	4641      	mov	r1, r8
 800cf0c:	4620      	mov	r0, r4
 800cf0e:	f7ff fea7 	bl	800cc60 <rshift>
 800cf12:	4446      	add	r6, r8
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	42b3      	cmp	r3, r6
 800cf18:	da41      	bge.n	800cf9e <__gethex+0x26e>
 800cf1a:	4621      	mov	r1, r4
 800cf1c:	4648      	mov	r0, r9
 800cf1e:	f7fe f90d 	bl	800b13c <_Bfree>
 800cf22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf24:	2300      	movs	r3, #0
 800cf26:	6013      	str	r3, [r2, #0]
 800cf28:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800cf2c:	e78a      	b.n	800ce44 <__gethex+0x114>
 800cf2e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800cf32:	2a2e      	cmp	r2, #46	; 0x2e
 800cf34:	d014      	beq.n	800cf60 <__gethex+0x230>
 800cf36:	2b20      	cmp	r3, #32
 800cf38:	d106      	bne.n	800cf48 <__gethex+0x218>
 800cf3a:	9b01      	ldr	r3, [sp, #4]
 800cf3c:	f843 bb04 	str.w	fp, [r3], #4
 800cf40:	f04f 0b00 	mov.w	fp, #0
 800cf44:	9301      	str	r3, [sp, #4]
 800cf46:	465b      	mov	r3, fp
 800cf48:	7828      	ldrb	r0, [r5, #0]
 800cf4a:	9303      	str	r3, [sp, #12]
 800cf4c:	f7ff feda 	bl	800cd04 <__hexdig_fun>
 800cf50:	9b03      	ldr	r3, [sp, #12]
 800cf52:	f000 000f 	and.w	r0, r0, #15
 800cf56:	4098      	lsls	r0, r3
 800cf58:	ea4b 0b00 	orr.w	fp, fp, r0
 800cf5c:	3304      	adds	r3, #4
 800cf5e:	e7a1      	b.n	800cea4 <__gethex+0x174>
 800cf60:	45a8      	cmp	r8, r5
 800cf62:	d8e8      	bhi.n	800cf36 <__gethex+0x206>
 800cf64:	2201      	movs	r2, #1
 800cf66:	4628      	mov	r0, r5
 800cf68:	9303      	str	r3, [sp, #12]
 800cf6a:	f7ff fe0b 	bl	800cb84 <strncmp>
 800cf6e:	4926      	ldr	r1, [pc, #152]	; (800d008 <__gethex+0x2d8>)
 800cf70:	9b03      	ldr	r3, [sp, #12]
 800cf72:	2800      	cmp	r0, #0
 800cf74:	d1df      	bne.n	800cf36 <__gethex+0x206>
 800cf76:	e795      	b.n	800cea4 <__gethex+0x174>
 800cf78:	f04f 0b03 	mov.w	fp, #3
 800cf7c:	e7c5      	b.n	800cf0a <__gethex+0x1da>
 800cf7e:	da0b      	bge.n	800cf98 <__gethex+0x268>
 800cf80:	eba5 0800 	sub.w	r8, r5, r0
 800cf84:	4621      	mov	r1, r4
 800cf86:	4642      	mov	r2, r8
 800cf88:	4648      	mov	r0, r9
 800cf8a:	f7fe faf1 	bl	800b570 <__lshift>
 800cf8e:	eba6 0608 	sub.w	r6, r6, r8
 800cf92:	4604      	mov	r4, r0
 800cf94:	f100 0a14 	add.w	sl, r0, #20
 800cf98:	f04f 0b00 	mov.w	fp, #0
 800cf9c:	e7ba      	b.n	800cf14 <__gethex+0x1e4>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	42b3      	cmp	r3, r6
 800cfa2:	dd73      	ble.n	800d08c <__gethex+0x35c>
 800cfa4:	1b9e      	subs	r6, r3, r6
 800cfa6:	42b5      	cmp	r5, r6
 800cfa8:	dc34      	bgt.n	800d014 <__gethex+0x2e4>
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2b02      	cmp	r3, #2
 800cfae:	d023      	beq.n	800cff8 <__gethex+0x2c8>
 800cfb0:	2b03      	cmp	r3, #3
 800cfb2:	d025      	beq.n	800d000 <__gethex+0x2d0>
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d115      	bne.n	800cfe4 <__gethex+0x2b4>
 800cfb8:	42b5      	cmp	r5, r6
 800cfba:	d113      	bne.n	800cfe4 <__gethex+0x2b4>
 800cfbc:	2d01      	cmp	r5, #1
 800cfbe:	d10b      	bne.n	800cfd8 <__gethex+0x2a8>
 800cfc0:	9a02      	ldr	r2, [sp, #8]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6013      	str	r3, [r2, #0]
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	6123      	str	r3, [r4, #16]
 800cfca:	f8ca 3000 	str.w	r3, [sl]
 800cfce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cfd0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800cfd4:	601c      	str	r4, [r3, #0]
 800cfd6:	e735      	b.n	800ce44 <__gethex+0x114>
 800cfd8:	1e69      	subs	r1, r5, #1
 800cfda:	4620      	mov	r0, r4
 800cfdc:	f7fe fcfa 	bl	800b9d4 <__any_on>
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	d1ed      	bne.n	800cfc0 <__gethex+0x290>
 800cfe4:	4621      	mov	r1, r4
 800cfe6:	4648      	mov	r0, r9
 800cfe8:	f7fe f8a8 	bl	800b13c <_Bfree>
 800cfec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cfee:	2300      	movs	r3, #0
 800cff0:	6013      	str	r3, [r2, #0]
 800cff2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800cff6:	e725      	b.n	800ce44 <__gethex+0x114>
 800cff8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d1f2      	bne.n	800cfe4 <__gethex+0x2b4>
 800cffe:	e7df      	b.n	800cfc0 <__gethex+0x290>
 800d000:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d002:	2b00      	cmp	r3, #0
 800d004:	d1dc      	bne.n	800cfc0 <__gethex+0x290>
 800d006:	e7ed      	b.n	800cfe4 <__gethex+0x2b4>
 800d008:	0800f094 	.word	0x0800f094
 800d00c:	0800ef2d 	.word	0x0800ef2d
 800d010:	0800f23e 	.word	0x0800f23e
 800d014:	f106 38ff 	add.w	r8, r6, #4294967295
 800d018:	f1bb 0f00 	cmp.w	fp, #0
 800d01c:	d133      	bne.n	800d086 <__gethex+0x356>
 800d01e:	f1b8 0f00 	cmp.w	r8, #0
 800d022:	d004      	beq.n	800d02e <__gethex+0x2fe>
 800d024:	4641      	mov	r1, r8
 800d026:	4620      	mov	r0, r4
 800d028:	f7fe fcd4 	bl	800b9d4 <__any_on>
 800d02c:	4683      	mov	fp, r0
 800d02e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d032:	2301      	movs	r3, #1
 800d034:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d038:	f008 081f 	and.w	r8, r8, #31
 800d03c:	fa03 f308 	lsl.w	r3, r3, r8
 800d040:	4213      	tst	r3, r2
 800d042:	4631      	mov	r1, r6
 800d044:	4620      	mov	r0, r4
 800d046:	bf18      	it	ne
 800d048:	f04b 0b02 	orrne.w	fp, fp, #2
 800d04c:	1bad      	subs	r5, r5, r6
 800d04e:	f7ff fe07 	bl	800cc60 <rshift>
 800d052:	687e      	ldr	r6, [r7, #4]
 800d054:	f04f 0802 	mov.w	r8, #2
 800d058:	f1bb 0f00 	cmp.w	fp, #0
 800d05c:	d04a      	beq.n	800d0f4 <__gethex+0x3c4>
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2b02      	cmp	r3, #2
 800d062:	d016      	beq.n	800d092 <__gethex+0x362>
 800d064:	2b03      	cmp	r3, #3
 800d066:	d018      	beq.n	800d09a <__gethex+0x36a>
 800d068:	2b01      	cmp	r3, #1
 800d06a:	d109      	bne.n	800d080 <__gethex+0x350>
 800d06c:	f01b 0f02 	tst.w	fp, #2
 800d070:	d006      	beq.n	800d080 <__gethex+0x350>
 800d072:	f8da 3000 	ldr.w	r3, [sl]
 800d076:	ea4b 0b03 	orr.w	fp, fp, r3
 800d07a:	f01b 0f01 	tst.w	fp, #1
 800d07e:	d10f      	bne.n	800d0a0 <__gethex+0x370>
 800d080:	f048 0810 	orr.w	r8, r8, #16
 800d084:	e036      	b.n	800d0f4 <__gethex+0x3c4>
 800d086:	f04f 0b01 	mov.w	fp, #1
 800d08a:	e7d0      	b.n	800d02e <__gethex+0x2fe>
 800d08c:	f04f 0801 	mov.w	r8, #1
 800d090:	e7e2      	b.n	800d058 <__gethex+0x328>
 800d092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d094:	f1c3 0301 	rsb	r3, r3, #1
 800d098:	930f      	str	r3, [sp, #60]	; 0x3c
 800d09a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d0ef      	beq.n	800d080 <__gethex+0x350>
 800d0a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d0a4:	f104 0214 	add.w	r2, r4, #20
 800d0a8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d0ac:	9301      	str	r3, [sp, #4]
 800d0ae:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	4694      	mov	ip, r2
 800d0b6:	f852 1b04 	ldr.w	r1, [r2], #4
 800d0ba:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d0be:	d01e      	beq.n	800d0fe <__gethex+0x3ce>
 800d0c0:	3101      	adds	r1, #1
 800d0c2:	f8cc 1000 	str.w	r1, [ip]
 800d0c6:	f1b8 0f02 	cmp.w	r8, #2
 800d0ca:	f104 0214 	add.w	r2, r4, #20
 800d0ce:	d13d      	bne.n	800d14c <__gethex+0x41c>
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	3b01      	subs	r3, #1
 800d0d4:	42ab      	cmp	r3, r5
 800d0d6:	d10b      	bne.n	800d0f0 <__gethex+0x3c0>
 800d0d8:	1169      	asrs	r1, r5, #5
 800d0da:	2301      	movs	r3, #1
 800d0dc:	f005 051f 	and.w	r5, r5, #31
 800d0e0:	fa03 f505 	lsl.w	r5, r3, r5
 800d0e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0e8:	421d      	tst	r5, r3
 800d0ea:	bf18      	it	ne
 800d0ec:	f04f 0801 	movne.w	r8, #1
 800d0f0:	f048 0820 	orr.w	r8, r8, #32
 800d0f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0f6:	601c      	str	r4, [r3, #0]
 800d0f8:	9b02      	ldr	r3, [sp, #8]
 800d0fa:	601e      	str	r6, [r3, #0]
 800d0fc:	e6a2      	b.n	800ce44 <__gethex+0x114>
 800d0fe:	4290      	cmp	r0, r2
 800d100:	f842 3c04 	str.w	r3, [r2, #-4]
 800d104:	d8d6      	bhi.n	800d0b4 <__gethex+0x384>
 800d106:	68a2      	ldr	r2, [r4, #8]
 800d108:	4593      	cmp	fp, r2
 800d10a:	db17      	blt.n	800d13c <__gethex+0x40c>
 800d10c:	6861      	ldr	r1, [r4, #4]
 800d10e:	4648      	mov	r0, r9
 800d110:	3101      	adds	r1, #1
 800d112:	f7fd ffd3 	bl	800b0bc <_Balloc>
 800d116:	4682      	mov	sl, r0
 800d118:	b918      	cbnz	r0, 800d122 <__gethex+0x3f2>
 800d11a:	4b1b      	ldr	r3, [pc, #108]	; (800d188 <__gethex+0x458>)
 800d11c:	4602      	mov	r2, r0
 800d11e:	2184      	movs	r1, #132	; 0x84
 800d120:	e6b3      	b.n	800ce8a <__gethex+0x15a>
 800d122:	6922      	ldr	r2, [r4, #16]
 800d124:	3202      	adds	r2, #2
 800d126:	f104 010c 	add.w	r1, r4, #12
 800d12a:	0092      	lsls	r2, r2, #2
 800d12c:	300c      	adds	r0, #12
 800d12e:	f7ff fd4b 	bl	800cbc8 <memcpy>
 800d132:	4621      	mov	r1, r4
 800d134:	4648      	mov	r0, r9
 800d136:	f7fe f801 	bl	800b13c <_Bfree>
 800d13a:	4654      	mov	r4, sl
 800d13c:	6922      	ldr	r2, [r4, #16]
 800d13e:	1c51      	adds	r1, r2, #1
 800d140:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d144:	6121      	str	r1, [r4, #16]
 800d146:	2101      	movs	r1, #1
 800d148:	6151      	str	r1, [r2, #20]
 800d14a:	e7bc      	b.n	800d0c6 <__gethex+0x396>
 800d14c:	6921      	ldr	r1, [r4, #16]
 800d14e:	4559      	cmp	r1, fp
 800d150:	dd0b      	ble.n	800d16a <__gethex+0x43a>
 800d152:	2101      	movs	r1, #1
 800d154:	4620      	mov	r0, r4
 800d156:	f7ff fd83 	bl	800cc60 <rshift>
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	3601      	adds	r6, #1
 800d15e:	42b3      	cmp	r3, r6
 800d160:	f6ff aedb 	blt.w	800cf1a <__gethex+0x1ea>
 800d164:	f04f 0801 	mov.w	r8, #1
 800d168:	e7c2      	b.n	800d0f0 <__gethex+0x3c0>
 800d16a:	f015 051f 	ands.w	r5, r5, #31
 800d16e:	d0f9      	beq.n	800d164 <__gethex+0x434>
 800d170:	9b01      	ldr	r3, [sp, #4]
 800d172:	441a      	add	r2, r3
 800d174:	f1c5 0520 	rsb	r5, r5, #32
 800d178:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d17c:	f7fe f890 	bl	800b2a0 <__hi0bits>
 800d180:	42a8      	cmp	r0, r5
 800d182:	dbe6      	blt.n	800d152 <__gethex+0x422>
 800d184:	e7ee      	b.n	800d164 <__gethex+0x434>
 800d186:	bf00      	nop
 800d188:	0800ef2d 	.word	0x0800ef2d

0800d18c <L_shift>:
 800d18c:	f1c2 0208 	rsb	r2, r2, #8
 800d190:	0092      	lsls	r2, r2, #2
 800d192:	b570      	push	{r4, r5, r6, lr}
 800d194:	f1c2 0620 	rsb	r6, r2, #32
 800d198:	6843      	ldr	r3, [r0, #4]
 800d19a:	6804      	ldr	r4, [r0, #0]
 800d19c:	fa03 f506 	lsl.w	r5, r3, r6
 800d1a0:	432c      	orrs	r4, r5
 800d1a2:	40d3      	lsrs	r3, r2
 800d1a4:	6004      	str	r4, [r0, #0]
 800d1a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800d1aa:	4288      	cmp	r0, r1
 800d1ac:	d3f4      	bcc.n	800d198 <L_shift+0xc>
 800d1ae:	bd70      	pop	{r4, r5, r6, pc}

0800d1b0 <__match>:
 800d1b0:	b530      	push	{r4, r5, lr}
 800d1b2:	6803      	ldr	r3, [r0, #0]
 800d1b4:	3301      	adds	r3, #1
 800d1b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1ba:	b914      	cbnz	r4, 800d1c2 <__match+0x12>
 800d1bc:	6003      	str	r3, [r0, #0]
 800d1be:	2001      	movs	r0, #1
 800d1c0:	bd30      	pop	{r4, r5, pc}
 800d1c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d1ca:	2d19      	cmp	r5, #25
 800d1cc:	bf98      	it	ls
 800d1ce:	3220      	addls	r2, #32
 800d1d0:	42a2      	cmp	r2, r4
 800d1d2:	d0f0      	beq.n	800d1b6 <__match+0x6>
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	e7f3      	b.n	800d1c0 <__match+0x10>

0800d1d8 <__hexnan>:
 800d1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1dc:	680b      	ldr	r3, [r1, #0]
 800d1de:	6801      	ldr	r1, [r0, #0]
 800d1e0:	115e      	asrs	r6, r3, #5
 800d1e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d1e6:	f013 031f 	ands.w	r3, r3, #31
 800d1ea:	b087      	sub	sp, #28
 800d1ec:	bf18      	it	ne
 800d1ee:	3604      	addne	r6, #4
 800d1f0:	2500      	movs	r5, #0
 800d1f2:	1f37      	subs	r7, r6, #4
 800d1f4:	4682      	mov	sl, r0
 800d1f6:	4690      	mov	r8, r2
 800d1f8:	9301      	str	r3, [sp, #4]
 800d1fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800d1fe:	46b9      	mov	r9, r7
 800d200:	463c      	mov	r4, r7
 800d202:	9502      	str	r5, [sp, #8]
 800d204:	46ab      	mov	fp, r5
 800d206:	784a      	ldrb	r2, [r1, #1]
 800d208:	1c4b      	adds	r3, r1, #1
 800d20a:	9303      	str	r3, [sp, #12]
 800d20c:	b342      	cbz	r2, 800d260 <__hexnan+0x88>
 800d20e:	4610      	mov	r0, r2
 800d210:	9105      	str	r1, [sp, #20]
 800d212:	9204      	str	r2, [sp, #16]
 800d214:	f7ff fd76 	bl	800cd04 <__hexdig_fun>
 800d218:	2800      	cmp	r0, #0
 800d21a:	d14f      	bne.n	800d2bc <__hexnan+0xe4>
 800d21c:	9a04      	ldr	r2, [sp, #16]
 800d21e:	9905      	ldr	r1, [sp, #20]
 800d220:	2a20      	cmp	r2, #32
 800d222:	d818      	bhi.n	800d256 <__hexnan+0x7e>
 800d224:	9b02      	ldr	r3, [sp, #8]
 800d226:	459b      	cmp	fp, r3
 800d228:	dd13      	ble.n	800d252 <__hexnan+0x7a>
 800d22a:	454c      	cmp	r4, r9
 800d22c:	d206      	bcs.n	800d23c <__hexnan+0x64>
 800d22e:	2d07      	cmp	r5, #7
 800d230:	dc04      	bgt.n	800d23c <__hexnan+0x64>
 800d232:	462a      	mov	r2, r5
 800d234:	4649      	mov	r1, r9
 800d236:	4620      	mov	r0, r4
 800d238:	f7ff ffa8 	bl	800d18c <L_shift>
 800d23c:	4544      	cmp	r4, r8
 800d23e:	d950      	bls.n	800d2e2 <__hexnan+0x10a>
 800d240:	2300      	movs	r3, #0
 800d242:	f1a4 0904 	sub.w	r9, r4, #4
 800d246:	f844 3c04 	str.w	r3, [r4, #-4]
 800d24a:	f8cd b008 	str.w	fp, [sp, #8]
 800d24e:	464c      	mov	r4, r9
 800d250:	461d      	mov	r5, r3
 800d252:	9903      	ldr	r1, [sp, #12]
 800d254:	e7d7      	b.n	800d206 <__hexnan+0x2e>
 800d256:	2a29      	cmp	r2, #41	; 0x29
 800d258:	d155      	bne.n	800d306 <__hexnan+0x12e>
 800d25a:	3102      	adds	r1, #2
 800d25c:	f8ca 1000 	str.w	r1, [sl]
 800d260:	f1bb 0f00 	cmp.w	fp, #0
 800d264:	d04f      	beq.n	800d306 <__hexnan+0x12e>
 800d266:	454c      	cmp	r4, r9
 800d268:	d206      	bcs.n	800d278 <__hexnan+0xa0>
 800d26a:	2d07      	cmp	r5, #7
 800d26c:	dc04      	bgt.n	800d278 <__hexnan+0xa0>
 800d26e:	462a      	mov	r2, r5
 800d270:	4649      	mov	r1, r9
 800d272:	4620      	mov	r0, r4
 800d274:	f7ff ff8a 	bl	800d18c <L_shift>
 800d278:	4544      	cmp	r4, r8
 800d27a:	d934      	bls.n	800d2e6 <__hexnan+0x10e>
 800d27c:	f1a8 0204 	sub.w	r2, r8, #4
 800d280:	4623      	mov	r3, r4
 800d282:	f853 1b04 	ldr.w	r1, [r3], #4
 800d286:	f842 1f04 	str.w	r1, [r2, #4]!
 800d28a:	429f      	cmp	r7, r3
 800d28c:	d2f9      	bcs.n	800d282 <__hexnan+0xaa>
 800d28e:	1b3b      	subs	r3, r7, r4
 800d290:	f023 0303 	bic.w	r3, r3, #3
 800d294:	3304      	adds	r3, #4
 800d296:	3e03      	subs	r6, #3
 800d298:	3401      	adds	r4, #1
 800d29a:	42a6      	cmp	r6, r4
 800d29c:	bf38      	it	cc
 800d29e:	2304      	movcc	r3, #4
 800d2a0:	4443      	add	r3, r8
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f843 2b04 	str.w	r2, [r3], #4
 800d2a8:	429f      	cmp	r7, r3
 800d2aa:	d2fb      	bcs.n	800d2a4 <__hexnan+0xcc>
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	b91b      	cbnz	r3, 800d2b8 <__hexnan+0xe0>
 800d2b0:	4547      	cmp	r7, r8
 800d2b2:	d126      	bne.n	800d302 <__hexnan+0x12a>
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	603b      	str	r3, [r7, #0]
 800d2b8:	2005      	movs	r0, #5
 800d2ba:	e025      	b.n	800d308 <__hexnan+0x130>
 800d2bc:	3501      	adds	r5, #1
 800d2be:	2d08      	cmp	r5, #8
 800d2c0:	f10b 0b01 	add.w	fp, fp, #1
 800d2c4:	dd06      	ble.n	800d2d4 <__hexnan+0xfc>
 800d2c6:	4544      	cmp	r4, r8
 800d2c8:	d9c3      	bls.n	800d252 <__hexnan+0x7a>
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	f844 3c04 	str.w	r3, [r4, #-4]
 800d2d0:	2501      	movs	r5, #1
 800d2d2:	3c04      	subs	r4, #4
 800d2d4:	6822      	ldr	r2, [r4, #0]
 800d2d6:	f000 000f 	and.w	r0, r0, #15
 800d2da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d2de:	6020      	str	r0, [r4, #0]
 800d2e0:	e7b7      	b.n	800d252 <__hexnan+0x7a>
 800d2e2:	2508      	movs	r5, #8
 800d2e4:	e7b5      	b.n	800d252 <__hexnan+0x7a>
 800d2e6:	9b01      	ldr	r3, [sp, #4]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d0df      	beq.n	800d2ac <__hexnan+0xd4>
 800d2ec:	f1c3 0320 	rsb	r3, r3, #32
 800d2f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d2f4:	40da      	lsrs	r2, r3
 800d2f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d2fa:	4013      	ands	r3, r2
 800d2fc:	f846 3c04 	str.w	r3, [r6, #-4]
 800d300:	e7d4      	b.n	800d2ac <__hexnan+0xd4>
 800d302:	3f04      	subs	r7, #4
 800d304:	e7d2      	b.n	800d2ac <__hexnan+0xd4>
 800d306:	2004      	movs	r0, #4
 800d308:	b007      	add	sp, #28
 800d30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d30e <__ascii_mbtowc>:
 800d30e:	b082      	sub	sp, #8
 800d310:	b901      	cbnz	r1, 800d314 <__ascii_mbtowc+0x6>
 800d312:	a901      	add	r1, sp, #4
 800d314:	b142      	cbz	r2, 800d328 <__ascii_mbtowc+0x1a>
 800d316:	b14b      	cbz	r3, 800d32c <__ascii_mbtowc+0x1e>
 800d318:	7813      	ldrb	r3, [r2, #0]
 800d31a:	600b      	str	r3, [r1, #0]
 800d31c:	7812      	ldrb	r2, [r2, #0]
 800d31e:	1e10      	subs	r0, r2, #0
 800d320:	bf18      	it	ne
 800d322:	2001      	movne	r0, #1
 800d324:	b002      	add	sp, #8
 800d326:	4770      	bx	lr
 800d328:	4610      	mov	r0, r2
 800d32a:	e7fb      	b.n	800d324 <__ascii_mbtowc+0x16>
 800d32c:	f06f 0001 	mvn.w	r0, #1
 800d330:	e7f8      	b.n	800d324 <__ascii_mbtowc+0x16>

0800d332 <_realloc_r>:
 800d332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d336:	4680      	mov	r8, r0
 800d338:	4614      	mov	r4, r2
 800d33a:	460e      	mov	r6, r1
 800d33c:	b921      	cbnz	r1, 800d348 <_realloc_r+0x16>
 800d33e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d342:	4611      	mov	r1, r2
 800d344:	f7fd be2e 	b.w	800afa4 <_malloc_r>
 800d348:	b92a      	cbnz	r2, 800d356 <_realloc_r+0x24>
 800d34a:	f7fd fdb7 	bl	800aebc <_free_r>
 800d34e:	4625      	mov	r5, r4
 800d350:	4628      	mov	r0, r5
 800d352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d356:	f000 f842 	bl	800d3de <_malloc_usable_size_r>
 800d35a:	4284      	cmp	r4, r0
 800d35c:	4607      	mov	r7, r0
 800d35e:	d802      	bhi.n	800d366 <_realloc_r+0x34>
 800d360:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d364:	d812      	bhi.n	800d38c <_realloc_r+0x5a>
 800d366:	4621      	mov	r1, r4
 800d368:	4640      	mov	r0, r8
 800d36a:	f7fd fe1b 	bl	800afa4 <_malloc_r>
 800d36e:	4605      	mov	r5, r0
 800d370:	2800      	cmp	r0, #0
 800d372:	d0ed      	beq.n	800d350 <_realloc_r+0x1e>
 800d374:	42bc      	cmp	r4, r7
 800d376:	4622      	mov	r2, r4
 800d378:	4631      	mov	r1, r6
 800d37a:	bf28      	it	cs
 800d37c:	463a      	movcs	r2, r7
 800d37e:	f7ff fc23 	bl	800cbc8 <memcpy>
 800d382:	4631      	mov	r1, r6
 800d384:	4640      	mov	r0, r8
 800d386:	f7fd fd99 	bl	800aebc <_free_r>
 800d38a:	e7e1      	b.n	800d350 <_realloc_r+0x1e>
 800d38c:	4635      	mov	r5, r6
 800d38e:	e7df      	b.n	800d350 <_realloc_r+0x1e>

0800d390 <__ascii_wctomb>:
 800d390:	b149      	cbz	r1, 800d3a6 <__ascii_wctomb+0x16>
 800d392:	2aff      	cmp	r2, #255	; 0xff
 800d394:	bf85      	ittet	hi
 800d396:	238a      	movhi	r3, #138	; 0x8a
 800d398:	6003      	strhi	r3, [r0, #0]
 800d39a:	700a      	strbls	r2, [r1, #0]
 800d39c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d3a0:	bf98      	it	ls
 800d3a2:	2001      	movls	r0, #1
 800d3a4:	4770      	bx	lr
 800d3a6:	4608      	mov	r0, r1
 800d3a8:	4770      	bx	lr
	...

0800d3ac <fiprintf>:
 800d3ac:	b40e      	push	{r1, r2, r3}
 800d3ae:	b503      	push	{r0, r1, lr}
 800d3b0:	4601      	mov	r1, r0
 800d3b2:	ab03      	add	r3, sp, #12
 800d3b4:	4805      	ldr	r0, [pc, #20]	; (800d3cc <fiprintf+0x20>)
 800d3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3ba:	6800      	ldr	r0, [r0, #0]
 800d3bc:	9301      	str	r3, [sp, #4]
 800d3be:	f000 f83f 	bl	800d440 <_vfiprintf_r>
 800d3c2:	b002      	add	sp, #8
 800d3c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3c8:	b003      	add	sp, #12
 800d3ca:	4770      	bx	lr
 800d3cc:	20000074 	.word	0x20000074

0800d3d0 <abort>:
 800d3d0:	b508      	push	{r3, lr}
 800d3d2:	2006      	movs	r0, #6
 800d3d4:	f000 fa0c 	bl	800d7f0 <raise>
 800d3d8:	2001      	movs	r0, #1
 800d3da:	f7f4 fd05 	bl	8001de8 <_exit>

0800d3de <_malloc_usable_size_r>:
 800d3de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3e2:	1f18      	subs	r0, r3, #4
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	bfbc      	itt	lt
 800d3e8:	580b      	ldrlt	r3, [r1, r0]
 800d3ea:	18c0      	addlt	r0, r0, r3
 800d3ec:	4770      	bx	lr

0800d3ee <__sfputc_r>:
 800d3ee:	6893      	ldr	r3, [r2, #8]
 800d3f0:	3b01      	subs	r3, #1
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	b410      	push	{r4}
 800d3f6:	6093      	str	r3, [r2, #8]
 800d3f8:	da08      	bge.n	800d40c <__sfputc_r+0x1e>
 800d3fa:	6994      	ldr	r4, [r2, #24]
 800d3fc:	42a3      	cmp	r3, r4
 800d3fe:	db01      	blt.n	800d404 <__sfputc_r+0x16>
 800d400:	290a      	cmp	r1, #10
 800d402:	d103      	bne.n	800d40c <__sfputc_r+0x1e>
 800d404:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d408:	f000 b934 	b.w	800d674 <__swbuf_r>
 800d40c:	6813      	ldr	r3, [r2, #0]
 800d40e:	1c58      	adds	r0, r3, #1
 800d410:	6010      	str	r0, [r2, #0]
 800d412:	7019      	strb	r1, [r3, #0]
 800d414:	4608      	mov	r0, r1
 800d416:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <__sfputs_r>:
 800d41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d41e:	4606      	mov	r6, r0
 800d420:	460f      	mov	r7, r1
 800d422:	4614      	mov	r4, r2
 800d424:	18d5      	adds	r5, r2, r3
 800d426:	42ac      	cmp	r4, r5
 800d428:	d101      	bne.n	800d42e <__sfputs_r+0x12>
 800d42a:	2000      	movs	r0, #0
 800d42c:	e007      	b.n	800d43e <__sfputs_r+0x22>
 800d42e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d432:	463a      	mov	r2, r7
 800d434:	4630      	mov	r0, r6
 800d436:	f7ff ffda 	bl	800d3ee <__sfputc_r>
 800d43a:	1c43      	adds	r3, r0, #1
 800d43c:	d1f3      	bne.n	800d426 <__sfputs_r+0xa>
 800d43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d440 <_vfiprintf_r>:
 800d440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d444:	460d      	mov	r5, r1
 800d446:	b09d      	sub	sp, #116	; 0x74
 800d448:	4614      	mov	r4, r2
 800d44a:	4698      	mov	r8, r3
 800d44c:	4606      	mov	r6, r0
 800d44e:	b118      	cbz	r0, 800d458 <_vfiprintf_r+0x18>
 800d450:	6a03      	ldr	r3, [r0, #32]
 800d452:	b90b      	cbnz	r3, 800d458 <_vfiprintf_r+0x18>
 800d454:	f7fc fd96 	bl	8009f84 <__sinit>
 800d458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d45a:	07d9      	lsls	r1, r3, #31
 800d45c:	d405      	bmi.n	800d46a <_vfiprintf_r+0x2a>
 800d45e:	89ab      	ldrh	r3, [r5, #12]
 800d460:	059a      	lsls	r2, r3, #22
 800d462:	d402      	bmi.n	800d46a <_vfiprintf_r+0x2a>
 800d464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d466:	f7fc fea4 	bl	800a1b2 <__retarget_lock_acquire_recursive>
 800d46a:	89ab      	ldrh	r3, [r5, #12]
 800d46c:	071b      	lsls	r3, r3, #28
 800d46e:	d501      	bpl.n	800d474 <_vfiprintf_r+0x34>
 800d470:	692b      	ldr	r3, [r5, #16]
 800d472:	b99b      	cbnz	r3, 800d49c <_vfiprintf_r+0x5c>
 800d474:	4629      	mov	r1, r5
 800d476:	4630      	mov	r0, r6
 800d478:	f000 f93a 	bl	800d6f0 <__swsetup_r>
 800d47c:	b170      	cbz	r0, 800d49c <_vfiprintf_r+0x5c>
 800d47e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d480:	07dc      	lsls	r4, r3, #31
 800d482:	d504      	bpl.n	800d48e <_vfiprintf_r+0x4e>
 800d484:	f04f 30ff 	mov.w	r0, #4294967295
 800d488:	b01d      	add	sp, #116	; 0x74
 800d48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d48e:	89ab      	ldrh	r3, [r5, #12]
 800d490:	0598      	lsls	r0, r3, #22
 800d492:	d4f7      	bmi.n	800d484 <_vfiprintf_r+0x44>
 800d494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d496:	f7fc fe8d 	bl	800a1b4 <__retarget_lock_release_recursive>
 800d49a:	e7f3      	b.n	800d484 <_vfiprintf_r+0x44>
 800d49c:	2300      	movs	r3, #0
 800d49e:	9309      	str	r3, [sp, #36]	; 0x24
 800d4a0:	2320      	movs	r3, #32
 800d4a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4aa:	2330      	movs	r3, #48	; 0x30
 800d4ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d660 <_vfiprintf_r+0x220>
 800d4b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4b4:	f04f 0901 	mov.w	r9, #1
 800d4b8:	4623      	mov	r3, r4
 800d4ba:	469a      	mov	sl, r3
 800d4bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4c0:	b10a      	cbz	r2, 800d4c6 <_vfiprintf_r+0x86>
 800d4c2:	2a25      	cmp	r2, #37	; 0x25
 800d4c4:	d1f9      	bne.n	800d4ba <_vfiprintf_r+0x7a>
 800d4c6:	ebba 0b04 	subs.w	fp, sl, r4
 800d4ca:	d00b      	beq.n	800d4e4 <_vfiprintf_r+0xa4>
 800d4cc:	465b      	mov	r3, fp
 800d4ce:	4622      	mov	r2, r4
 800d4d0:	4629      	mov	r1, r5
 800d4d2:	4630      	mov	r0, r6
 800d4d4:	f7ff ffa2 	bl	800d41c <__sfputs_r>
 800d4d8:	3001      	adds	r0, #1
 800d4da:	f000 80a9 	beq.w	800d630 <_vfiprintf_r+0x1f0>
 800d4de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4e0:	445a      	add	r2, fp
 800d4e2:	9209      	str	r2, [sp, #36]	; 0x24
 800d4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	f000 80a1 	beq.w	800d630 <_vfiprintf_r+0x1f0>
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d4f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4f8:	f10a 0a01 	add.w	sl, sl, #1
 800d4fc:	9304      	str	r3, [sp, #16]
 800d4fe:	9307      	str	r3, [sp, #28]
 800d500:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d504:	931a      	str	r3, [sp, #104]	; 0x68
 800d506:	4654      	mov	r4, sl
 800d508:	2205      	movs	r2, #5
 800d50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d50e:	4854      	ldr	r0, [pc, #336]	; (800d660 <_vfiprintf_r+0x220>)
 800d510:	f7f2 fe86 	bl	8000220 <memchr>
 800d514:	9a04      	ldr	r2, [sp, #16]
 800d516:	b9d8      	cbnz	r0, 800d550 <_vfiprintf_r+0x110>
 800d518:	06d1      	lsls	r1, r2, #27
 800d51a:	bf44      	itt	mi
 800d51c:	2320      	movmi	r3, #32
 800d51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d522:	0713      	lsls	r3, r2, #28
 800d524:	bf44      	itt	mi
 800d526:	232b      	movmi	r3, #43	; 0x2b
 800d528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d52c:	f89a 3000 	ldrb.w	r3, [sl]
 800d530:	2b2a      	cmp	r3, #42	; 0x2a
 800d532:	d015      	beq.n	800d560 <_vfiprintf_r+0x120>
 800d534:	9a07      	ldr	r2, [sp, #28]
 800d536:	4654      	mov	r4, sl
 800d538:	2000      	movs	r0, #0
 800d53a:	f04f 0c0a 	mov.w	ip, #10
 800d53e:	4621      	mov	r1, r4
 800d540:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d544:	3b30      	subs	r3, #48	; 0x30
 800d546:	2b09      	cmp	r3, #9
 800d548:	d94d      	bls.n	800d5e6 <_vfiprintf_r+0x1a6>
 800d54a:	b1b0      	cbz	r0, 800d57a <_vfiprintf_r+0x13a>
 800d54c:	9207      	str	r2, [sp, #28]
 800d54e:	e014      	b.n	800d57a <_vfiprintf_r+0x13a>
 800d550:	eba0 0308 	sub.w	r3, r0, r8
 800d554:	fa09 f303 	lsl.w	r3, r9, r3
 800d558:	4313      	orrs	r3, r2
 800d55a:	9304      	str	r3, [sp, #16]
 800d55c:	46a2      	mov	sl, r4
 800d55e:	e7d2      	b.n	800d506 <_vfiprintf_r+0xc6>
 800d560:	9b03      	ldr	r3, [sp, #12]
 800d562:	1d19      	adds	r1, r3, #4
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	9103      	str	r1, [sp, #12]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	bfbb      	ittet	lt
 800d56c:	425b      	neglt	r3, r3
 800d56e:	f042 0202 	orrlt.w	r2, r2, #2
 800d572:	9307      	strge	r3, [sp, #28]
 800d574:	9307      	strlt	r3, [sp, #28]
 800d576:	bfb8      	it	lt
 800d578:	9204      	strlt	r2, [sp, #16]
 800d57a:	7823      	ldrb	r3, [r4, #0]
 800d57c:	2b2e      	cmp	r3, #46	; 0x2e
 800d57e:	d10c      	bne.n	800d59a <_vfiprintf_r+0x15a>
 800d580:	7863      	ldrb	r3, [r4, #1]
 800d582:	2b2a      	cmp	r3, #42	; 0x2a
 800d584:	d134      	bne.n	800d5f0 <_vfiprintf_r+0x1b0>
 800d586:	9b03      	ldr	r3, [sp, #12]
 800d588:	1d1a      	adds	r2, r3, #4
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	9203      	str	r2, [sp, #12]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	bfb8      	it	lt
 800d592:	f04f 33ff 	movlt.w	r3, #4294967295
 800d596:	3402      	adds	r4, #2
 800d598:	9305      	str	r3, [sp, #20]
 800d59a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d670 <_vfiprintf_r+0x230>
 800d59e:	7821      	ldrb	r1, [r4, #0]
 800d5a0:	2203      	movs	r2, #3
 800d5a2:	4650      	mov	r0, sl
 800d5a4:	f7f2 fe3c 	bl	8000220 <memchr>
 800d5a8:	b138      	cbz	r0, 800d5ba <_vfiprintf_r+0x17a>
 800d5aa:	9b04      	ldr	r3, [sp, #16]
 800d5ac:	eba0 000a 	sub.w	r0, r0, sl
 800d5b0:	2240      	movs	r2, #64	; 0x40
 800d5b2:	4082      	lsls	r2, r0
 800d5b4:	4313      	orrs	r3, r2
 800d5b6:	3401      	adds	r4, #1
 800d5b8:	9304      	str	r3, [sp, #16]
 800d5ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5be:	4829      	ldr	r0, [pc, #164]	; (800d664 <_vfiprintf_r+0x224>)
 800d5c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5c4:	2206      	movs	r2, #6
 800d5c6:	f7f2 fe2b 	bl	8000220 <memchr>
 800d5ca:	2800      	cmp	r0, #0
 800d5cc:	d03f      	beq.n	800d64e <_vfiprintf_r+0x20e>
 800d5ce:	4b26      	ldr	r3, [pc, #152]	; (800d668 <_vfiprintf_r+0x228>)
 800d5d0:	bb1b      	cbnz	r3, 800d61a <_vfiprintf_r+0x1da>
 800d5d2:	9b03      	ldr	r3, [sp, #12]
 800d5d4:	3307      	adds	r3, #7
 800d5d6:	f023 0307 	bic.w	r3, r3, #7
 800d5da:	3308      	adds	r3, #8
 800d5dc:	9303      	str	r3, [sp, #12]
 800d5de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5e0:	443b      	add	r3, r7
 800d5e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d5e4:	e768      	b.n	800d4b8 <_vfiprintf_r+0x78>
 800d5e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5ea:	460c      	mov	r4, r1
 800d5ec:	2001      	movs	r0, #1
 800d5ee:	e7a6      	b.n	800d53e <_vfiprintf_r+0xfe>
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	3401      	adds	r4, #1
 800d5f4:	9305      	str	r3, [sp, #20]
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	f04f 0c0a 	mov.w	ip, #10
 800d5fc:	4620      	mov	r0, r4
 800d5fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d602:	3a30      	subs	r2, #48	; 0x30
 800d604:	2a09      	cmp	r2, #9
 800d606:	d903      	bls.n	800d610 <_vfiprintf_r+0x1d0>
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d0c6      	beq.n	800d59a <_vfiprintf_r+0x15a>
 800d60c:	9105      	str	r1, [sp, #20]
 800d60e:	e7c4      	b.n	800d59a <_vfiprintf_r+0x15a>
 800d610:	fb0c 2101 	mla	r1, ip, r1, r2
 800d614:	4604      	mov	r4, r0
 800d616:	2301      	movs	r3, #1
 800d618:	e7f0      	b.n	800d5fc <_vfiprintf_r+0x1bc>
 800d61a:	ab03      	add	r3, sp, #12
 800d61c:	9300      	str	r3, [sp, #0]
 800d61e:	462a      	mov	r2, r5
 800d620:	4b12      	ldr	r3, [pc, #72]	; (800d66c <_vfiprintf_r+0x22c>)
 800d622:	a904      	add	r1, sp, #16
 800d624:	4630      	mov	r0, r6
 800d626:	f7fb fe4b 	bl	80092c0 <_printf_float>
 800d62a:	4607      	mov	r7, r0
 800d62c:	1c78      	adds	r0, r7, #1
 800d62e:	d1d6      	bne.n	800d5de <_vfiprintf_r+0x19e>
 800d630:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d632:	07d9      	lsls	r1, r3, #31
 800d634:	d405      	bmi.n	800d642 <_vfiprintf_r+0x202>
 800d636:	89ab      	ldrh	r3, [r5, #12]
 800d638:	059a      	lsls	r2, r3, #22
 800d63a:	d402      	bmi.n	800d642 <_vfiprintf_r+0x202>
 800d63c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d63e:	f7fc fdb9 	bl	800a1b4 <__retarget_lock_release_recursive>
 800d642:	89ab      	ldrh	r3, [r5, #12]
 800d644:	065b      	lsls	r3, r3, #25
 800d646:	f53f af1d 	bmi.w	800d484 <_vfiprintf_r+0x44>
 800d64a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d64c:	e71c      	b.n	800d488 <_vfiprintf_r+0x48>
 800d64e:	ab03      	add	r3, sp, #12
 800d650:	9300      	str	r3, [sp, #0]
 800d652:	462a      	mov	r2, r5
 800d654:	4b05      	ldr	r3, [pc, #20]	; (800d66c <_vfiprintf_r+0x22c>)
 800d656:	a904      	add	r1, sp, #16
 800d658:	4630      	mov	r0, r6
 800d65a:	f7fc f8d5 	bl	8009808 <_printf_i>
 800d65e:	e7e4      	b.n	800d62a <_vfiprintf_r+0x1ea>
 800d660:	0800f1e9 	.word	0x0800f1e9
 800d664:	0800f1f3 	.word	0x0800f1f3
 800d668:	080092c1 	.word	0x080092c1
 800d66c:	0800d41d 	.word	0x0800d41d
 800d670:	0800f1ef 	.word	0x0800f1ef

0800d674 <__swbuf_r>:
 800d674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d676:	460e      	mov	r6, r1
 800d678:	4614      	mov	r4, r2
 800d67a:	4605      	mov	r5, r0
 800d67c:	b118      	cbz	r0, 800d686 <__swbuf_r+0x12>
 800d67e:	6a03      	ldr	r3, [r0, #32]
 800d680:	b90b      	cbnz	r3, 800d686 <__swbuf_r+0x12>
 800d682:	f7fc fc7f 	bl	8009f84 <__sinit>
 800d686:	69a3      	ldr	r3, [r4, #24]
 800d688:	60a3      	str	r3, [r4, #8]
 800d68a:	89a3      	ldrh	r3, [r4, #12]
 800d68c:	071a      	lsls	r2, r3, #28
 800d68e:	d525      	bpl.n	800d6dc <__swbuf_r+0x68>
 800d690:	6923      	ldr	r3, [r4, #16]
 800d692:	b31b      	cbz	r3, 800d6dc <__swbuf_r+0x68>
 800d694:	6823      	ldr	r3, [r4, #0]
 800d696:	6922      	ldr	r2, [r4, #16]
 800d698:	1a98      	subs	r0, r3, r2
 800d69a:	6963      	ldr	r3, [r4, #20]
 800d69c:	b2f6      	uxtb	r6, r6
 800d69e:	4283      	cmp	r3, r0
 800d6a0:	4637      	mov	r7, r6
 800d6a2:	dc04      	bgt.n	800d6ae <__swbuf_r+0x3a>
 800d6a4:	4621      	mov	r1, r4
 800d6a6:	4628      	mov	r0, r5
 800d6a8:	f7ff fa2a 	bl	800cb00 <_fflush_r>
 800d6ac:	b9e0      	cbnz	r0, 800d6e8 <__swbuf_r+0x74>
 800d6ae:	68a3      	ldr	r3, [r4, #8]
 800d6b0:	3b01      	subs	r3, #1
 800d6b2:	60a3      	str	r3, [r4, #8]
 800d6b4:	6823      	ldr	r3, [r4, #0]
 800d6b6:	1c5a      	adds	r2, r3, #1
 800d6b8:	6022      	str	r2, [r4, #0]
 800d6ba:	701e      	strb	r6, [r3, #0]
 800d6bc:	6962      	ldr	r2, [r4, #20]
 800d6be:	1c43      	adds	r3, r0, #1
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d004      	beq.n	800d6ce <__swbuf_r+0x5a>
 800d6c4:	89a3      	ldrh	r3, [r4, #12]
 800d6c6:	07db      	lsls	r3, r3, #31
 800d6c8:	d506      	bpl.n	800d6d8 <__swbuf_r+0x64>
 800d6ca:	2e0a      	cmp	r6, #10
 800d6cc:	d104      	bne.n	800d6d8 <__swbuf_r+0x64>
 800d6ce:	4621      	mov	r1, r4
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	f7ff fa15 	bl	800cb00 <_fflush_r>
 800d6d6:	b938      	cbnz	r0, 800d6e8 <__swbuf_r+0x74>
 800d6d8:	4638      	mov	r0, r7
 800d6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6dc:	4621      	mov	r1, r4
 800d6de:	4628      	mov	r0, r5
 800d6e0:	f000 f806 	bl	800d6f0 <__swsetup_r>
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	d0d5      	beq.n	800d694 <__swbuf_r+0x20>
 800d6e8:	f04f 37ff 	mov.w	r7, #4294967295
 800d6ec:	e7f4      	b.n	800d6d8 <__swbuf_r+0x64>
	...

0800d6f0 <__swsetup_r>:
 800d6f0:	b538      	push	{r3, r4, r5, lr}
 800d6f2:	4b2a      	ldr	r3, [pc, #168]	; (800d79c <__swsetup_r+0xac>)
 800d6f4:	4605      	mov	r5, r0
 800d6f6:	6818      	ldr	r0, [r3, #0]
 800d6f8:	460c      	mov	r4, r1
 800d6fa:	b118      	cbz	r0, 800d704 <__swsetup_r+0x14>
 800d6fc:	6a03      	ldr	r3, [r0, #32]
 800d6fe:	b90b      	cbnz	r3, 800d704 <__swsetup_r+0x14>
 800d700:	f7fc fc40 	bl	8009f84 <__sinit>
 800d704:	89a3      	ldrh	r3, [r4, #12]
 800d706:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d70a:	0718      	lsls	r0, r3, #28
 800d70c:	d422      	bmi.n	800d754 <__swsetup_r+0x64>
 800d70e:	06d9      	lsls	r1, r3, #27
 800d710:	d407      	bmi.n	800d722 <__swsetup_r+0x32>
 800d712:	2309      	movs	r3, #9
 800d714:	602b      	str	r3, [r5, #0]
 800d716:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d71a:	81a3      	strh	r3, [r4, #12]
 800d71c:	f04f 30ff 	mov.w	r0, #4294967295
 800d720:	e034      	b.n	800d78c <__swsetup_r+0x9c>
 800d722:	0758      	lsls	r0, r3, #29
 800d724:	d512      	bpl.n	800d74c <__swsetup_r+0x5c>
 800d726:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d728:	b141      	cbz	r1, 800d73c <__swsetup_r+0x4c>
 800d72a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d72e:	4299      	cmp	r1, r3
 800d730:	d002      	beq.n	800d738 <__swsetup_r+0x48>
 800d732:	4628      	mov	r0, r5
 800d734:	f7fd fbc2 	bl	800aebc <_free_r>
 800d738:	2300      	movs	r3, #0
 800d73a:	6363      	str	r3, [r4, #52]	; 0x34
 800d73c:	89a3      	ldrh	r3, [r4, #12]
 800d73e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d742:	81a3      	strh	r3, [r4, #12]
 800d744:	2300      	movs	r3, #0
 800d746:	6063      	str	r3, [r4, #4]
 800d748:	6923      	ldr	r3, [r4, #16]
 800d74a:	6023      	str	r3, [r4, #0]
 800d74c:	89a3      	ldrh	r3, [r4, #12]
 800d74e:	f043 0308 	orr.w	r3, r3, #8
 800d752:	81a3      	strh	r3, [r4, #12]
 800d754:	6923      	ldr	r3, [r4, #16]
 800d756:	b94b      	cbnz	r3, 800d76c <__swsetup_r+0x7c>
 800d758:	89a3      	ldrh	r3, [r4, #12]
 800d75a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d75e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d762:	d003      	beq.n	800d76c <__swsetup_r+0x7c>
 800d764:	4621      	mov	r1, r4
 800d766:	4628      	mov	r0, r5
 800d768:	f000 f884 	bl	800d874 <__smakebuf_r>
 800d76c:	89a0      	ldrh	r0, [r4, #12]
 800d76e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d772:	f010 0301 	ands.w	r3, r0, #1
 800d776:	d00a      	beq.n	800d78e <__swsetup_r+0x9e>
 800d778:	2300      	movs	r3, #0
 800d77a:	60a3      	str	r3, [r4, #8]
 800d77c:	6963      	ldr	r3, [r4, #20]
 800d77e:	425b      	negs	r3, r3
 800d780:	61a3      	str	r3, [r4, #24]
 800d782:	6923      	ldr	r3, [r4, #16]
 800d784:	b943      	cbnz	r3, 800d798 <__swsetup_r+0xa8>
 800d786:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d78a:	d1c4      	bne.n	800d716 <__swsetup_r+0x26>
 800d78c:	bd38      	pop	{r3, r4, r5, pc}
 800d78e:	0781      	lsls	r1, r0, #30
 800d790:	bf58      	it	pl
 800d792:	6963      	ldrpl	r3, [r4, #20]
 800d794:	60a3      	str	r3, [r4, #8]
 800d796:	e7f4      	b.n	800d782 <__swsetup_r+0x92>
 800d798:	2000      	movs	r0, #0
 800d79a:	e7f7      	b.n	800d78c <__swsetup_r+0x9c>
 800d79c:	20000074 	.word	0x20000074

0800d7a0 <_raise_r>:
 800d7a0:	291f      	cmp	r1, #31
 800d7a2:	b538      	push	{r3, r4, r5, lr}
 800d7a4:	4604      	mov	r4, r0
 800d7a6:	460d      	mov	r5, r1
 800d7a8:	d904      	bls.n	800d7b4 <_raise_r+0x14>
 800d7aa:	2316      	movs	r3, #22
 800d7ac:	6003      	str	r3, [r0, #0]
 800d7ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d7b2:	bd38      	pop	{r3, r4, r5, pc}
 800d7b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d7b6:	b112      	cbz	r2, 800d7be <_raise_r+0x1e>
 800d7b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d7bc:	b94b      	cbnz	r3, 800d7d2 <_raise_r+0x32>
 800d7be:	4620      	mov	r0, r4
 800d7c0:	f000 f830 	bl	800d824 <_getpid_r>
 800d7c4:	462a      	mov	r2, r5
 800d7c6:	4601      	mov	r1, r0
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7ce:	f000 b817 	b.w	800d800 <_kill_r>
 800d7d2:	2b01      	cmp	r3, #1
 800d7d4:	d00a      	beq.n	800d7ec <_raise_r+0x4c>
 800d7d6:	1c59      	adds	r1, r3, #1
 800d7d8:	d103      	bne.n	800d7e2 <_raise_r+0x42>
 800d7da:	2316      	movs	r3, #22
 800d7dc:	6003      	str	r3, [r0, #0]
 800d7de:	2001      	movs	r0, #1
 800d7e0:	e7e7      	b.n	800d7b2 <_raise_r+0x12>
 800d7e2:	2400      	movs	r4, #0
 800d7e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	4798      	blx	r3
 800d7ec:	2000      	movs	r0, #0
 800d7ee:	e7e0      	b.n	800d7b2 <_raise_r+0x12>

0800d7f0 <raise>:
 800d7f0:	4b02      	ldr	r3, [pc, #8]	; (800d7fc <raise+0xc>)
 800d7f2:	4601      	mov	r1, r0
 800d7f4:	6818      	ldr	r0, [r3, #0]
 800d7f6:	f7ff bfd3 	b.w	800d7a0 <_raise_r>
 800d7fa:	bf00      	nop
 800d7fc:	20000074 	.word	0x20000074

0800d800 <_kill_r>:
 800d800:	b538      	push	{r3, r4, r5, lr}
 800d802:	4d07      	ldr	r5, [pc, #28]	; (800d820 <_kill_r+0x20>)
 800d804:	2300      	movs	r3, #0
 800d806:	4604      	mov	r4, r0
 800d808:	4608      	mov	r0, r1
 800d80a:	4611      	mov	r1, r2
 800d80c:	602b      	str	r3, [r5, #0]
 800d80e:	f7f4 fadb 	bl	8001dc8 <_kill>
 800d812:	1c43      	adds	r3, r0, #1
 800d814:	d102      	bne.n	800d81c <_kill_r+0x1c>
 800d816:	682b      	ldr	r3, [r5, #0]
 800d818:	b103      	cbz	r3, 800d81c <_kill_r+0x1c>
 800d81a:	6023      	str	r3, [r4, #0]
 800d81c:	bd38      	pop	{r3, r4, r5, pc}
 800d81e:	bf00      	nop
 800d820:	20000a68 	.word	0x20000a68

0800d824 <_getpid_r>:
 800d824:	f7f4 bac8 	b.w	8001db8 <_getpid>

0800d828 <__swhatbuf_r>:
 800d828:	b570      	push	{r4, r5, r6, lr}
 800d82a:	460c      	mov	r4, r1
 800d82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d830:	2900      	cmp	r1, #0
 800d832:	b096      	sub	sp, #88	; 0x58
 800d834:	4615      	mov	r5, r2
 800d836:	461e      	mov	r6, r3
 800d838:	da0d      	bge.n	800d856 <__swhatbuf_r+0x2e>
 800d83a:	89a3      	ldrh	r3, [r4, #12]
 800d83c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d840:	f04f 0100 	mov.w	r1, #0
 800d844:	bf0c      	ite	eq
 800d846:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d84a:	2340      	movne	r3, #64	; 0x40
 800d84c:	2000      	movs	r0, #0
 800d84e:	6031      	str	r1, [r6, #0]
 800d850:	602b      	str	r3, [r5, #0]
 800d852:	b016      	add	sp, #88	; 0x58
 800d854:	bd70      	pop	{r4, r5, r6, pc}
 800d856:	466a      	mov	r2, sp
 800d858:	f000 f848 	bl	800d8ec <_fstat_r>
 800d85c:	2800      	cmp	r0, #0
 800d85e:	dbec      	blt.n	800d83a <__swhatbuf_r+0x12>
 800d860:	9901      	ldr	r1, [sp, #4]
 800d862:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d866:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d86a:	4259      	negs	r1, r3
 800d86c:	4159      	adcs	r1, r3
 800d86e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d872:	e7eb      	b.n	800d84c <__swhatbuf_r+0x24>

0800d874 <__smakebuf_r>:
 800d874:	898b      	ldrh	r3, [r1, #12]
 800d876:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d878:	079d      	lsls	r5, r3, #30
 800d87a:	4606      	mov	r6, r0
 800d87c:	460c      	mov	r4, r1
 800d87e:	d507      	bpl.n	800d890 <__smakebuf_r+0x1c>
 800d880:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d884:	6023      	str	r3, [r4, #0]
 800d886:	6123      	str	r3, [r4, #16]
 800d888:	2301      	movs	r3, #1
 800d88a:	6163      	str	r3, [r4, #20]
 800d88c:	b002      	add	sp, #8
 800d88e:	bd70      	pop	{r4, r5, r6, pc}
 800d890:	ab01      	add	r3, sp, #4
 800d892:	466a      	mov	r2, sp
 800d894:	f7ff ffc8 	bl	800d828 <__swhatbuf_r>
 800d898:	9900      	ldr	r1, [sp, #0]
 800d89a:	4605      	mov	r5, r0
 800d89c:	4630      	mov	r0, r6
 800d89e:	f7fd fb81 	bl	800afa4 <_malloc_r>
 800d8a2:	b948      	cbnz	r0, 800d8b8 <__smakebuf_r+0x44>
 800d8a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8a8:	059a      	lsls	r2, r3, #22
 800d8aa:	d4ef      	bmi.n	800d88c <__smakebuf_r+0x18>
 800d8ac:	f023 0303 	bic.w	r3, r3, #3
 800d8b0:	f043 0302 	orr.w	r3, r3, #2
 800d8b4:	81a3      	strh	r3, [r4, #12]
 800d8b6:	e7e3      	b.n	800d880 <__smakebuf_r+0xc>
 800d8b8:	89a3      	ldrh	r3, [r4, #12]
 800d8ba:	6020      	str	r0, [r4, #0]
 800d8bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8c0:	81a3      	strh	r3, [r4, #12]
 800d8c2:	9b00      	ldr	r3, [sp, #0]
 800d8c4:	6163      	str	r3, [r4, #20]
 800d8c6:	9b01      	ldr	r3, [sp, #4]
 800d8c8:	6120      	str	r0, [r4, #16]
 800d8ca:	b15b      	cbz	r3, 800d8e4 <__smakebuf_r+0x70>
 800d8cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8d0:	4630      	mov	r0, r6
 800d8d2:	f000 f81d 	bl	800d910 <_isatty_r>
 800d8d6:	b128      	cbz	r0, 800d8e4 <__smakebuf_r+0x70>
 800d8d8:	89a3      	ldrh	r3, [r4, #12]
 800d8da:	f023 0303 	bic.w	r3, r3, #3
 800d8de:	f043 0301 	orr.w	r3, r3, #1
 800d8e2:	81a3      	strh	r3, [r4, #12]
 800d8e4:	89a3      	ldrh	r3, [r4, #12]
 800d8e6:	431d      	orrs	r5, r3
 800d8e8:	81a5      	strh	r5, [r4, #12]
 800d8ea:	e7cf      	b.n	800d88c <__smakebuf_r+0x18>

0800d8ec <_fstat_r>:
 800d8ec:	b538      	push	{r3, r4, r5, lr}
 800d8ee:	4d07      	ldr	r5, [pc, #28]	; (800d90c <_fstat_r+0x20>)
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	4604      	mov	r4, r0
 800d8f4:	4608      	mov	r0, r1
 800d8f6:	4611      	mov	r1, r2
 800d8f8:	602b      	str	r3, [r5, #0]
 800d8fa:	f7f4 fac4 	bl	8001e86 <_fstat>
 800d8fe:	1c43      	adds	r3, r0, #1
 800d900:	d102      	bne.n	800d908 <_fstat_r+0x1c>
 800d902:	682b      	ldr	r3, [r5, #0]
 800d904:	b103      	cbz	r3, 800d908 <_fstat_r+0x1c>
 800d906:	6023      	str	r3, [r4, #0]
 800d908:	bd38      	pop	{r3, r4, r5, pc}
 800d90a:	bf00      	nop
 800d90c:	20000a68 	.word	0x20000a68

0800d910 <_isatty_r>:
 800d910:	b538      	push	{r3, r4, r5, lr}
 800d912:	4d06      	ldr	r5, [pc, #24]	; (800d92c <_isatty_r+0x1c>)
 800d914:	2300      	movs	r3, #0
 800d916:	4604      	mov	r4, r0
 800d918:	4608      	mov	r0, r1
 800d91a:	602b      	str	r3, [r5, #0]
 800d91c:	f7f4 fac3 	bl	8001ea6 <_isatty>
 800d920:	1c43      	adds	r3, r0, #1
 800d922:	d102      	bne.n	800d92a <_isatty_r+0x1a>
 800d924:	682b      	ldr	r3, [r5, #0]
 800d926:	b103      	cbz	r3, 800d92a <_isatty_r+0x1a>
 800d928:	6023      	str	r3, [r4, #0]
 800d92a:	bd38      	pop	{r3, r4, r5, pc}
 800d92c:	20000a68 	.word	0x20000a68

0800d930 <_init>:
 800d930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d932:	bf00      	nop
 800d934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d936:	bc08      	pop	{r3}
 800d938:	469e      	mov	lr, r3
 800d93a:	4770      	bx	lr

0800d93c <_fini>:
 800d93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d93e:	bf00      	nop
 800d940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d942:	bc08      	pop	{r3}
 800d944:	469e      	mov	lr, r3
 800d946:	4770      	bx	lr
